<!DOCTYPE html>
<html>
 <head>
  <meta charset="utf-8"/>
  <style type="text/css">
   .landshadow {
                fill: none;
                stroke: #ccc;
                stroke-width: 4px;
                stroke-linejoin: round;
            }
            .states {
                fill: none;
                stroke: #fff;
                stroke-linejoin: round;
            }
            .counties {
                fill: #fff;
            }
            #map-container {
                height: 500px;
                width: 1500px;
                text-align: center;
                position: relative;
            }
            #d3map {
                display: block;
                position: absolute;
                width: 100%;
                height: 100%;
                margin: 0;
            }
  </style>
  <link href="http://code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css" rel="stylesheet" type="text/css"/>
  <link href="d3/tipsy.css" rel="stylesheet" type="text/css"/>
  <script src="d3/d3.v3.min.js">
  </script>
  <script src="d3/queue.v1.min.js">
  </script>
  <script src="d3/topojson.v0.min.js">
  </script>
  <script src="http://code.jquery.com/jquery-1.8.3.js">
  </script>
  <script src="http://code.jquery.com/ui/1.9.2/jquery-ui.js">
  </script>
  <script src="d3/jquery.tipsy.js">
  </script>
  <title>
   The Pop vs. Soda Page
  </title>
  <meta content="pop versus soda, pop vs soda, pop vs. soda, soda versus pop, soda vs pop, soda vs. pop, pop v soda, soda v pop, soda vs coke, soda versus coke, pop vs coke, pop versus coke, coke vs soda, coke versus soda, coke vs pop, coke versus pop,
		pop, soda, soda pop, linguistic geography, soft drinks, soft drink, carbonated beverage, carbonated beverages, study, studies, research, usage, terminology, survey, web survey, map, isogloss, linguistics, Alan McConchie, McConchie" name="keywords"/>
  <meta content='A page that maps the geographic distribution of the terms "pop" and "soda" when used to describe carbonated beverages' name="description"/>
  <script>
   $(function() {
				$("#tabs").tabs();
			});
  </script>
  <link href="css/style.css" rel="stylesheet" type="text/css"/>
 </head>
 <body>
  <header>
   <!-- HTML5 header tag -->
   <div id="headercontainer">
    <h1>
     <img alt="Pop vs Soda" height="55" src="images/popvssoda title.png" width="282"/>
    </h1>
   </div>
  </header>
  <section id="contentcontainer">
   <!-- HTML5 section tag for the content 'section' -->
   <section id="map">
    <div id="map-container">
     <!-- the D3 map will be rendered here -->
     <svg id="d3map">
     </svg>
    </div>
    <div id="tabs">
     <ul>
      <li>
       <a href="#tabs-1">
        Cyan/Magenta/Yellow
       </a>
      </li>
      <li>
       <a href="#tabs-2">
        Red/Green/Blue
       </a>
      </li>
      <li>
       <a href="#tabs-3">
        Black and White
       </a>
      </li>
     </ul>
     <div id="tabs-1">
      <ul>
       <li id="cmykbutton">
        show all
       </li>
       <li id="cmykpopbutton">
        pop
       </li>
       <li id="cmyksodabutton">
        soda
       </li>
       <li id="cmykcokebutton">
        coke
       </li>
       <li id="cmykotherbutton">
        other
       </li>
      </ul>
     </div>
     <div id="tabs-2">
      <ul>
       <li id="rgbbutton">
        show all
       </li>
       <li id="rgbpopbutton">
        pop
       </li>
       <li id="rgbsodabutton">
        soda
       </li>
       <li id="rgbcokebutton">
        coke
       </li>
       <li id="rgbotherbutton">
        other
       </li>
      </ul>
     </div>
     <div id="tabs-3">
      <ul>
       <li class="not_avail">
        show all
       </li>
       <li id="bwpopbutton">
        pop
       </li>
       <li id="bwsodabutton">
        soda
       </li>
       <li id="bwcokebutton">
        coke
       </li>
       <li id="bwotherbutton">
        other
       </li>
      </ul>
     </div>
    </div>
   </section>
   <section id="form">
    <form action="pop.cgi" id="pvs" method="post">
     <fieldset>
      <legend>
       Your details
      </legend>
      <ol>
       <li>
        <label for="name">
         Your name: (optional)
        </label>
        <input id="name" name="name" type="TEXT"/>
       </li>
       <li>
        <label for="email">
         Your e-mail address: (optional)
        </label>
        <input name="email" type="text"/>
       </li>
      </ol>
     </fieldset>
     <fieldset>
      <legend>
       Beverage term
      </legend>
      <ol>
       <li>
        <fieldset>
         <legend>
          What generic word do you use to describe carbonated soft drinks? (Note that these could be of any brand or type, Coca-Cola, Pepsi, 7-Up, etc.  We are concerned with the overall word, not a specific brand.) If you have changed the word you use at some point in your life, please enter the term you first used when you learned English.
         </legend>
         <ol>
          <li>
           <input name="beverage-term" type="radio" value="pop"/>
           <label for="pop">
            Pop
           </label>
          </li>
          <li>
           <input name="beverage-term" type="radio" value="soda"/>
           <label for="soda">
            Soda
           </label>
          </li>
          <li>
           <input name="beverage-term" type="radio" value="coke"/>
           <label for="coke">
            Coke
           </label>
          </li>
          <li>
           <input checked="" name="beverage-term" type="radio" value="other"/>
           <label for="other">
            Other
           </label>
          </li>
         </ol>
        </fieldset>
       </li>
       <li>
        <label for="other">
         (If other, please specify word)
        </label>
        <input name="other" size="10" type="text"/>
       </li>
      </ol>
     </fieldset>
     <fieldset>
      <legend>
       Hometown
      </legend>
      <ol>
       <li>
        <fieldset>
         <legend>
          Please remember to give the city, state and zip code of your
          <i>
           hometown
          </i>
          , the place where you learned the dialect of English you speak, even if it is not where you live now.
         </legend>
        </fieldset>
       </li>
       <li>
        <label for="hometown">
         Your hometown:
        </label>
        <input name="hometown" type="text"/>
       </li>
       <li>
        <label for="state">
         State/Province:
        </label>
        <select name="state">
         <option value="">
          Not Applicable
         </option>
         <option value="">
          --
         </option>
         <option selected="" value="AL">
          Alabama
         </option>
         <option value="AK">
          Alaska
         </option>
         <option value="AS">
          American Samoa
         </option>
         <option value="AZ">
          Arizona
         </option>
         <option value="AR">
          Arkansas
         </option>
         <option value="CA">
          California
         </option>
         <option value="CO">
          Colorado
         </option>
         <option value="CT">
          Connecticut
         </option>
         <option value="DE">
          Delaware
         </option>
         <option value="DC">
          District of Columbia
         </option>
         <option value="FL">
          Florida
         </option>
         <option value="GA">
          Georgia
         </option>
         <option value="GU">
          Guam
         </option>
         <option value="HI">
          Hawaii
         </option>
         <option value="ID">
          Idaho
         </option>
         <option value="IL">
          Illinois
         </option>
         <option value="IN">
          Indiana
         </option>
         <option value="IA">
          Iowa
         </option>
         <option value="KS">
          Kansas
         </option>
         <option value="KY">
          Kentucky
         </option>
         <option value="LA">
          Louisiana
         </option>
         <option value="ME">
          Maine
         </option>
         <option value="MD">
          Maryland
         </option>
         <option value="MA">
          Massachusetts
         </option>
         <option value="MI">
          Michigan
         </option>
         <option value="MN">
          Minnesota
         </option>
         <option value="MS">
          Mississippi
         </option>
         <option value="MO">
          Missouri
         </option>
         <option value="MT">
          Montana
         </option>
         <option value="NE">
          Nebraska
         </option>
         <option value="NV">
          Nevada
         </option>
         <option value="NH">
          New Hampshire
         </option>
         <option value="NJ">
          New Jersey
         </option>
         <option value="NM">
          New Mexico
         </option>
         <option value="NY">
          New York
         </option>
         <option value="NC">
          North Carolina
         </option>
         <option value="ND">
          North Dakota
         </option>
         <option value="OH">
          Ohio
         </option>
         <option value="OK">
          Oklahoma
         </option>
         <option value="OR">
          Oregon
         </option>
         <option value="PA">
          Pennsylvania
         </option>
         <option value="PR">
          Puerto Rico
         </option>
         <option value="RI">
          Rhode Island
         </option>
         <option value="SC">
          South Carolina
         </option>
         <option value="SD">
          South Dakota
         </option>
         <option value="TN">
          Tennessee
         </option>
         <option value="TX">
          Texas
         </option>
         <option value="UT">
          Utah
         </option>
         <option value="VT">
          Vermont
         </option>
         <option value="VA">
          Virginia
         </option>
         <option value="VI">
          Virgin Islands
         </option>
         <option value="WA">
          Washington
         </option>
         <option value="WV">
          West Virginia
         </option>
         <option value="WI">
          Wisconsin
         </option>
         <option value="WY">
          Wyoming
         </option>
         <option value="">
          --
         </option>
         <option value="AB">
          Alberta
         </option>
         <option value="BC">
          British Columbia
         </option>
         <option value="MB">
          Manitoba
         </option>
         <option value="NB">
          New Brunswick
         </option>
         <option value="NF">
          Newfoundland and Labrador
         </option>
         <option value="NT">
          Northwest Territories
         </option>
         <option value="NS">
          Nova Scotia
         </option>
         <option value="NU">
          Nunavut
         </option>
         <option value="ON">
          Ontario
         </option>
         <option value="PE">
          Prince Edward Island
         </option>
         <option value="QC">
          Quebec
         </option>
         <option value="SK">
          Saskatchewan
         </option>
         <option value="YT">
          Yukon
         </option>
        </select>
       </li>
       <li>
        <label for="zipcode">
         Zip/Postal Code:
        </label>
        <input name="zipcode" required="" size="10" type="text"/>
       </li>
      </ol>
     </fieldset>
     <p>
      Forgot the zip code of where you grew up?
      <br/>
      These sites will tell you the zip/postal code for any address:
      <br/>
      <a href="http://www.usps.gov/zip4/">
       United States Postal Service
      </a>
      <br/>
      <a href="http://www.canadapost.ca/cpotools/apps/fpc/personal/findByCity">
       Canada Post
      </a>
     </p>
     <fieldset>
      <button type="submit">
       Send
      </button>
      <button type="reset">
       Clear
      </button>
     </fieldset>
    </form>
   </section>
   <section id="about">
    <h2>
     ABOUT
    </h2>
    <p>
     The Pop vs Soda Page is a web-based project to plot the regional variations in the use of the terms "Pop" and "Soda" to describe carbonated soft drinks. You can help by filling out the survey!
    </p>
   </section>
   <section id="survey">
    <h2>
     THE SURVEY
    </h2>
    <p>
     Name and email address are optional. Hometown and state/province are also optional, but strongly encouraged. However,
     <strong>
      a valid zip or postal code is critical,
     </strong>
     because our software uses a database of zip codes and their latitudes and longitudes to plot the data on the map.
    </p>
    <p>
     Currently the project is limited to English-speaking North America. Please stay tuned for an updated map which will include data for Canada.
    </p>
    <p>
     Thank you for your participation!
    </p>
   </section>
   <section id="stats">
    <h2>
     STATISTICS
    </h2>
    <a href="statistics/ALL.html">
     View the Pop vs. Soda statistics.
    </a>
    <br/>
    (Click here to find out what people are saying for "other".)
   </section>
   <!--
			<section id="references">
			<h2>REFERENCES</h2>
			<p><a href="http://www.commoncensus.org">CommonCensus.org</a> is a similar survey that asks you which city is the cultural center of your area, and also has a question about which <a href="http://www.commoncensus.org/sports.php">sports teams</a> you support.</p>
			<p>Try this more scientific <a href="http://cfprod01.imt.uwm.edu/Dept/FLL/linguistics/dialect/maps.html">dialect survey</a> developed by Prof. Bert Vaux, Scott A. Golder, Rebecca Starr and Britt Bolen.</p>
			<p>I haven't read the relevant volume of <a href="http://dare.wisc.edu/">
			The Dictionary of American Regional English</a> (DARE) but I'm sure it has
			already covered this topic thoroughly.</p>
			<p>See also: Von Schneidemesser, Luanne.  "Soda or Pop?"  Journal of English
			Linguistics. December 1996.</p>
			<p><a href="http://www.ling.upenn.edu/phono_atlas/">The Atlas of North American English</a> (ANAE) is another broad study similar to DARE,
			but focuses more on sounds rather than vocabulary.</p>
			</section>
			<section id="media">
			<h2>MEDIA COVERAGE</h2>
			<ul>
			<li>November 12, 2012 The Huffington Post, &quot;<a href="http://www.huffingtonpost.com/2012/11/12/soda-vs-pop_n_2103764.html">Soda vs Pop vs. Coke: Who Says What, And Where?</a>&quot;</li>
			<li>Apr 26, 2012 Samuel Arbesman, The Atlantic Cities  &quot;<a href="http://www.theatlanticcities.com/arts-and-lifestyle/2012/04/invisible-borders-define-american-culture/1839/">The Invisible Borders That Define American Culture</a>&quot;  </li>
			<li>December 23, 2011 http://dialectblog.com/2011/12/23/pop-vs-soda/</li>
			<li>September 9, 2011 http://www.chicagomag.com/Chicago-Magazine/The-312/September-2011/Pop-vs-Soda-Ill-Show-You-Pop-vs-Soda/    </li>
			<li>September 8, 2011 http://boingboing.net/2011/09/08/pop-or-soda.html</li>

			<li>November 5, 2010 http://blogs.discovermagazine.com/gnxp/2010/11/soda-vs-pop-the-boundaries-of-the-midwest/</li>

			<li>September 17, 2010 http://foodbeast.com/content/2010/09/17/pop-vs-soda-the-debate-intensified-infographic/</li>
			<li>  September 15, 2010 http://newsfeed.time.com/2010/09/15/pop-vs-soda-a-regional-throwdown/  </li>
			<li>September 15, 2008 http://www.seriouseats.com/2008/09/soda-vs-pop-vs-whatever-what-do-you-call-cola.html  </li>
			<li>August 18, 2008 http://bigthink.com/strange-maps/308-the-pop-vs-soda-map  </li>
			<li>October 5, 2006 http://tastyresearch.com/2006/10/05/pop-vs-soda-vs-coke/</li>
			<li>January 27, 2005 Scott Leith, The Atlanta Journal-Constitution &quot;In the South, a 'coke' could be a Pepsi&quot;</li>
			<li>September 12, 2002 http://usatoday30.usatoday.com/tech/webguide/internetlife/2002-09-12-soda-pop_x.htm    </li>
			<li>Sep 12, 2002 CNN headline news with Renay San Miguel</li>
			<li><b>27 April 2001:</b> Spotlighted in the <a href="http://philadelphia.inyourtown.com/content/25/lifestyle/spotlight/candy2.asp?m=44">Fifteen Minutes of Fame</a> column carried by <a href="http://www.inyourtown.com/">InYourTown.com</a>.</li>
			<li><b>23 April 2001:</b> We were mentioned in the <a href="http://www.sptimes.com/News/042301/Technology/Site_Seeing.shtml">Site Seeing</a> column of the <a href="http://www.sptimes.com">St. Petersburg Times</a>.</li>
			<li><b>11 April 2001:</b> We've been <a href="http://memepool.com/">Memepooled</a>.</li>
			<li><b>21 January 2001:</b> We were mentioned in the <a href="http://www.chicagotribune.com/news/columnists/inc/0,1122,SAV-0101210470,00.html">Inc</a> column of the <a href="http://www.chicagotribune.com">Chicago Tribune</a>.</li>
			<li><b>11 December 2000:</b> We are the <a href="http://www.channel3000.com/sh/technology/siteoftheweek/national-technology-siteoftheweek-20001211-080727.html">Web Site of the Week</a> in a column carried by numerous TV station web sites.</li>
			<li><b>25 August 2000:</b> We are the <a href="http://www.userfriendly.org/links/">Link of the Day</a> at <a href="http://www.userfriendly.org/">User Friendly</a>.</li>
			<li><b>22 August 2000:</b> We're getting <a href="http://slashdot.org/">Slashdotted</a>.  They have <a href="http://slashdot.org/pollBooth.pl?qid=beverage&aid=1">a multiple choice poll between pop and soda</a>.  No Coke, however.</li>
			<li><b>21 June 2000:</b> We were mentioned in the <a href="http://www.startribune.com/viewers/qview/cgi/qview.cgi?story=81968894&template=column_weblog_a">Weblog column</a> of the <a href="http://www.startribune.com">Minneapolis Star Tribune</a>.  (This explains the huge number of responses from Minnesota.)            </li>
			<li>http://uncyclopedia.wikia.com/wiki/Pop_v._Soda            </li>
			</ul>
			</section>
			-->
   <footer>
    <p>
     Created by Alan McConchie (
     <a href="http://twitter.com/mappingmashups">
      @mappingmashups
     </a>
     ).
     <br/>
     Further comments?  E-mail pvs@popvssoda.com or twitter
     <a href="http://twitter.com/pop_vs_soda">
      @pop_vs_soda
     </a>
    </p>
    <!--
				<nav>
				<ul>
				<li>News</li>
				<li>About</li>
				<li>Stats</li>
				</ul>
				</nav>
				-->
   </footer>
  </section>
  <script type="application/javascript">
   // Create some scales for univariate modes
			var bwscale = d3.scale.linear()
				.domain([0, 1])
				.range(["white", "black"]);
				
			var cmykpop = d3.scale.linear()
				.domain([0, 1])
				.range(["white", "yellow"]);
				
			var cmyksoda = d3.scale.linear()
				.domain([0, 1])
				.range(["white", "cyan"]);
				
			var cmykcoke = d3.scale.linear()
				.domain([0, 1])
				.range(["white", "magenta"]);
				
			var rgbpop = d3.scale.linear()
				.domain([0, 1])
				.range(["white", "lime"]); // Note, #OOFFOO is not "green"
				
			var rgbsoda = d3.scale.linear()
				.domain([0, 1])
				.range(["white", "blue"]);
				
			var rgbcoke = d3.scale.linear()
				.domain([0, 1])
				.range(["white", "red"]);
				
			// Ideally, I would rewrite these as a d3.scale.trivariate() plugin.
			// Although, this is a misnomer for two reasons: 
			// First, the three different variables are not independent.
			// Second, the PVS encodes other (a 4th possible value) 
			// as black, in both the "rgb" and "cmyk" modes.
			function cmyk(d) {
				if (d.PCTPOP == 0 && d.PCTSODA == 0 && d.PCTCOKE == 0 && d.PCTOTHER == 0) {
					return "white";
				} else {
					return "rgb(" 
						+ Math.round((d.PCTPOP + d.PCTCOKE) * 100) + "%," 
						+ Math.round((d.PCTSODA + d.PCTPOP) * 100) + "%," 
						+ Math.round((d.PCTCOKE + d.PCTSODA) * 100) + "%)";
				}
			}
			
			function rgb(d) {
				if (d.PCTPOP == 0 && d.PCTSODA == 0 && d.PCTCOKE == 0 && d.PCTOTHER == 0) {
					return "white";
				} else {
					return "rgb(" 
						+ Math.round(d.PCTCOKE * 100) + "%," 
						+ Math.round(d.PCTPOP * 100) + "%," 
						+ Math.round(d.PCTSODA * 100) + "%)";
				}
			}

			var path = d3.geo.path()
				.projection(d3.geo.albersUsa().translate([400,250]).scale(800));

			var svg = d3.select("#d3map");
		
			// The d3_hexbinAngles and hexagon function are (obviously) 
			// borrowed from https://github.com/d3/d3-plugins/tree/master/hexbin	
			
			var d3_hexbinAngles = d3.range(0, 2 * Math.PI, Math.PI / 3);
			
			function hexagon(radius) {
				if (arguments.length < 1) {
					// This is where I should calculate the correct radius
					// based on the number of divisions in the overall triangle... but then
					// the hexagon would have to be linked to the legend
					// somehow.
					radius = 8;
				}
				var x0 = 0, y0 = 0; // create shape centered at 0,0
				var points = d3_hexbinAngles.map(function(angle) {
      				var x1 = Math.sin(angle) * radius,
          				y1 = -Math.cos(angle) * radius,
          				dx = x1 - x0,
          				dy = y1 - y0;
          			// I'm not sure why this line is in the hexbin code,
          			// but it was breaking my hexagons, and they work fine
          			// without it:
      				//x0 = x1, y0 = y1;
      				return [dx, dy];
    			});
    			return "M" + points.join("L") + "z";
  			}
  			
  			function rectangle(height, width) {
				if (arguments.length < 2) {
					// This is where I should calculate the correct size
					// based on the number of division in the overall triangle... but then
					// the rectangle would have to be linked to the legend
					// somehow.
					width = 8;
					height = 8;
				}
				halfwidth = width / 2;
				halfheight = height / 2;
				var x0 = 0, y0 = 0; // create shape centered at 0,0
				var points = [
					[x0 - halfwidth, y0 - halfheight],
					[x0 + halfwidth, y0 - halfheight],
					[x0 + halfwidth, y0 + halfheight],
					[x0 - halfwidth, y0 + halfheight]
				]; 
    			return "M" + points.join("L") + "z";	
  			}
  			
  			function triangle(x, y, height) {
  				// Create the svg text representation of an equilateral triangle.
  				// Unlike the shapes above, do not create this centered on 0,0.
  				// The x and y are the coordinates of the top of the triangle. 
  		
  				x = x;	
  				y = y;
				dy = height + 1; // 1 pixel padding so shapes overlap a little
				dx = dy / Math.sqrt(3);
				
  				var points = [
  					[x, y],
  					[x + dx, y + dy],
  					[x - dx, y + dy]
  				];
    			return "M" + points.join("L") + "z";	
  			}
  			
  			function upsidedown_triangle(x, y, height) {
  				// Create the svg text representation of an equilateral triangle.
  				// Unlike the shapes above, do not create this centered on 0,0.
  				// The x and y are the coordinates of the center of the top of the triangle. 
  		
  				x = x;	
  				y = y;
				dy = height;
				dx = dy / Math.sqrt(3);
				
  				var points = [
  					[x - dx, y],
  					[x + dx, y],
  					[x, y + dy]
  				];
    			return "M" + points.join("L") + "z";	
  			}
			
			function trivariate_legend(startx, starty, width, count) {
				// Create a one-dimensional array storing the elements 
				// of a trivariate legend (represented as an equilateral triangle). 
				// Returns the array, suitable for joining with a svg.
				// Note: count is # of divisions. # of swatches will be count + 1.
				// startx and starty are the upper left corner of the triangle's 
				// bounding box. Width is the width of the triangle's bounding box.
				// (Technically, the bounding box of the swatch centers.)
				// The x and y coordinates of the center of each swatch is stored
				// in each array element. The caller of this function is responsible
				// for creating svg symbols at those points (circles, hexagons, etc) 
				
				make_triangle = true;
				
				array = new Array(); 
				id = 0;
				xstep = width / count;
				ystep = Math.sqrt(3) * xstep / 2;
				
				// Create the rows
				for (var i = 0; i <= count; i++) {
					
					// Create the columns 
					// (1st column has 1 row, 2nd column has 2 rows, etc)
					for (var j = 0; j <= i; j++ ) {
						
						x = startx + j * xstep + width / 2 - i * xstep / 2;
						y = starty + i * ystep;
						shape = triangle(x, y, ystep);
						
						array.push(
							{
								x: x,
								y: y,
								i: i,
								j: j,
								PCTSODA: (count - i) / count,
								PCTPOP: (i - j) / count, 
								PCTCOKE: (j) / count,
								PCTOTHER: 0,
								id: id++,
								shp: shape
							}
						);
						
						if (j > 0) {
							x = startx + j * xstep + width / 2 - i * xstep / 2 - xstep / 2;
							y = starty + i * ystep;
							shape = upsidedown_triangle(x, y, ystep);
						
							array.push(
								{
									x: x,
									y: y,
									i: i,
									j: j,
									PCTSODA: (count - i) / count,
									PCTPOP: (i - j + 0.5) / count, 
									PCTCOKE: (j - 0.5) / count,
									PCTOTHER: 0,
									id: id++,
									shp: shape
								}
							);
						}
					}
				}
				return array;
			}
			
			function univariate_legend(startx, starty, height, width, count) {
				// Create a one-dimensional array storing the elements 
				// of a univariate legend (represented as a series of adjoining squares). 
				// Returns the array, suitable for joining with a svg.
				// Note: count is # of divisions. # of swatches will be count + 1.
				// startx and starty are the upper left corner of the legend's 
				// bounding box. Width is the width of the legend's bounding box.
				// The x and y coordinates of the center of each swatch is stored
				// in each array element. The caller of this function is responsible
				// for creating svg symbols at those points (squares, etc) 
				// 
				// The more appropriate d3/svg method for a univariate legend 
				// (I think) would be to create a line with the appropriate 
				// thickness to give the impression of a row of squares. But 
				// here I want the squares to be consistent with the color
				// swatches in the trivariate legend.
				
				array = new Array();
				id = 0;
				xstep = width / count;
				
				// Create the rows
				for (var i = 0; i <= count; i++) {
					array.push(
						{
							x: startx + i * xstep,
							y: starty,
							i: i,
							PCTSODA: 0,
							PCTPOP: 0,
							PCTCOKE: 0,
							PCTOTHER: i / count,
							id: id++
						}
					);
				}
				return array;
			}
		
			// Parameters for the trivariate legend	
			var x = 660,
				y = 400,
				width = 60,
				count = 10;
			
			tri_legend_g = svg.append("g")
				.attr("class", "legend");
				
			// Add a drop shadow for the trivariate legend	
			tri_legend_g.append("path")
				// These calculations are a complete mess because I am calculating all my triangles
				// in different ways. Need to make these more coherent.
				.attr("d", triangle(x + width / 2, y, 1 + Math.sqrt(3) * (width + count / 2) / 2))
				.attr("class", "landshadow");
				
			tri_legend_data = trivariate_legend(x, y, width, count);
			
			// Select (and create) swatch class.
			// Do this instead of selectAll("path") to avoid binding data to the shadow path
			tri_legend_svg = tri_legend_g.selectAll(".swatch")
					.data(tri_legend_data)
			  	.enter().append("path")
			  		.attr("d", function(d) { return d.shp })
			  		.style("fill", function(d) {
			  			return cmyk(d);
			  		})
			
			var spacing = 10;
			 		
			corner_labels = [
				{
					label: "pop",
					x: x-spacing,
					y: y+width+spacing
				},
				{
					label: "soda",
					x: x+width/2,
					y: y-spacing
				},
				{
					label: "coke",
					x: x+width+spacing,
					y: y+width+spacing
				}
			];

	  		tri_legend_g.selectAll("text")
	  			.data(corner_labels)	
	  		  .enter().append("text")
	  		  	.attr("text-anchor", "middle")
	  			.attr("x", function(d) { return d.x })
	  			.attr("y", function(d) { return d.y })
	  			.attr("font-size", "10px")
			  	.attr("transform", function(d) { return "translate(" + -56 + "," + -50 + ")" }) // why are they shifted?
	  			.text(function(d) { return d.label });
	  		
	  		// Parameters for the univariate legend	
	  		var x = 550,
				y = 452,
				width = 60,
				height = 10,
				count = 20;	
			
			uni_legend_g = svg.append("g")
				.attr("class", "legend");
				
			// Add a drop shadow for the univariate legend	
			uni_legend_g.append("path")
			  	.attr("transform", "translate(" + ( x + width / 2 ) + "," + y + ")")
				.attr("d", rectangle( 1 + height, 2 + width ))
				.attr("class", "landshadow");
			
			uni_legend_data = univariate_legend(x, y, height, width, count);
			
			// Select (and create) swatch class.
			// Do this instead of selectAll("path") to avoid binding data to the shadow path
			uni_legend_svg = uni_legend_g.selectAll(".swatch")
					.data(uni_legend_data)
			  	.enter().append("path")
			  		.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")" })
			  		// Add 1 just to pad the hexagons a bit so they blend
			  		.attr("d", rectangle( 1 + height, 1 + width/count ))
			  		.style("fill", function(d) {
			  			return bwscale(d.PCTOTHER);
			  		});
			  		
			uni_labels = [
				{
					label: "other",
					x: x+width/2,
					y: y+spacing+10
				}
			];
			
	  		uni_legend_label = uni_legend_g.selectAll("text")
	  			.data(uni_labels)	
	  		  .enter().append("text")
	  		  	.attr("text-anchor", "middle")
	  			.attr("x", function(d) { return d.x })
	  			.attr("y", function(d) { return d.y })
	  			.attr("font-size", "10px")
	  			.text(function(d) { return d.label });
	  			
	  		// Parameters for the no data swatch
	  		var x = 490,
	  			y = 452,
	  			width = 20,
	  			height = 9;
	  			
	  		nodata_legend_g = svg.append("g")
				.attr("class", "legend")
				
	  		// Add a drop shadow for the no data swatch
			nodata_legend_g.append("path")
			  	.attr("transform", "translate(" + ( x + width / 2 ) + "," + y + ")")
				.attr("d", rectangle( 1 + height, 2 + width ))
				.attr("class", "landshadow");  		
				
			nodata_legend_data = new Array(
				{
					PCTSODA: 0,
					PCTPOP: 0,
					PCTCOKE: 0,
					PCTOTHER: 0
				}
			);
				
			// Select (and create) swatch class.
			// Do this instead of selectAll("path") to avoid binding data to the shadow path
			nodata_legend_svg = nodata_legend_g.selectAll(".swatch") 
					.data(nodata_legend_data)	
				.enter().append("path")
			  		.attr("transform", "translate(" + ( x + width / 2 ) + "," + y + ")")
					.attr("d", rectangle( 1 + height, 2 + width ))
					.style("fill", function(d) {
						return cmyk(d);
					});
			
			nodata_labels = [
				{
					label: "no data",
					x: x+width/2,
					y: y+spacing+10
				}
			];
			
	  		nodata_legend_g.selectAll("text")
	  			.data(nodata_labels)	
	  		  .enter().append("text")
	  		  	.attr("text-anchor", "middle")
	  			.attr("x", function(d) { return d.x })
	  			.attr("y", function(d) { return d.y })
	  			.attr("font-size", "10px")
	  			.text(function(d) { return d.label });			
	  		
	  		svg.append("g")
	  			.attr("class", "author")
			  .append("text")
	  		  	.attr("text-anchor", "center")
	  		  	.attr("x", 550)
	  		  	.attr("y", 495)
	  			.attr("font-size", "10px")
	  			.attr("font-style", "italic")
	  			.text("CC-BY: Alan McConchie, PopVsSoda.com");
	  				
	  			
	  		// Done creating legend	

			// Load the TopoJSON of states and the tsv of popvssoda data in parallel
			queue()
				.defer(d3.json, "d3/us.json")
				.defer(d3.tsv, "d3/pvscounty_fips.tsv")
				.await(ready);

			function ready(error, us, pvscounty_fips) {

				pvscounty_fips.forEach(function(d) {
					d.PCTPOP = +d.PCTPOP;
					d.PCTSODA = +d.PCTSODA;
					d.PCTCOKE = +d.PCTCOKE;
					d.PCTOTHER = +d.PCTOTHER;
				});

				// Extract just the land from the us TopoJSON (resulting in a GeoJSON)
				// and load that as the datum into a new SVG path. This will be the
				// background shadow. 
				svg.append("path").datum(topojson.object(us, us.objects.land))
					.attr("class", "landshadow")
					.attr("d", path);

				var counties = svg.append("g")
					.attr("class", "counties")
					.selectAll("path")
						.data(topojson.object(us, us.objects.counties).geometries)
					.enter().append("path")
						.attr("d", path)
						.attr("class", "addhover");
			
				// Step through all the TopoJSON objects and add the pvs attributes
				// to the correct one.
				// I'm not sure if the "each" function is the ideal approach, but it works.
				counties.each(function(d, i) {	
					var d = this.__data__;
					for (var j = 0; j < pvscounty_fips.length; j++) {
						var p = pvscounty_fips[j];
						if (d.id == p.id) {
							// Copy the data values into the TopoJSON
							// Must be a more efficient way of doing this.
							d.PCTPOP = p.PCTPOP;
							d.PCTSODA = p.PCTSODA;
							d.PCTCOKE = p.PCTCOKE;
							d.PCTOTHER = p.PCTOTHER;
							d.County_Name = p.County_Name;
							d.ENGTYPE = p.ENGTYPE;
							d.State = p.State;
							d.SUMPOP = p.SUMPOP;
							d.SUMSODA = p.SUMSODA;
							d.SUMCOKE = p.SUMCOKE;
							d.SUMOTHER = p.SUMOTHER;
							if (p.PCTPOP == 0 && p.PCTSODA == 0 && p.PCTCOKE == 0 && p.PCTOTHER == 0) {
								d.NODATA = true
							} else {
								d.NODATA = false
							}
						}
					}
				});
			
				// Start out by filling the counties with the cmyk scheme	
				counties	
					.style("fill", function(d) {
						return cmyk(d);

				}).on("mouseover", function(d, i) {
					d3.select(this).attr("stroke", "gray");

				}).on("mouseout", function(d, i) {
					d3.select(this).attr("stroke", "none");
				});
			
				// Use the "tipsy" plugin for mouseover info boxes
				// http://onehackoranother.com/projects/jquery/tipsy/
				$('path.addhover').tipsy({
					gravity : 'w',
					html : true,
          offset : -100,
					title : function(d, i) {
						var d = this.__data__;
						if (d.NODATA == true) {
							return "<span style=\"align=left\">" + d.County_Name + " " + d.ENGTYPE + ", " + d.State + "<br>" 
								+ "No data</span>";
						} else {
							return "<span style=\"align=left\">" + d.County_Name + " " + d.ENGTYPE + ", " + d.State + "<br>" 
								+ "Pop: " + d.SUMPOP + " (" + Math.round(d.PCTPOP * 100) + "%)<br>" 
								+ "Soda: " + d.SUMSODA + " (" + Math.round(d.PCTSODA * 100) + "%)<br>" 
								+ "Coke: " + d.SUMCOKE + " (" + Math.round(d.PCTCOKE * 100) + "%)<br>" 
								+ "Other: " + d.SUMOTHER + " (" + Math.round(d.PCTOTHER * 100) + "%)</span>";
						}
					}
				});

				// Add the shapes of states on top, just to have outlines.
				svg.append("path").datum(topojson.mesh(us, us.objects.states, function(a, b) {
					return a.id !== b.id;
				})).attr("class", "states").attr("d", path);
		
				dursecs = 500;
					
				// Add functions to each button
				d3.select("#cmykbutton").on("mouseover", function() {
					tri_legend_svg.style("fill", function(d) { return cmyk(d); });
					tri_legend_g.transition().duration(dursecs).attr("opacity", 1);
					uni_legend_svg.style("fill", function(d) { return bwscale(d.PCTOTHER); });
					uni_legend_label.text("other");
					nodata_legend_g.transition().duration(dursecs).attr("opacity", 1);
					counties.style("fill", function(d) { return cmyk(d); });
				});
				d3.select("#cmykpopbutton").on("mouseover", function() {
					tri_legend_g.transition().duration(dursecs).attr("opacity", 0);
					uni_legend_svg.style("fill", function(d) { return cmykpop(d.PCTOTHER); });
					uni_legend_label.text("pop");
					nodata_legend_g.transition().duration(dursecs).attr("opacity", 0);
					counties.style("fill", function(d) { return cmykpop(d.PCTPOP); });
				});
				d3.select("#cmyksodabutton").on("mouseover", function() {
					tri_legend_g.transition().duration(dursecs).attr("opacity", 0);
					uni_legend_svg.style("fill", function(d) { return cmyksoda(d.PCTOTHER); });
					uni_legend_label.text("soda");
					nodata_legend_g.transition().duration(dursecs).attr("opacity", 0);
					counties.style("fill", function(d) { return cmyksoda(d.PCTSODA); });
				});
				d3.select("#cmykcokebutton").on("mouseover", function() {
					tri_legend_g.transition().duration(dursecs).attr("opacity", 0);
					uni_legend_svg.style("fill", function(d) { return cmykcoke(d.PCTOTHER); });
					uni_legend_label.text("coke");
					nodata_legend_g.transition().duration(dursecs).attr("opacity", 0);
					counties.style("fill", function(d) { return cmykcoke(d.PCTCOKE); });
				});
				d3.select("#cmykotherbutton").on("mouseover", function() {
					tri_legend_g.transition().duration(dursecs).attr("opacity", 0);
					uni_legend_svg.style("fill", function(d) { return bwscale(d.PCTOTHER); });
					uni_legend_label.text("other");
					nodata_legend_g.transition().duration(dursecs).attr("opacity", 0);
					counties.style("fill", function(d) { return bwscale(d.PCTOTHER) });
				});
				d3.select("#rgbbutton").on("mouseover", function() {
					tri_legend_svg.style("fill", function(d) { return rgb(d); });
					tri_legend_g.transition().duration(dursecs).attr("opacity", 1);
					uni_legend_svg.style("fill", function(d) { return bwscale(d.PCTOTHER); });
					uni_legend_label.text("other");
					nodata_legend_g.transition().duration(dursecs).attr("opacity", 1);
					counties.style("fill", function(d) { return rgb(d) });
				});
				d3.select("#rgbpopbutton").on("mouseover", function() {
					tri_legend_g.transition().duration(dursecs).attr("opacity", 0);
					uni_legend_svg.style("fill", function(d) { return rgbpop(d.PCTOTHER); });
					uni_legend_label.text("pop");
					nodata_legend_g.transition().duration(dursecs).attr("opacity", 0);
					counties.style("fill", function(d) { return rgbpop(d.PCTPOP); });
				});
				d3.select("#rgbsodabutton").on("mouseover", function() {
					tri_legend_g.transition().duration(dursecs).attr("opacity", 0);
					uni_legend_svg.style("fill", function(d) { return rgbsoda(d.PCTOTHER); });
					uni_legend_label.text("soda");
					nodata_legend_g.transition().duration(dursecs).attr("opacity", 0);
					counties.style("fill", function(d) { return rgbsoda(d.PCTSODA); });
				});
				d3.select("#rgbcokebutton").on("mouseover", function() {
					tri_legend_g.transition().duration(dursecs).attr("opacity", 0);
					uni_legend_svg.style("fill", function(d) { return rgbcoke(d.PCTOTHER); });
					uni_legend_label.text("coke");
					nodata_legend_g.transition().duration(dursecs).attr("opacity", 0);
					counties.style("fill", function(d) { return rgbcoke(d.PCTCOKE); });
				});
				d3.select("#rgbotherbutton").on("mouseover", function() {
					tri_legend_g.transition().duration(dursecs).attr("opacity", 0);
					uni_legend_svg.style("fill", function(d) { return bwscale(d.PCTOTHER); });
					uni_legend_label.text("other");
					nodata_legend_g.transition().duration(dursecs).attr("opacity", 0);
					counties.style("fill", function(d) { return bwscale(d.PCTOTHER) });
				});
				d3.select("#bwpopbutton").on("mouseover", function() {
					tri_legend_g.transition().duration(dursecs).attr("opacity", 0);
					uni_legend_svg.style("fill", function(d) { return bwscale(d.PCTOTHER); });
					uni_legend_label.text("pop");
					nodata_legend_g.transition().duration(dursecs).attr("opacity", 0);
					counties.style("fill", function(d) { return bwscale(d.PCTPOP) });
				});
				d3.select("#bwsodabutton").on("mouseover", function() {
					tri_legend_g.transition().duration(dursecs).attr("opacity", 0);
					uni_legend_svg.style("fill", function(d) { return bwscale(d.PCTOTHER); });
					uni_legend_label.text("soda");
					nodata_legend_g.transition().duration(dursecs).attr("opacity", 0);
					counties.style("fill", function(d) { return bwscale(d.PCTSODA) });
				});
				d3.select("#bwcokebutton").on("mouseover", function() {
					tri_legend_g.transition().duration(dursecs).attr("opacity", 0);
					uni_legend_svg.style("fill", function(d) { return bwscale(d.PCTOTHER); });
					uni_legend_label.text("coke");
					nodata_legend_g.transition().duration(dursecs).attr("opacity", 0);
					counties.style("fill", function(d) { return bwscale(d.PCTCOKE) });
				});
				d3.select("#bwotherbutton").on("mouseover", function() {
					tri_legend_g.transition().duration(dursecs).attr("opacity", 0);
					uni_legend_svg.style("fill", function(d) { return bwscale(d.PCTOTHER); });
					uni_legend_label.text("other");
					nodata_legend_g.transition().duration(dursecs).attr("opacity", 0);
					counties.style("fill", function(d) { return bwscale(d.PCTOTHER) });
				});
			}
  </script>
  <script type="text/javascript">
   //var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
			//document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
   //try {
			//	var pageTracker = _gat._getTracker("UA-11836083-1");
			//	pageTracker._trackPageview();
			//} catch(err) {
			//}
  </script>
 </body>
</html>
