<!DOCTYPE html>
<html lang="en">
 <head>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <link href="https://hsivonen.fi/author/" rel="author"/>
  <link href="https://hsivonen.fi/style/general.css" rel="stylesheet" title="Plain" type="text/css"/>
  <link href="icon.png" rel="icon"/>
  <title>
   About Validator.nu
  </title>
 </head>
 <body>
  <h1>
   About Validator.nu
  </h1>
  <p>
   Validator.nu is validation 2.0.
  </p>
  <ul class="toc">
   <li>
    <a href="#pitch">
     The Pitch
    </a>
   </li>
   <li>
    <a href="#no-dtd">
     No DTD-Based Validation
    </a>
   </li>
   <li>
    <a href="#usage">
     Basic Usage
    </a>
   </li>
   <li>
    <a href="#alt-input">
     Alternative Modes of Input
    </a>
   </li>
   <li>
    <a href="#config">
     Configurability
    </a>
   </li>
   <li>
    <a href="#api">
     Web Service API
    </a>
   </li>
   <li>
    <a href="#presets">
     Preset Schemas
    </a>
   </li>
   <li>
    <a href="#checkers">
     Non-Schema Checkers
    </a>
   </li>
   <li>
    <a href="#faq">
     FAQ
    </a>
   </li>
   <li>
    <a href="#ideas">
     Known Issues and Ideas for Future Development
    </a>
   </li>
   <li>
    <a href="#reporting-bugs">
     Reporting Bugs and Getting Help
    </a>
   </li>
   <li>
    <a href="#details">
     Feature Details for Custom Schemas
    </a>
   </li>
   <li>
    <a href="#src">
     Source Code
    </a>
   </li>
   <li>
    <a href="#ack">
     Acknowledgments
    </a>
   </li>
   <li>
    <a href="#links">
     Links to Other Validators
    </a>
   </li>
   <li>
    <a href="#tos">
     Terms of service
    </a>
   </li>
   <li>
    <a href="#privacy">
     Privacy
    </a>
   </li>
  </ul>
  <h2 id="pitch">
   The Pitch
  </h2>
  <ul>
   <li>
    <p>
     <a href="https://html5.validator.nu/">
      (X)HTML5 validation
     </a>
     .
    </p>
   </li>
   <li>
    <p>
     <a href="https://validator.nu/">
      RELAX NG validation
     </a>
     —XML syntax and Compact Syntax
    </p>
   </li>
   <li>
    <p>
     Schematron
     <em>
      1.5
     </em>
     validation (standalone schemas
	only—ISO Schematron or Schematron embedded in RELAX NG are
     <em>
      not
     </em>
     supported)
    </p>
   </li>
   <li>
    <p>
     NVDL-driven validation.
    </p>
   </li>
   <li>
    <p>
     XML 1.0 and
     <a href="https://about.validator.nu/htmlparser/">
      HTML5 parsing
     </a>
     .
    </p>
   </li>
   <li>
    <p>
     <a href="#details">
      Bring your own schemas
     </a>
     or
     <a href="#presets">
      use easy presets
     </a>
     .
    </p>
   </li>
   <li>
    <p>
     <a href="#api">
      RESTful Web service API
     </a>
    </p>
   </li>
  </ul>
  <h2 id="no-dtd">
   No DTD-Based Validation
  </h2>
  <ul>
   <li>
    <p>
     Validator.nu does not check for XML 1.0 validity constraints.
	That is, DTD validation is not performed.
    </p>
   </li>
   <li>
    <p>
     Validator.nu does not perform the duties of a “validating
	SGML parser” as defined in ISO 8879. In fact, this service does
     <em>
      not have any SGML functionality at all
     </em>
     . In particular, the
	HTML 4.01 support uses the HTML5 parser with some additional error
	conditions.
    </p>
   </li>
  </ul>
  <h2 id="usage">
   Basic Usage
  </h2>
  <p>
   Validator.nu has two facets:
   <a href="https://validator.nu/">
    generic
   </a>
   (complex UI) and
   <a href="https://html5.validator.nu/">
    (X)HTML5
   </a>
   (simple UI).
  </p>
  <p>
   Enter the URL (
   <code>
    http
   </code>
   ,
   <code>
    https
   </code>
   or
   <code>
    data
   </code>
   IRI to be
exact) of the document you want to validate in the field labeled
“Document” and submit the form. That’s all it takes in most
cases.
  </p>
  <p>
   In the
   <a href="https://html5.validator.nu/">
    (X)HTML5 facet
   </a>
   , the parser and the schema will be chosen
based on the HTTP
   <code>
    Content-Type
   </code>
   of the document. In the
   <a href="https://validator.nu/">
    generic facet
   </a>
   , the parser will be chosen based on the HTTP
   <code>
    Content-Type
   </code>
   and a preset schema will be chosen based on
the root namespace (for XML) or the doctype (for
   <code>
    text/html
   </code>
   ).
  </p>
  <h2 id="alt-input">
   Alternative Modes of Input
  </h2>
  <p>
   For simplicity, the HTML5 facet only shows UI for validation by URL. Validation by text area 
and by file upload are available in the
   <a href="https://validator.nu/">
    generic facet
   </a>
   .
  </p>
  <p>
   Here are bookmarklets:
  </p>
  <ul>
   <li>
    <a href="javascript:void(location.href='https://html5.validator.nu/?doc='+encodeURIComponent(location.href))">
     Validate URL (generic)
    </a>
   </li>
   <li>
    <a href="javascript:void(location.href='https://html5.validator.nu/?doc='+encodeURIComponent(location.href))">
     Validate URL (HTML5)
    </a>
   </li>
   <li>
    <a href="javascript:(function(){ var str = ''; if (document.innerHTML) str += document.innerHTML; else { if (document.doctype) { str += '&lt;!DOCTYPE '; str += document.doctype.name; if (document.doctype.publicId) { str += ' PUBLIC &quot;' + document.doctype.publicId + '&quot;'; if (document.doctype.systemId) str += ' &quot;' + document.doctype.systemId + '&quot;'; } else if (document.doctype.systemId) { str += ' SYSTEM &quot;' + document.doctype.systemId + '&quot;'; } str += '&gt;\n'; } var dummy = document.createElementNS('http://www.w3.org/1999/xhtml', 'div'); dummy.appendChild(document.documentElement); str += dummy.innerHTML; } var form = document.createElementNS('http://www.w3.org/1999/xhtml', 'form'); form.enctype = 'multipart/form-data'; form.method = 'post'; form.acceptCharset = 'utf-8'; form.action = 'https://validator.nu/'; form.innerHTML = '&lt;input name=&quot;parser&quot;/&gt;&lt;input name=&quot;showsource&quot; value=&quot;yes&quot;/&gt;&lt;textarea name=&quot;content&quot;&gt;&lt;/textarea&gt;'; form.parser.value = document.createElement('div').tagName == 'DIV' ? 'html' : 'xml'; form.content.value = str; if (document.documentElement) document.documentElement.appendChild(form); else document.appendChild(form); form.submit(); })()">
     Validate DOM (generic)
    </a>
    .
   </li>
   <li>
    <a href="javascript:(function(){ var str = ''; if (document.innerHTML) str += document.innerHTML; else { if (document.doctype) { str += '&lt;!DOCTYPE '; str += document.doctype.name; if (document.doctype.publicId) { str += ' PUBLIC &quot;' + document.doctype.publicId + '&quot;'; if (document.doctype.systemId) str += ' &quot;' + document.doctype.systemId + '&quot;'; } else if (document.doctype.systemId) { str += ' SYSTEM &quot;' + document.doctype.systemId + '&quot;'; } str += '&gt;\n'; } var dummy = document.createElementNS('http://www.w3.org/1999/xhtml', 'div'); dummy.appendChild(document.documentElement); str += dummy.innerHTML; } var form = document.createElementNS('http://www.w3.org/1999/xhtml', 'form'); form.enctype = 'multipart/form-data'; form.method = 'post'; form.acceptCharset = 'utf-8'; form.action = 'https://html5.validator.nu/'; form.innerHTML = '&lt;input name=&quot;parser&quot;/&gt;&lt;input name=&quot;showsource&quot; value=&quot;yes&quot;/&gt;&lt;textarea name=&quot;content&quot;&gt;&lt;/textarea&gt;'; form.parser.value = document.createElement('div').tagName == 'DIV' ? 'html' : 'xml'; form.content.value = str; if (document.documentElement) document.documentElement.appendChild(form); else document.appendChild(form); form.submit(); })()">
     Validate DOM (HTML5)
    </a>
    .
   </li>
  </ul>
  <p>
   There is a
   <a href="https://about.validator.nu/html5check.py">
    command-line script
   </a>
   that 
uploads documents from the local filesystem to the (X)HTML5 validator.
   <a href="https://blog.whatwg.org/vim-checker">
    Integration into vim is 
available
   </a>
   .
  </p>
  <h2 id="config">
   Configurability
  </h2>
  <dl>
   <dt>
    Schemas
   </dt>
   <dd>
    <p>
     When the field for schemas is left empty, the validator will try to
	choose a schema on its own. If you are not happy with the guessed
	preset, you can specify a schema either by selecting a preset or by
	entering a space-separated list of schema URLs (
     <code>
      http
     </code>
     ,
     <code>
      https
     </code>
     or
     <code>
      data
     </code>
     IRIs). In addition to actual schemas, you may use 
	certain special URLs to invoke
     <a href="#checkers">
      checkers
	that seem like special schemas but aren’t actually implemented as
	schemas
     </a>
     .
    </p>
   </dd>
   <dt>
    Parser
   </dt>
   <dd>
    <p>
     If the automatic choice of parser does not work for you, you can
	choose the parser manually. The choice of parser affects the HTTP
     <code>
      Accept
     </code>
     request header that is sent.
    </p>
   </dd>
   <dt id="content-type">
    Be lax about HTTP Content-Type
   </dt>
   <dd>
    <p>
     When the lax option is set,
     <code>
      text/html
     </code>
     ,
     <code>
      text/xsl
     </code>
     and
     <code>
      text/plain
     </code>
     are allowed as XML content types and
     <code>
      text/plain
     </code>
     is allowed as an HTML content type and, if
	the URL ends with
     <code>
      .rnc
     </code>
     , as a Compact Syntax content
	type. Also, in the lax mode the US-ASCII default for
     <code>
      text/*
     </code>
     XML types is not enforced.
    </p>
    <p>
     Normally, schemas using the RELAX NG XML syntax, Schematron schemas
	and the XML documents to be validated are expected to be served
	using an XML content type. Schemas using the RELAX NG Compact Syntax
	are expected to be served using
     <code>
      application/relax-ng-compact-syntax
     </code>
     content type. (The unregistered
     <code>
      application/vnd.relax-ng.rnc
     </code>
     content type is also understood.) HTML documents are expected to be
	served as
     <code>
      text/html
     </code>
     .
    </p>
   </dd>
   <dt>
    Show Image Report
   </dt>
   <dd>
    <p>
     When the “Show Image Report” checkbox is set, a report concerning the textual 
	alternatives of
     <code>
      img
     </code>
     elements in the XHTML namespace is shown for accessibility 
	review.
    </p>
   </dd>
   <dt>
    Show Source
   </dt>
   <dd>
    <p>
     You may check the “Show Source” checkbox to show the decoded
	source of the document being checked. Please note that the source
	may not be shown in its entirety if the parser encounters a fatal
	error. Moreover, the show source feature shows the decoded Unicode
	source. Erroneous byte sequences in the original source and
	characters that would render the validator output as non-conforming
	(e.g. U+0000) are not represented faithfully.
    </p>
   </dd>
  </dl>
  <h2 id="api">
   Web Service API
  </h2>
  <p>
   If you want to create you own alternative mode of input or want to
call Validator.nu (or
   <a href="#src">
    your own local copy
   </a>
   ) from
within your own application, there is a RESTful
   <a href="https://wiki.whatwg.org/wiki/Validator.nu_Web_Service_Interface">
    Web
service API
   </a>
   . In addition to the modes of input that work from
HTML forms, you can also
   <a href="https://wiki.whatwg.org/wiki/Validator.nu_POST_Body_Input">
    POST
the document to be checked as an HTTP entity body
   </a>
   . In addition to
the default HTML output, the messages are also available as XHTML,
XML, JSON, GNU error format and plain text.
  </p>
  <h2 id="presets">
   Preset Schemas
  </h2>
  <dl>
   <dt>
    HTML5 (experimental)
   </dt>
   <dd>
    <p>
     HTML5 (
     <code>
      text/html
     </code>
     -compatible content models)
    </p>
   </dd>
   <dt>
    HTML5+ARIA (experimental)
   </dt>
   <dd>
    <p>
     HTML5 with ARIA (
     <a href="https://hsivonen.fi/aria-html5-bis/">
      unendorsed integration prototype
     </a>
     )
    </p>
    <p>
     Mike(tm) Smith has
     <a href="https://w3c.github.io/html-reference/">
      generated documentation for this schema
     </a>
     .
    </p>
   </dd>
   <dt>
    HTML 4.01 Strict + IRI / XHTML 1.0 Strict + IRI
   </dt>
   <dd>
    <p>
     XHTML 1.0 Strict with IRI support. Generally suitable for use HTML 4.01 Strict checking
as well, although there are theoretically wrong corner cases. Uses backported HTML5 datatypes.
    </p>
   </dd>
   <dt>
    HTML 4.01 Transitional + IRI / XHTML 1.0 Transitional + IRI
   </dt>
   <dd>
    <p>
     XHTML 1.0 Transitional with IRI support. Generally suitable for use HTML 4.01 Transitional checking
as well, although there are theoretically wrong corner cases. Uses backported HTML5 datatypes.
    </p>
   </dd>
   <dt>
    HTML 4.01 Frameset + IRI / XHTML 1.0 Frameset + IRI
   </dt>
   <dd>
    <p>
     XHTML 1.0 Frameset with IRI support. Generally suitable for use HTML 4.01 Frameset checking
as well, although there are theoretically wrong corner cases. Uses backported HTML5 datatypes. Do not use. :-)
    </p>
   </dd>
   <dt>
    XHTML5 (experimental)
   </dt>
   <dd>
    <p>
     XHTML5 (XML-compatible content models)
    </p>
   </dd>
   <dt>
    XHTML5+ARIA, SVG 1.1 plus MathML 2.0 (experimental)
   </dt>
   <dd>
    <p>
     XHTML5 with ARIA (
     <a href="https://hsivonen.fi/aria-html5-bis/">
      unendorsed integration prototype
     </a>
     ), SVG 1.1, MathML 2.0 and holes for OpenMath, RDF and Inkscape cruft.
    </p>
   </dd>
   <dt>
    XHTML 1.0 Strict, SVG 1.1, MathML 2.0 + IRI
   </dt>
   <dd>
    <p>
     XHTML 1.0 (
     <em>
      not 1.1
     </em>
     ), SVG 1.1 and MathML 2.0 with IRI support.
    </p>
   </dd>
   <dt>
    XHTML 1.0 Strict, Ruby, SVG 1.1, MathML 2.0 + IRI
   </dt>
   <dd>
    <p>
     XHTML 1.0 (
     <em>
      not 1.1
     </em>
     ), Ruby, SVG 1.1 and MathML 2.0 with IRI support.
    </p>
   </dd>
   <dt>
    XHTML Basic + IRI
   </dt>
   <dd>
    <p>
     A schema for XHTML Basic with IRI support. Suitable for use with the HTML parser.
    </p>
   </dd>
   <dt>
    SVG 1.1 + IRI
   </dt>
   <dd>
    <p>
     SVG 1.1 Full with IRI support (Inkscape cruft not permitted).
    </p>
   </dd>
  </dl>
  <h2 id="checkers">
   Non-Schema Checkers
  </h2>
  <p>
   The service supports a few special pseudo-schema URIs that map to
checkers written in a Turing-complete programming language.
  </p>
  <dl>
   <dt>
    <code>
     http://c.validator.nu/table/
    </code>
   </dt>
   <dd>
    <p>
     Checks (X)HTML table integrity. The current implementation should be
	considered a prototype that has not yet been updated to match the
	latest spec language for HTML5. (See
     <a href="https://hsivonen.fi/table-integrity-checker/">
      more
	detailed discussion
     </a>
     .)
    </p>
   </dd>
   <dt>
    <code>
     http://c.validator.nu/nfc/
    </code>
   </dt>
   <dd>
    <p>
     Checks that constructs in the document tree are in the Unicode
	Normalization Form C and don’t start with a “composing
	character”. Using this pseudo-schema also enables normalization
	checking of source text. (See
     <a href="https://hsivonen.fi/charmod-norm-checking/">
      more
	detailed discussion
     </a>
     .)
    </p>
   </dd>
   <dt>
    <code>
     http://c.validator.nu/text-content/
    </code>
   </dt>
   <dd>
    <p>
     Checks the text content of the (X)HTML5
     <code>
      meter
     </code>
     ,
     <code>
      progress
     </code>
     and
     <code>
      time
     </code>
     elements for conformance. (This is a prototype
	with liberties taken.)
    </p>
   </dd>
   <dt>
    <code>
     http://c.validator.nu/unchecked/
    </code>
   </dt>
   <dd>
    <p>
     Warns about RDF, OpenMath and Inkspace holes and about the use of
     <code>
      version="1.0"
     </code>
     in SVG.
    </p>
   </dd>
   <dt>
    <code>
     http://c.validator.nu/usemap/
    </code>
   </dt>
   <dd>
    <p>
     Checks the
     <code>
      usemap
     </code>
     attribute for referential integrity.
    </p>
   </dd>
   <dt>
    <code>
     http://c.validator.nu/all/
    </code>
   </dt>
   <dd>
    <p>
     Shorthand for
     <code>
      http://c.validator.nu/table/
	http://c.validator.nu/nfc/ http://c.validator.nu/text-content/ http://c.validator.nu/unchecked/ http://c.validator.nu/usemap/
     </code>
     .
    </p>
   </dd>
   <dt>
    <code>
     http://c.validator.nu/all-html4/
    </code>
   </dt>
   <dd>
    <p>
     Shorthand for
     <code>
      http://c.validator.nu/table/
	http://c.validator.nu/nfc/ http://c.validator.nu/unchecked/ http://c.validator.nu/usemap/
     </code>
     .
    </p>
   </dd>
   <dt>
    <code>
     http://c.validator.nu/debug/
    </code>
   </dt>
   <dd>
    <p>
     Dumps parse events as warnings.
    </p>
   </dd>
  </dl>
  <h2 id="faq">
   FAQ
  </h2>
  <h3>
   My server gives the HTML5 validator a 406 status. What’s up?
  </h3>
  <p>
   Your server cannot properly deal with an
   <code>
    Accept
   </code>
   header that does not have
   <code>
    */*
   </code>
   in it. Chances are that
you are using Apache 1.3, PHP and MultiViews together. MultiViews
thinks the type of your page is
   <code>
    application/x-httpd-php
   </code>
   ,
which isn’t in the
   <code>
    Accept
   </code>
   header. Apache 2 does not
have this problem.
  </p>
  <h3 id="no-badge">
   Can I get a “Valid HTML5” badge?
  </h3>
  <p>
   No, Validator.nu does not give badges.
  </p>
  <p>
   I have observed that once people are given badges they start to
feel entitled to the badges and become hostile if the validation
service is changed so that some documents that previously were
proclaimed valid no longer are. I do not want to deliberately incite
an opposition to bug fixes. I
   <em>
    know
   </em>
   some of the schemas are
not as tight as the corresponding spec prose. If I make them tighter,
consider it a bug fix. Moreover, the HTML 5 spec is still changing,
so the schema will change as well. Finally, I may (and even intend
to) change the namespace associations of preset schemas in the
future.
  </p>
  <p>
   In addition to the problem with changing the validator after
badges have been awarded, badges
   <a href="https://www.cs.tut.fi/~jkorpela/html/validation.html#icon">
    don’t
provide value to the readers
   </a>
   of validated pages. Validation is a
tool for you as a page
   <em>
    author
   </em>
   —not something your
   <em>
    readers
   </em>
   need to verify. However, if you are writing about Web authoring and
want to refer others to Validator.nu, please, by all means feel free
to link to Validator.nu.
  </p>
  <h3>
   Java? Eww. Why didn’t you write it in Python or Ruby?
  </h3>
  <p>
   By the time Ruby on Rails hit everyone’s radar, this project was
already underway. However, Ruby would still have been a bad choice
had I considered it seriously earlier. Ruby lacks a solid Unicode
infrastructure.
   <a href="https://hsivonen.fi/php-utf8/">
    I’ve
already been in a situation
   </a>
   when I had to stop writing app code
and spend time writing the
   <em>
    very basics
   </em>
   Unicode
infrastructure. I don’t want to be in that situation again.
   <a href="http://intertwingly.net/blog/2007/12/25/Two-Steps-Forward">
    Ruby
lacks solid XML infrastructure
   </a>
   as well.
  </p>
  <p>
   I chose Java over Python for three reasons: SAX, Jing and more
experience with Java. Apart from Java feeling like a more secure
choice because I had more experience with it, the choice between Java
and Python also comes down to infrastructure. Having a platform-wide
unified way for plugging together XML tools is extremely important
when what you are doing entails plugging together XML tools
efficiently.
  </p>
  <p>
   Java is in a unique position when it comes to XML tool
infrastructure. Java has a lot of XML-related libraries available and
they pretty much all plug into the same interface. Not only is there
a platform-wide XML API, it also happens to be one of the most
complete and correct of the XML APIs around. From the point of view
of RELAX NG, Java being the language Jing is written in is an
extremely important consideration. Jing is a seriously good piece of
software. Moreover, Java is the native language of the extensibility
interface for RELAX NG datatype libraries.
  </p>
  <p>
   While I’m on a soap box, I should mention that ICU4J is a
seriously good piece of software, too, and having Java’s notion of
Unicode frozen as UTF-16 from to dawn of time until eternity is very
important considering the stability of infrastructure. It is a
horribly bad idea that the meaning of Python programs change (due to
datatypes changing underneath) depending on
   <a href="https://www.python.org/dev/peps/pep-0261/">
    how
the interpreter was compiled
   </a>
   .
   <a href="http://unicode.org/notes/tn12/tn12-1.html">
    Unicode
is optimized for 16-bit units.
   </a>
   The stability of sticking to
UTF-16 in RAM everywhere outweighs the theoretical purity of UTF-32
in RAM. (On disk and network, use UTF-8, of course.)
  </p>
  <p>
   I do want to make the validator functionality available to
applications that are not written in Java, though. This is why
Validator.nu has a
   <a href="#api">
    Web service interface
   </a>
   that can
be used either with the instance running at validator.nu or with a
your private instance running at localhost. I encourage you to write
a wrapper library for the Web service in your favorite programming
language.
  </p>
  <h3>
   What’s wrong with DTDs?
  </h3>
  <p>
   I think DTDs are bad in four ways:
  </p>
  <ol>
   <li>
    <p>
     DTDs pollute the document with schema-specific syntax. Since
	the document itself declares the rules, the question on answered by
	DTD validation is not the question that should be asked. DTD
	validation aswers the question “Does this document conform to the
	rules it declares itself?” The interesting question is “Does
	this document conform to these rules?” when the person who asks
	the question chooses the rules the question is about.
    </p>
   </li>
   <li>
    <p>
     DTDs mix a validation mechanism, an inclusion mechanism and
	an infoset augmentation mechanism. The inclusion mechanism is mainly
	used for character entities, which solve (but only if the DTD is
	processed and processing it is not required!) an input problem by
	burdening the recipient instead of keeping input matters between the
	editing software and the document author.
    </p>
   </li>
   <li>
    <p>
     DTDs aren’t particularly expressive.
    </p>
   </li>
   <li>
    <p>
     DTDs don’t support Namespaces in XML.
    </p>
   </li>
  </ol>
  <p>
   I hope providing an online validation service for RELAX NG removes
the excuse that DTDs are needed for online validators.
  </p>
  <h3>
   Validation has a clear and precise meaning. Can’t you kids read ISO 8879?
  </h3>
  <p>
   “Validation” and “validator” in the name and the user
	interface of the service refer to the ISO/IEC FDIS 19757-2
	definition of “validator” (which performs validation), to the
	Schematron “validation” function (which is performed by a
	validator), and to the HTML 5 definition of “validator”.
  </p>
  <h2 id="ideas">
   Known Issues and Ideas for Future Development
  </h2>
  <p id="issues">
   Schemas for XHTML 1.0 are used for HTML 4.01, because XHTML
		1.0 is supposed to be a reformulation of HTML 4.01 in XML. However,
		there are some subtle spec bugs introduced in the reformulation.
		For this reason, some errors for HTML 4.01 are wrong. For example,
		XHTML 1.0 (in the DTD) forbids the
   <code>
    name
   </code>
   attribute on
		the
   <code>
    form
   </code>
   element, although it is allowed in HTML 4.01.
  </p>
  <p>
   Please refer to the bug tracker for other
   <a href="https://bugzilla.validator.nu/buglist.cgi?bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;bug_severity=blocker&amp;bug_severity=major&amp;bug_severity=normal&amp;bug_severity=minor">
    known issues
   </a>
   and for
   <a href="https://bugzilla.validator.nu/buglist.cgi?bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;bug_severity=enhancement">
    ideas for future development
   </a>
   .
  </p>
  <h2 id="reporting-bugs">
   Reporting Bugs and Getting Help
  </h2>
  <p>
   The preferred forum for discussing issues related to using the
(X)HTML5 validator is the
   <a href="https://lists.whatwg.org/listinfo.cgi/help-whatwg.org">
    WHATWG
Help mailing list
   </a>
   . The preferred forum for discussing issues
related to implementing (X)HTML5 validators in general and this on in
particular is the
   <a href="https://lists.whatwg.org/listinfo.cgi/implementors-whatwg.org">
    WHATWG
Implementors mailing list
   </a>
   . Bugs should be reported to
   <a href="https://bugzilla.validator.nu/">
    Validator.nu Bugzilla
   </a>
   .
  </p>
  <h2 id="details">
   Feature Details for Custom Schemas
  </h2>
  <ul>
   <li>
    <p>
     ID/IDREF/IDREFS checking in RELAX NG is enabled for the
	benefit of those who use their own schemas and expect this feature
	to work. However, the preset schemas do not use RELAX NG
	ID/IDREF/IDREFS features, because the checking isn’t precise
	enough (cannot require that the referent is of a certain type) and
	using these features places really annoying restrictions on the
	schemas.
    </p>
   </li>
   <li>
    <p>
     Comments are not exposed to the validation layer and,
	therefore, cannot be matched in Schematron.
    </p>
   </li>
   <li>
    <p>
     The document is validated independently (but concurrently)
	against each schema. The Schematron validators do not see IDness
	assignments from the RELAX NG validators.
    </p>
   </li>
   <li>
    <p>
     Embedded Schematron is not supported.
    </p>
   </li>
   <li>
    <p>
     <code>
      xml:id
     </code>
     processing is performed. Also, the
	attribute
     <code>
      id
     </code>
     in no namespace is given IDness unless the
	host element is a CML element. This means that both
     <code>
      xml:id
     </code>
     and (X)HTML
     <code>
      id
     </code>
     are matched by the XPath
     <code>
      id()
     </code>
     function. SVG 1.2 IDness rules are not honored.
    </p>
   </li>
   <li>
    <p>
     The following datatype libraries are supported:
    </p>
    <ul>
     <li>
      <p>
       The
       <a href="http://relaxng.org/compatibility-20011203.html">
        RELAX
		NG DTD Compatibility
       </a>
       library
		(
       <code>
        http://relaxng.org/ns/compatibility/datatypes/1.0
       </code>
       )
      </p>
     </li>
     <li>
      <p>
       The
       <a href="http://relaxng.org/xsd-20010907.html">
        W3C XML
		Schema Datatypes
       </a>
       library
		(
       <code>
        http://www.w3.org/2001/XMLSchema-datatypes
       </code>
       )
      </p>
     </li>
     <li>
      <p>
       <a href="https://hsivonen.fi/html5-datatypes/">
        RELAX NG
		Datatype Library for HTML5 Datatypes
       </a>
       (
       <code>
        http://whattf.org/datatype-draft
       </code>
       )
       <em>
        This is not a
		stable library, so you should not rely on it at this time.
       </em>
      </p>
     </li>
    </ul>
   </li>
   <li>
    <p>
     The HTML parser emits
	parse events as if it was parsing an equivalent XHTML flavor
	document. Therefore, the schemas should assume lowercase element
	names in the XHTML namespace and attributes in no namespace (except
	the
     <code>
      lang
     </code>
     attribute maps to
     <code>
      xml:lang
     </code>
     ).
    </p>
   </li>
   <li>
    <p>
     The HTML 4.01 parsing
	mode does not use
	an SGML parser. Instead, the HTML5 parser is used in an HTML 4.01
	compatibility mode. The names of boolean attributes are repeated as
	values for compatibility with XHTML 1.0 schemas. (This does not
	happen in the HTML5 mode.)
    </p>
   </li>
  </ul>
  <h2 id="src">
   Source Code
  </h2>
  <p>
   The code is hosted on GitHub. Please see the the
   <a href="https://validator.github.io/validator/#build-instructions">
    build instructions
   </a>
   .
  </p>
  <h2 id="ack">
   Acknowledgments
  </h2>
  <p>
   I would like to thank the Mozilla Foundation and the Mozilla
Corporation for funding this project.
  </p>
  <p>
   I would like to thank James Clark for writing Jing and for
championing RELAX NG and XML. I would also like to thank everyone who
tested the development builds, the writers of test cases and everyone
who has developed library code and schemas that the service uses.
  </p>
  <p>
   Mike(tm) Smith has contributed numerous fixes and updates to 
HTML5 validation and is
   <a href="https://github.com/validator/validator/graphs/contributors">
    the most active developer
   </a>
   of the
project as of 2014.
  </p>
  <p>
   Philip Jägenstedt contributed Microdata validation support.
  </p>
  <p>
   The XHTML 1.0 schemas were originally written by James Clark and
have been improved by Petr Nálevka.
  </p>
  <p>
   <a href="http://fantasai.inkedblade.net/">
    fantasai
   </a>
   designed
the (X)HTML5 schema framework, wrote the (X)HTML5 Core schemas and
helped along the way when I added features.
  </p>
  <p>
   JavaScript bits, the favicon and a lot of bug reports were contributed by Simon Pieters.
  </p>
  <p>
   The schemas for RELAX NG and XSLT were written by James Clark.
  </p>
  <p>
   The principal author of the schema for DocBook is Norman Walsh.
  </p>
  <p>
   The SVG schemas come from the W3C.
  </p>
  <p>
   The MathML schema was written by Yutaka Furubayashi.
  </p>
  <p>
   Test cases written by
   <a href="http://syntax.whattf.org/relaxng/tests/html5core/">
    fantasai
   </a>
   ,
   <a href="https://annevankesteren.nl/">
    Anne van Kesteren
   </a>
   and
   <a href="http://schneegans.de/sv/test-cases/">
    Christoph Schneegans
   </a>
   were very useful in developing this service.
  </p>
  <p>
   This product includes software developed by The Apache Software
Foundation (http://www.apache.org/).
  </p>
  <p>
   This product uses The SAXON XSLT Processor from Michael Kay.
  </p>
  <h2 id="links">
   Links to Other Validators
  </h2>
  <dl>
   <dt>
    <a href="http://www.validome.org/">
     Validome
    </a>
    by The Validome
	Team
   </dt>
   <dd>
    <p>
     Focuses on HTML, XHTML, WML. Uses SGML DTDs and custom code for
	HTML. Uses XSD and custom code for XHTML. Recently added support for
	RSS and Atom, but that feature is still in flux.
    </p>
   </dd>
   <dt>
    <a href="http://schneegans.de/sv/">
     XHTML 1.0 schema validator
    </a>
    by
	Christoph Schneegans
   </dt>
   <dd>
    <p>
     Validates using the XSD implementation of XHTML 1.0.
    </p>
   </dd>
   <dt>
    <a href="http://badame.vse.cz/validator/">
     Relaxed
    </a>
    by Petr
	Nálevka
   </dt>
   <dd>
    <p>
     Uses RELAX NG and Schematron for validating XHTML and HTML. (The
	XHTML 1.0 schemas offered here as presets are based on the schemas
	used in Relaxed.)
    </p>
   </dd>
   <dt>
    <a href="http://valet.webthing.com/page/">
     Page Valet
    </a>
    by WebThing
	/ Nick Kew
   </dt>
   <dd>
    <p>
     DTD-based SGML and XML validation.
    </p>
   </dd>
   <dt>
    <a href="http://feedvalidator.org/">
     Feed Validator
    </a>
    by Sam Ruby,
	Mark Pilgrim, Joseph Walton, and Phil Ringnalda
   </dt>
   <dd>
    <p>
     Checks Atom and RSS feeds. Uses Python as the schema language. :-)
    </p>
   </dd>
   <dt>
    <a href="http://jigsaw.w3.org/css-validator/">
     The W3C CSS Validation
	Service
    </a>
   </dt>
   <dd>
    <p>
     Checks CSS style sheets.
    </p>
   </dd>
   <dt>
    <a href="http://validator.w3.org/">
     The W3C Markup Validation Service
    </a>
   </dt>
   <dd>
    <p>
     DTD-based SGML and XML validation.
    </p>
   </dd>
  </dl>
  <h2 id="tos">
   Terms of Service
  </h2>
  <p>
   These terms only apply to the service hosted on the
   <code>
    validator.nu
   </code>
   domain. If you arrived at this page from another instance of the software run by someone else, such as the W3C, that instance may have different terms.
  </p>
  <p>
   If you do not accept these terms, do not use the service. You can run your own copy of the software under the applicable Open Source licenses without having to agree to these terms.
  </p>
  <p>
   These terms may be updated from time to time. There are no email notifications of updates in order not to have to collect your email address.
  </p>
  <h3>
   Point of contact
  </h3>
  <p>
   The software instance on
   <code>
    validator.nu
   </code>
   in operated by Henri Sivonen on Gandi's infrastructure. The point of contact in all matters related to the deployment instance on
   <code>
    validator.nu
   </code>
   is
   <a href="mailto:hsivonen@hsivonen.fi">
    Henri Sivonen
   </a>
   . (For matter relating to the validator software itself rather than the specific deployment instance on
   <code>
    validator.nu
   </code>
   , please refer to
   <a href="https://github.com/validator/validator">
    GitHub issues
   </a>
   of the software project.)
  </p>
  <h3>
   No Guarantee of Service Level
  </h3>
  <p>
   There is absolutely no warranty or guarantee of level of service. If you want uptime guarantees, please run your own copy of the software. The service may be discontinued at any time without prior notice.
  </p>
  <h3>
   Appropriate Use
  </h3>
  <p>
   The service at
   <code>
    validator.nu
   </code>
   is meant for validating public Web pages (GET request mode) and for validating drafts of pages that are being prepared to be published on the Web (POST request mode). By design, the service does not ask for passwords to be able to validate pages that are behind login. You must not grant the validator instance at
   <code>
    validator.nu
   </code>
   special access to your site e.g. by IP address. If you wish to validate behind-login or otherwise private pages, please run your own copy of the validator software. Do not upload sensitive data as POST request. (E.g. do not upload real confidential records within your HTML if your a developing an HTML UI that deals with such data.)
  </p>
  <p>
   You must not use the service to validate illegal content or engage in activity that has the appearance of botnet activity.
  </p>
  <p>
   Do not place excessive load on the service. It's fine to use the API from the content management system of your personal blog. If you have a large blog hosting service, please run your own copy of the software. You must not use a browser extension that sends the content of every page you browse to the validator. If you want to see a validity indicator for every page, please run your own copy of the validator software.
  </p>
  <h3 id="privacy">
   Privacy
  </h3>
  <p>
   For HTTP requests, the service is typically configured to log non-personally-identifiable usage information including the virtual server host name accessed, the path accessed, the HTTP method, the response code, the number of bytes transferred, the access time, and the
   <code>
    User-Agent
   </code>
   header your client software sent (i.e. the name and version of your Web browser).
  </p>
  <p>
   In successful normal operation, your IP address is not logged in the clear. An anonymized hash thereof may be logged even during normal operation with a keyd hash function whose key is kept in RAM and discarded from time to time to make general usage statistic analysis possible while making it infeasible to reverse the hash by brute force even for a small search space such as the space of IPv4 addresses.
  </p>
  <p>
  </p>
  <p>
   If the service encounters an error, it may log the error and include your IP address and/or the URL being validated in the logged error event. These logs are deleted from time to time after fixing the errors or ignoring them as unactionable. More general IP address logging may be temporarily turned on to investigate abuse of the service. Afterwards, the IP addresses will be anonymized as described in the above paragraph.
  </p>
  <p>
   The URLs of the pages you validate may be kept for a limited time to understand abuse of the service. (Since anyone can validate anyone else's public Web page and you are only allowed to validate public pages by URL, the URLs are not considered personally identifying of the person asking for the validation.)
  </p>
  <p>
   These logs are meant to be visible to Henri Sivonen only, but there's no technical way for him to prevent Gandi from gaining access to these logs (though they aren't supposed to look). Aggregate usage statistics may be shared publicly. Government requests may be responded to.
  </p>
  <p>
   The content of POST requests may be written to a temporary file. While these are deleted after processing the request, in principle they might leave forensically recoverable data on disk until actually overwritten.
  </p>
  <hr/>
  <div class="footer">
   <p>
    Text last updated: 2018-05-24
   </p>
   <p class="copyrightnotice">
    The following notice applies to this HTML file:
   </p>
   <p>
    Copyright (c) 2005-2007 Henri Sivonen
    <br/>
    Copyright (c) 2007-2014 Mozilla Foundation
    <br/>
    Copyright (c) 2008 Simon Pieters
    <!-- DOM validation bookmarklet -->
   </p>
   <p>
    Permission is hereby granted, free of charge, to any person obtaining a 
copy of this software and associated documentation files (the "Software"), 
to deal in the Software without restriction, including without limitation 
the rights to use, copy, modify, merge, publish, distribute, sublicense, 
and/or sell copies of the Software, and to permit persons to whom the 
Software is furnished to do so, subject to the following conditions:
   </p>
   <p>
    The above copyright notice and this permission notice shall be included in 
all copies or substantial portions of the Software.
   </p>
   <p>
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS IN THE SOFTWARE.
   </p>
  </div>
 </body>
</html>
