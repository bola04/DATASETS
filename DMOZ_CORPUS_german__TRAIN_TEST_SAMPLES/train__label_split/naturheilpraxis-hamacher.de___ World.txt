<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
 <html>
  <head>
   <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
   <meta content="Die Naturheilpraxis Hamacher ist eine Fachpraxis für Akupunktur und Hypnose in Koblenz. Schwerpunkte sind Suchtbehandlung, Raucherentwöhnung, psychosomatische Erkrankungen und psychologische Krebs-Nachsorge." name="description"/>
   <meta content="Homepage Naturheilpraxis T. M. Hamacher in Koblenz,Akupunktur Koblenz,Hypnose Koblenz" name="keywords"/>
   <meta content="Naturheilpraxis-Hamacher.de" name="generator"/>
   <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
   <meta content="2018-08-1T23:2:27+02:00" name="date"/>
   <meta content="LUJVW0TuSy6lC6Gz0T3ysbypvzdd68Zwpn_ZTwAGs7M" name="google-site-verification"/>
   <meta content="all" name="robots"/>
   <meta content="1 day" name="revisit-after"/>
   <title>
    Home  | HEILPRAKTIKER in Koblenz | HYPNOSE | AKUPUNKTUR
   </title>
   <!-- basics.css.php (171102)-->
   <style type="text/css">
    a{
 	color:#084B8A;
 	text-decoration:underline;
 	font-size:14px;
 }
 a:hover{
 	cursor:pointer;
 	color:#EA1C2C;
 }
 a.bold{
 	font-weight:bold;
 }
 h1{
 	font-size:18px;
 }
 h2{
 	font-size:14px;
 }
 input {
 	padding-left:7px;
 	font-size:14px;	
 }
 input.readonly{
 	cursor:default;
 	background-color:#accccc;
 }
 
 textarea {
 	padding-left:7px;
 	padding-right:7px;
 	padding-top:4px;
 }
 ul {
 	position:relative;
 	margin-top:-5px;
 	margin-bottom:-5px;
 }
 .disabled{
 	color:#999;
 }
   </style>
   <!-- inline.css.php -->
   <style type="text/css">
    a.link_button{ /*Umwandlung Link->Schaltfläche*/
 	position:relative;
 	text-decoration:none;
 
 	top:-3px;
 	padding-left:17px;
 	padding-right:17px;
 	padding-top:3px;
 	padding-bottom:2px;
 	background-color:red;	
 	border-color:#636563;
 	border-top: 1px #ffffff solid;
 	border-right: 2px #636563 solid;	
 	border-bottom: 2px #636563 solid;
 	border-left: 1px #ffffff solid;
 	cursor:pointer;
 }
 a.link_button:hover{ /*Umwandlung Link->Schaltfläche*/
 	position:relative;
 	text-decoration:none;
 	top:-3px;
 	padding-left:17px;
 	padding-right:17px;
 	padding-top:3px;
 	padding-bottom:2px;
 	background-color:#d4d0c8;
 	border-top: 1px #ffffff solid;		
 	border-right: 2px #636563 solid;
 	border-bottom: 2px #333333 solid;
 	border-left: 1px #ffffff solid;
 	cursor:pointer;	
 }
 a.textanker{
 	text-decoration:underline;
 	font-weight:bold;
 }
 .inline_readonly {
 	cursor:default;
 	background-color:#cccccb;
 	font-style:italic;
 }
 input.form_button {
 	cursor:pointer;
 	background-color:#ccc;
 	padding: 4px 0px;
 	margin-right:8px;
 	width:120px;
 	color:#084B8A;
 }
 input.form_button:hover{
 	background-color:#fff;
 }
 input.form_button_off {
 	position:relative;
 	top:2px;
 	height:26px;
 	cursor:pointer;
 	color:#084B8A;
 }
 input.inline_input {
 	width:506px;
 }
 input#login_name_input{
 	position:absolute; 
 	left:510px; 
 	top:104px; 
 	text-align:right; 
 	width:250px; 
 	border:0px; 
 	background-color:transparent;
 }
 input#mesg_out{
 	position:absolute;
 	top:83px;
 	left:680px;
 	width:100px;
 	border-width:0px;
 	background-color:transparent;
 }
 input.gender_radio{
 	margin-left:20px;
 	margin-right:15px;
 }
 input#go_home_input{
 	width:140px;
 	cursor:pointer;
 }
 span#head_span{
 	font-size:18px;
 	position:relative;
 	left:-5px;
 }
 span.sitemap_ils2_uebersicht_link{
 	padding-left:30px;
 }
 table#index_table{
 	position:absolute;
 	left:30px;
 	top:30px;
 	vertical-align:top;
 }
 table#all_inline_table
 {
 	width:830px;
 	padding-left:30px;
 }
 td#button_td {
 	padding-top:30px; 
 	text-align:center;
 }
 td#head_td {
 	padding-top:20px;
 	text-align:center;
 	font-size:18px;
 }
 td#inline_td{
 	background-color:#FFFFFF;
 	;
 	background-size: 100%;	
 	border-radius:5px;
 }
 td#inline_bottom_td{
 	height:30px;
 }
 td#inline_safari_td{
 	height:10px;
 }
 td#inline_ausgabe_td {
 	padding-top:30px;
 }
 td.left_td {
 	padding-left:30px;
 	height:30px;
 	width:150px;
 }
 td.right_td{
 	padding-left:5px;
 }
 td.text_td {
 	vertical-align:top;
 	width:750px;
 	padding-top:20px;
 	padding-right:20px;
 	padding-bottom:20px;
 	padding-left:30px;
 }
 textarea.inline_area{
 	width:500px;
 }
   </style>
   <!-- side.css.php -->
   <style type="text/css">
    body{
 /*
 	-moz-user-select: none;
 	-khtml-user-select: none;
 	user-select: none;
 */
 	color:#084B8A;
 	background-color:#EEEEEE;
 	font-size:14px;
 	font-family:Verdana, Arial, Helvetica, sans-serif;	
 }
 
 @media only screen and (max-width: 1200px) {
 	table#engine_table{margin:20px auto;}
 	td#inline_td{width:750px}
 }
 @media only screen and (min-width: 1201px) {
 	table#engine_table{margin:20px 175px;}
 	td#inline_td{width:855px}
 }
 table#engine_table{
 	border-radius:9px;
 	border-bottom-width:3px;
 	border-width:7px;
 	border-style:solid;	
 	border-top-width:7px;
 	border-color:#5788B5;
 	background-color:#5788B5;/*Hintergrund des Subtitles*/
 	box-shadow: 10px 10px 10px #999;
 
 }
 table#engine_inline_table{
 	padding-top:15px;
 	padding-left:10px;
 	border-width:0px;
 	padding-bottom:10px;
 }
 table#navlist_table{
 	position:relative;
 	padding-top:10px;
 	padding-left:4px;
 }
 td#navlist_td{
 	vertical-align:top;
 	border-right-width:7px;
 	border-right-style:solid;
 	border-right-color:#5788B5;
 	width:130px;
 	height:500px;
 }
 h2#side_untertitle{
 	color:#FFFFFF;
 	font-size:14px;
 	font-weight:normal;
 	position:relative;
 	top:-1px;
 	left:0px;
 	cursor:default;
 	margin-top:0px;
 	margin-bottom:0px;
 	letter-spacing:3px;
 }
 td#untertitle_td
 {
 	text-align:center;
 	font-weight:normal;
 }
 td.content_col_td{
 	vertical-align:top;
 }
 td#col_middle_td{
 	width:15px;
 }
 tr#inline_tr
 {
 	background-image:url("");	
 	background-size: 100%;
 	background-repeat: no-repeat;
 }
 td#banner_td
 {
 	background-color:#5788B5;
 	border-radius:8px;
 }
 h1#banner_h1{
 	left:;
 	letter-spacing:;
 	position:relative;
 	font-size:39px;
 	color:#084B8A;
 	margin:0px;
 }
 img#banner_img{
 	position:relative;
 	width:100.2%;
 	height:100px;
 	position:relative;
 	left:-1px;
 	top:-1px;
 	border-radius:10px;
 }
 input#captcha_input{
 	width:80px;
 	text-align:left;
 }
 span#captcha_label{
 	padding-left:7px;
 }
 img#captcha_pic{
 	width:120px;
 	height:80px;
 }
 td#foot_td{
 	padding-left:250px;
 	color:#FFFFFF;"
 }
 a.foot_link{
 	text-decoration:none;
 	font-size:12px;
 	position:relative;
 	top:3px;
 	color:#FFFFFF;
 }
 .foot_strich{
 	position:relative;
 	top:1px;
 }
 a.foot_link:hover{
 	text-decoration:underline;
 }
 td#impressum_td{
 	position:relative;
 	top:3px;
 	cursor:default;
 }
 a.inline{
 	color:#888888;
 	text-decoration:none;
 }
 a.inline:hover{
 	color:#FF3C00;	
 	text-decoration:underline;
 }
 td#inline_left_span{
 	position:relative;
 	top:-15px;
 }
 a.impressum_nav_anker{/*Kontakt + Impressum*/
 	position:relative;
 	top:-1px;
 	left:4px;
 	font-size:11px;
 	text-decoration:none;
 	color:#FFFFFF;
 	margin-top:0px;
 	padding-top:0px;
 	margin-bottom:0px;
 	padding-bottom:0px;
 }
 
 label#impressum_strich{/*Strich zwischen Kontakt und Impressum*/
 	position:relative;
 	top:-1px;
 	left:4px;
 }
 td#impressum_td{
 	height:16px;
 	margin-top:0px;
 	padding-top:0px;
 	margin-bottom:0px;
 	padding-bottom:0px;
 	font-size:12px;
 	color:#FFFFFF;
 }
 a.impressum_nav_anker:hover{
 	text-decoration:underline;
 	color:#FFFFFF;
 }
 table#messagebox_box_table {
 	margin-top:50px;
 	margin-left:50px;	
 	text-align:center; 
 	vertical-align:middle;	
 	width:540px;
 	height:auto;
 	z-index:10;
 }
 td#message_box{
 	padding-left:15px;
 	padding-right:15px;
 	padding-top:20px;
 	padding-bottom:20px;
 	border: 5px double #084B8A;
 	background-color:#FCF9B8;	
 }
 td#message_buttons{
 	padding-top:40px;
 }
 a.printout_link:hover{
 	color:#EA1C2C;
 }
 td#sitemap_ausgabe_text_td{
 	font-size:18px;
 	font-weight:bold;
 	text-align:center;
 	padding-top:50px;
 }
 td#sitemap_ausgabe_td{
 	padding-left:70px;
 	padding-top:30px;
 }
   </style>
   <!-- content.css.php (Gesteuerte CSS-Angaben) 171102-->
   <style type="text/css">
    @media only screen and (max-width: 1200px) {
 	table.content_table{width:715px}
 	td.col_txt_td{width:170px;/*Breite der Spalten bei 2-spaltigem Text*/}	
 	a.content_register_link_2{width:351px}
 	a.content_register_link_2_last{width:351px}
 	a.content_register_link_3{width:232px}
 	a.content_register_link_3_last{width:233px}
 	a.content_register_link_4{width:173px}
 	a.content_register_link_4_last{width:173px}
 	a.content_register_link_5{width:137px}
 	a.content_register_link_5_last{width:139px}
 	a.content_register_link_6{width:114px}
 	a.content_register_link_6_last{width:112px}
 	a.content_register_link_7{width:97px}
 	a.content_register_link_7_last{width:95px}
 	a.content_register_link_8{width:84px}
 	a.content_register_link_8_last{width:84px}
 	
 	a.content_ils1_left_link{width:200px}
 	a.content_ils1_right_link{width:502px}
 	
 	a.content_ils2_left_link{width:101px}
 	a.content_ils2_middle_link{width:298px}
 	a.content_ils2_right_link{width:298px}
 }
 @media only screen and (min-width: 1201px) {
 	table.content_table{width:830px}
 	td.col_txt_td{width:200px;}		
 	a.content_register_link_2{width:407px}
 	a.content_register_link_2_last{width:407px}
 	a.content_register_link_3{width:269px}
 	a.content_register_link_3_last{width:271px}
 	a.content_register_link_4{width:201px}
 	a.content_register_link_4_last{width:201px}
 	a.content_register_link_5{width:160px}
 	a.content_register_link_5_last{width:159px}
 	a.content_register_link_6{width:132px}
 	a.content_register_link_6_last{width:134px}
 	a.content_register_link_7{width:113px}
 	a.content_register_link_7_last{width:111px}
 	a.content_register_link_8{width:98px}
 	a.content_register_link_8_last{width:98px}
 	
 	a.content_ils1_left_link{width:270px}
 	a.content_ils1_right_link{width:544px}
 	
 	a.content_ils2_left_link{width:151px}
 	a.content_ils2_middle_link{width:328px}
 	a.content_ils2_right_link{width:328px}
 }
 table.content_table{
 	border-width:0px;
 	padding: 2% 5% 2% 5%;
 	;	
 }
 td#engine_inline_table_td{
 	padding-top:0px;
 	vertical-align:top;
 	border-bottom-left-radius:8px;
 	border-bottom-right-radius:8px;
 	border-top-right-radius:8px;
 	border:0px solid #084B8A;
 }
 table#single_ausgabe_table{
 	padding: 2% 5% 2% 5%;
 }
 li.content_ils1_uebersicht_link{
 	padding-bottom:10px;
 }
 ul.content_ils1_uebersicht_list{
 	list-style-type:none;
 	padding-top:20px;
 }
 ul.content_list li{
 	padding-top:5px;
 	padding-bottom:10px;
 }
 ul.content_list{
 	padding-top:10px;
 	padding-bottom:10px;
 }
 ul.content_ils1_anfahrt_list{
 	list-style-type:none;
 	padding-left:80px;
 	padding-top:30px;
 	padding-bottom:50px;
 }
 td#content_register_td{
 	vertical-align:bottom;
 	padding-left:0px;
 	margin-left:0px;
 }
 ul#content_register_list{
 	list-style-type:none;
 	z-index:2;
 	text-align:left;
 	border:0px solid red;
 	padding-left:0px;
 	padding-right:0px;
 	position:relative;
 	top:4px;
 	left:0px;	
 }
 li.register_item{
 	float:left;
 	text-align:center;
 }
 li.register_item_last{
 	float:left;
 	text-align:center;
 }
 li.register_item_left{
 	padding-right:3px;
 }
 li.register_item_middle{
 	padding-right:3px;
 }
 li.register_item_right{
 
 }
 a.content_link{
 	text-decoration:none;
 	font-size:10px;
 }
 a.content_link:hover{
 	text-decoration:underline;
 }
 a.content_ils2_uebersicht_link{
 	padding-bottom:10px;
 	letter-spacing:0.5px;
 }
 a.content_register_link {
 	padding-bottom: 3px;
 	padding-top: 3px;	
 	font-size:11px;	
 	color:#084B8A;
 	border: 1px solid #084B8A;
 	border-bottom-style:solid;
 		border-bottom-width: 1px;	
 	outline:0;/*Firefox-Ausblendung der gepunkteten Linie*/
 	display: block;
 	text-decoration: none;
 	border-top-left-radius:8px;
 	border-top-right-radius:8px;
 	;		
 	
 }
 a.content_register_link:hover {
 
 }
 a.content_register_link_aktiv{
 
 	background-color:#FFF999;
 	;	
 }
 a.content_register_link_passiv{
 	border-bottom:1px solid #084B8A;
 	background-color:#EEEEEE;
 }
 a.content_register_link_passiv:hover{
 	background-color:#DDDDDD}
 span#content_strich{
 	font-size:11px;
 }
 h1#content_head_h1{
 	font-size:1.4em;
 	letter-spacing:1.1px;
 	font-weight:bold;
 	cursor:default;
 	padding-top:20px;
 	padding-bottom:5px;
 	text-align:center;
 }
 td.bullet_left_td{
 	width:150px;
 	height:30px;	
 	text-align:right;
 	font-size:16px;
 	font-weight:bold;
 }
 td.bullet_right_td{
 	width:450px;
 	font-size:16px;
 }
 td.content_double_td{
 	width:280px;
 }
 td.content_triple_td{
 	width:170px;
 }
 td#content_bottom_td {
 	text-align:center; 
 	padding-bottom:20px;
 	padding-top:25px;
 }
 td.content_col_td{
 	padding-top:5px;
 	padding-left:3px;
 }
 td.content_head_td {
 	text-align:center; 
 	cursor:default;	
 	padding-bottom:0px;
 }
 td.content_sub_td {
 	padding-top:2%;
 	padding-bottom:2%;
 }
 td.content_text_td{
 	width:100%;
 	vertical-align:top;
 	min-height:300px;
 	display:inline-block;
 	border:0px solid red;
 }
 td#content_single_td{
 	padding-bottom:80px;
 }
 td.content_sub_bottom_td
 {
 	padding-left:5%;
 }
 td#explanation_td{
 	padding-bottom:15px;
 }
 span.contentlink_label
 {
 	font-size:18px;font-weight:bold;}
   </style>
   <style type="text/css">
    table.signup_buttons_table{ /*Tabelle der Script-Schaltflächen*/
 	/*height*/
 						
 		
 		
 	height: 70px; 
 	/*width*/
 			
 				width: 590px; 
 }
 td#signup_buttons_noscript_td {
 	/*padding-top*/
 			
 			
 		
 			padding-top: 0px; 	
 	/*padding-right*/
 							
 					
 				padding-right: 0px; 
 }
 
 table#signup_button_script_table{ /*Tabelle mit allen Input-Feldern*/
 	width:590px;
 }
 
 a.nav_button_anker{
 	width:115px;	
 	display: block;
 	margin-top: 1px;
 	padding-top:6px;
 	padding-bottom:9px;
 	text-align: left;
 	text-decoration: none;
 	border:1px solid #084B8A;
 	border-left:;
 	cursor:pointer;
 	border-radius:9px;
 	border-radius:5px;
 }
 a.nav_button_anker:hover{
 	font-weight:bold;
 	color:#084B8A;	
 	background-image:url(grafik/nav_aktiv.gif);
 	background-size:100% 100%;	
 }
 a.nav_button_aktiv{
 	background-image:url(grafik/nav_aktiv.gif);
 	background-size:100% 100%;
 	font-weight:bold;
 }
 a.nav_button_passiv{
 	background-image:url(grafik/nav.gif);
 	background-size:100% 100%;	
 }
 img.nav_image{
 	position:relative;
 	top:1px;
 	height:11px;
 	width:9px;
 	margin-left:10px;
 	margin-right:2px;
 }
 
 span.nav_label{
 	position:relative;
 	top:1px;
 	left:-2px;
 	font-size:12px;
 }
 tr.nav_li_subbutton{
 	display:none;
 }
 a.nav_li_sub{
 	background-color:white;
 	padding-top:1px;
 	padding-bottom:3px;
 	border-radius:5px;
 }
 span.sub_span{
 	position:relative;
 	left:10px;
 }
   </style>
   <style type="text/css">
    table#glossar_table{
 	position:absolute;
 	z-index:5;
 	background-color:#FCEE7A;	
 	border:2px outset #084B8A;
 	text-align:center;
 	border-radius:10px;
 	box-shadow: 7px -7px 10px #848484;	
 }
 table#image_table{
 	position:absolute;
 	background-color:#FCEE7A;
 	z-index:5;
 	border-radius:8px;
 	border:2px outset #FCEE7A;	box-shadow: 7px -7px 10px #848484;	
 	padding-top:7px;
 	padding-left:10px;
 	padding-right:10px;
 	display:none;
 }
 td#glossar_head{
 	padding-top:10px;
 	color:#EA1C2C;
 	font-size:14px;
 	font-weight:bold;	
 }
 td#glossar_text{
 	text-align:left;
 	padding:10px;
 }
 td#glossar_text .content_absatz{
 	font-size:14px;
 }
 td#glossar_bottom{
 	text-align:center;
 	padding-bottom:10px;
 }
 td#glossar_td{
 	color:#084B8A;
 	padding-top:10px;
 	padding-bottom:0px;
 	padding-left:30px;
 	padding-right:15px;
 }
 td#glossar_headline_td{
 	padding-top:40px;
 	width:650px;
 }
 td#glossar_head_td{
 	padding-top:10px;
 	font-weight:bold;
 }
 td#image_bottom_td{
 	text-align:center;
 	cursor:pointer;
 	height:20px;
 	color:#084B8A;
 	font-size:11px;
 }
 td.image_nav{
 	cursor:pointer;
 	padding:7px 7px;
 	text-align:center;
 	vertical-align:middle	
 }
 a.image_nav_link{
 	font-size:20px;
 	font-weight:bold;
 	text-decoration:none;
 }
 a.image_nav_link:hover{
 	color:red;
 }
 td#image_nav_td{
 	text-align:center;
 	padding-bottom:7px;
 	
 }
 td#image_text_td{
 	cursor:default;
 	font-size:12px;
 	text-align:center;
 	padding-top:10px;
 	padding-bottom:15px;
 }
 td#image_img_td{
 	padding-left:10px;
 	padding-right:10px;
 	text-align:center;
 }
 td.left_right_td{
 	text-align:center;
 	text-decoration:none;
 	cursor:pointer;
 }
 a.left_right_link{
 	text-decoration:none;
 	font-size:11px;
 	font-weight:normal;	
 }
 a#image_nav_link{
 	font-size:10px;
 	font-weight:normal;	
 }
 a#image_nav_link:hover{
 	color:red;
 }
   </style>
   <script>
    function mother_cls()
 {
 
 	this.submit = function submit()
 	{
 		document.getElementsByTagName('form')[0].submit();
 	}
 	
 	this.reloadd = function reloadd()
 	{
 		document.location.reload();
 	}
 
 }
   </script>
   <script>
    /*list.js_cls.php*/
 var listt = new Object();
 	listt.bunch = new Array();
 	listt.aktiv = '';
 	listt.test = false;
 	//listt.test = true;
 
 listt.ctrlBunch = function ctrlBunch(id,bunch_obj,list_id)//Steuerung der Listenbündel
 {
 	var name = "listt.ctrlBunch(id='"+id+"', bunch_obj, list_id='"+list_id+"')";
 	var test = sensorr.protocol();
 	if( this.test == true ) test = true;
 	if( test == true ) sensorr.test('Name',name);
 	
 	for( var i=0; i < this.bunch.length; i++ )
 	{
 		if( this.bunch[i].id == id ) 
 		{
 			if( test == true ) sensorr.test('Case','Bündel vorhanden');
 			if( test == true ) sensorr.test('Neue Liste',list_id);
 			this.bunch[i]['listen'][this.bunch[i]['listen'].length] = list_id;
 			return i;//Fall: Vorhandene Liste
 		}
 	}
 	
 	if( test == true ) sensorr.test('Case','Neues Bündel');
 	this.bunch[i] = new Object();//Fall: Neue Liste
 	this.bunch[i]['obj'] = bunch_obj;
 	this.bunch[i]['listen'] = new Array();//Array mit den Listen-IDs
 	this.bunch[i]['listen'][0] = list_id;
 	if( test == true ) sensorr.test('Neue Liste',this.bunch[i]['listen'][0]);
 	this.bunch[i]['id'] = id;
 	return i;
 }
 
 listt.listeAktiv = function listeAktiv(id,li_aktiv)//Alktiviert ein Listenelement in einem Bündel
 {
 	var name = "listt.listeAktiv(id='"+id+"',li_aktiv='"+li_aktiv+"')";
 	//id: Bündel-ID, li_aktiv: ID des aktiven Listenfeldes	
 	var test = sensorr.protocol();
 	if( this.test == true ) test = true;
 	if( test == true ) sensorr.test('Name',name);
 	
 	if( test == true ) sensorr.test('Anzahl Bündel',this.bunch.length);
 	for( var i=0; i < this.bunch.length; i++ )
 	{
 		if( test == true ) sensorr.test('Durchlauf Nr.',i);
 		if( test == true ) sensorr.test('Bündel-ID',this.bunch[i]['id']);
 		if( this.bunch[i]['id'] == id )
 		{
 			if( test == true ) sensorr.test('Übereinstimmung für Listen ID',id);
 			if( test == true ) sensorr.test('Anzahl Listen', this.bunch[i]['listen'].length);
 			for( var k=0; k < this.bunch[i]['listen'].length; k++ )
 			{
 				if( test == true ) sensorr.test('Durchlauf',k);
 				if( test == true ) sensorr.test('Aktiver Link',li_aktiv);
 				if( objj.create(li_aktiv,name) != null )
 				{
 					this.bunch[i]['obj'][k].setLiAktiv(objj.create(li_aktiv,name));
 				}
 				else
 				{
 					if( test == true ) sensorr.test('Msg','Seite hat kein aktives Listenelement');
 				}
 			}
 		}
 	}
 }
 
 function list_cls(id,modus,type,bunch_id,bunch_obj,settings)
 {//id: objj + ID der Liste | modus: single vs all | type: bunch
 
 	this.test = sensorr.protocol();
 
 	this.__construct = function __construct(id,modus,type,bunch_id,bunch_obj,settings)//Konstruktor wird am Ende aufgerufen (s.u.)
 	{//Aufruf aus der lezten Zeile
 		var name = "list_cls.__construct(id='"+id+"')";
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		else if( test == true ) sensorr.test('Name',name);
 		if( test == true ) sensorr.test('Parameter',"modus='"+modus+"',type='"+type+"',bunch_id='"+bunch_id+"'");
 
 		this.id = this._ini(id,'id',type);//Ini ID
 		this.obj = this._ini(id,'obj',type);// Ini Mutterobjekt
 		if( test == true ) sensorr.test('ID',this.id);
 		this.list = objj.create(this.id,name);//Obj. Liste(ul)
 		if( test == true ) sensorr.test('Liste',this.list);
 		this._li = this.list.getElementsByTagName('li');//Obj. Listenelemente(li)
 		this.sub_li = new Object();//Objekt für die Unterlisten
 		if( test == true ) sensorr.test('Anzahl Listenelemente',this._li.length);
 		
 		if( this._li.length > 0 )
 		{
 			this._class = new Object();
 				this._class['list_ele'] = "li."+this._li[0].className;//Auslesen des Klassennamens		
 		}
 
 		this.eles_aktiv = '';//String der aktiven Listenelemente ( z.B. title_param )
 		
 		if( typeof(modus) == 'undefined' ) modus = 'single';
 		this.modus = modus;//all: Alle Elemente können angezeigt werden | single: nur ein Element wird angezeigt
 		if( test == true ) sensorr.test('Modus',this.modus);
 		this._aktiv = new Object();//Aktive Elemente
 			this._aktiv['klasse'] = '';//Aktive Klasse
 			this._aktiv['li_aktiv'] = null;//Aktives Listenelement
 
 		if( type == 'bunch' )
 		{
 			this._bunch = new Object();
 			if( bunch_obj != null )
 			{
 				this._bunch['index'] = listt.ctrlBunch(bunch_id,bunch_obj,id);//Index des Listenbündels
 				this._bunch['id'] = bunch_id;//ID des Listenbündels
 				this._bunch['li_aktiv'] = null;
 				this._bunch['obj'] = bunch_obj;//ID des Listenbündels
 			}				
 		}
 	
 		this._param = new Array();//Array mit den Parametern
 		this._style = new Object();
 			this._style['color_aktiv'] = 'red';//Voreinstellungen
 			this._style['backgroundColor_aktiv'] = '';//Voreinstellungen
 			this._style['font_weight_aktiv'] = 'normal';//Voreinstellungen
 			if( typeof(settings) == 'object' )
 			{
 				for( index in settings )
 				{
 					this._style[index] = settings[index];
 				} 
 			}
 		
 		this.type = type;
 		if( typeof(this.type) == 'undefined' ) this.type = '';
 		this.setOnClick(this.id);//Änderung der OnClick-Attribute
 		//if( test == true ) sensorr.test('Ende Fkt.');
 
 	}
 
 	this._check = function _check(modus)
 	{
 		if( modus == 'li' )
 		{
 			for( var i=0; i < this._li.length; i++ )
 			{
 				sensorr.test('Li-Element Nr: '+i, this._li[i].id);
 			}
 		}
 	}
 	
 	this._ini = function _ini(id,modus,type)
 	{
 		var name = "list_cls._ini(id='"+id+"',modus='"+modus+"',type='"+type+"')";
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		if( id.match(/./) != null )
 		{
 			ar = id.split(/\./);
 			if( modus == 'obj' ) return ar[0];
 			else if( modus == 'id' )
 			{
 				if( test == true ) sensorr.test('Case','ID');
 				if( test == true ) sensorr.test('Array[1]',ar[1]);
 				return ar[1];
 			}
 		}
 		else
 		{
 			if( modus == 'obj' ) return '';
 			else if( modus == 'id' ) return id;
 		}
 	}
 
 	this.closeSubLi = function closeSubLi(id)
 	{
 		var name = "list_cls.closeSubLi(id='"+id+"')";
 		var test = sensorr.protocol();
 		if( test == true )  sensorr.test('Name',name);
 		
 		if( test == true ) sensorr.test('Anzahl SubListen',this.sub_li[id].length);
 		
 		for( var i=0; i < this.sub_li[id].length; i++ )
 		{
 			if( test == true ) sensorr.test('Durchlauf Nr. '+(i+1),this.sub_li[id][i]);
 			this.closeSubLiRow(id,this.sub_li[id][i]);
 		}
 	}
 
 	this.closeSubLiRow = function closeSubLiRow(id,row)
 	{
 		var name = "list_cls.closeSubLi(id='"+id+"')";
 		var test = sensorr.protocol();
 		if( test == true )  sensorr.test('Name',name);
 
 		cssRule('tr.tr_side_ctrl_leiste_'+id+'_'+row,'display','none');
 		this.setElesMinus(id+'~'+row);	
 	}
 	
 	this.getParamKey = function getParamKey(param)
 	{
 		var name = "list_cls.getParamKey(param='"+param+"')";
 		var test = sensorr.protocol();
 		if( test == true ) sensorr.test('Name',name);
 		if( test == true ) sensorr.test('Param-Liste',this._param.length);
 		var param_out = '';
 		var modus = '';
 
 		for( var i=0; i < this._param.length; i++ )
 		{
 			if( test == true ) sensorr.test('Durchlauf für Param',this._param[i]);
 
 			if( test == true ) sensorr.test('Match',param.match(/~/));
 			if( param.match(/~/) == '~' )
 			{
 				if( test == true ) sensorr.test('Case 1.1.','Zeichen ~ vorhanden => Subliste');
 				param_ar = param.split(/~/);
 				param_out = param_ar[0];
 				modus = 'subli';
 				var subli = param_ar[1];
 			}
 			else
 			{
 				if( test == true ) sensorr.test('Case 1.2.','Normales Listenelement');
 				param_out = param;
 				modus = 'li';
 				
 			}
 			
 			if( this._param[i] == param_out )
 			{
 				if( test == true ) sensorr.test('Case 1.2.1. Übereinstimmung für',param_out);
 				if( modus == 'li' ) 
 				{
 					if( test == true ) sensorr.test('Case 1.2.2.','Listenelement');
 					return i;
 				}
 				else if( modus == 'subli' ) 
 				{
 					if( test == true ) sensorr.test('Case 1.2.3.','Sub-Listenelement');
 					return i+'~'+subli;
 				}
 			}
 		}
 		
 		if( test == true ) sensorr.test('ERROR','Element nicht vorhanden');
 		
 		this.setElesPlus(param);
 		return -1;
 	}
 
 	this.protokollControl = function protokollControl(value,display)
 	{
 		var name = "list_cls.protokollControl(value='"+value+"', display='"+display+"')";
 		
 		var test = sensorr.protocol();
 		if( test == true ) sensorr.test('name',name);
 		
 		//if( display == 'block' ) dpl = 'none';
 		//else dpl = 'block';
 		
 		this.showTable('protokoll_table',value+'_rows',display);
 		this.showRowsByClassName('protokoll_table',value+'_rows');
 	}
 
 	this.protokollOnClick = function protokollOnClick(value)
 	{
 		var name = "list_cls.protokollOnClick(value='"+value+"')";
 		var test = sensorr.protocol(1);
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('name',name);
 
 		obj = objj.create('li_'+value,name);
 		
 		var display = this.showTable('protokoll_table',value+'_rows','block');
 		this.showRowsByClassName('protokoll_table',value+'_rows');
 		
 		var post = "ajax_sql=updateProtocolPanel&css_activ_item="+value+"&css_display="+display;
 
 		ajaxx.startProtocol();
 		if( test == true ) sensorr.test('Modus',sidee.modus);
 		if( sidee.modus == 'editor' )
 		{
 			path = 'editor.ajax.php';
 		}
 		else path = 'engine/ajax/engine.ajax.php';
 
 		if( test == true ) sensorr.test('Pfad',path);
 		
 		ajaxx.send(name,path,post);	
 	}
 
 	this.setElesPlus = function setElesPlus(strg)
 	{
 		var name = "list_cls.setElesPlus(strg='"+strg+"')";
 		var test = sensorr.protocol();
 		if( test == true ) sensorr.test('name',name);
 				
 		//Ersten Unterstrich entfernen
 		slc = strg.slice(0,1);
 		if( slc == '_' )
 		{
 			strg = strg.substring(1,strg.length);
 			//if( test == true ) sensorr.test('strg',strg);
 		}
 		
 		if( test == true ) sensorr.test('strg',strg);
 		
 		this.eles_aktiv = this.eles_aktiv+'_'+strg;		
 
 		this.eles_aktiv = this.eles_aktiv.replace(/___/,'_');
 		this.eles_aktiv = this.eles_aktiv.replace(/__/,'_');
 		
 		if( test == true ) sensorr.test('Strg. der aktiven Elemente',this.eles_aktiv);
 		//objj.create('ctrl_form',name).value = this.eles_aktiv;
 		if( test == true ) sensorr.test('Ende .....',name);
 	}
 
 	this.setElesMinus = function setElesMinus(strg)
 	{
 		var name = "list_cls.setElesMinus(strg='"+strg+"')";
 		var test = sensorr.protocol();
 		if( test == true ) sensorr.test('name',name);
 		
 		if( test == true ) sensorr.test('Eles',this.eles_aktiv);
 		
 		var out = '';
 		
 		eles_ar = this.eles_aktiv.split(/_/);
 		if( test == true ) sensorr.test('Anzahl',eles_ar.length);
 		for( var i=0; i < eles_ar.length;i++ )
 		{
 			if( test == true ) sensorr.test('Durchlauf Nr',i);
 			if( test == true ) sensorr.test('Match',eles_ar[i].match(strg));
 			if( eles_ar[i].match(strg) == null )
 			{
 				out = out+'_'+eles_ar[i];
 			}
 		}
 		
 		out = out.replace(/___/,'_');		
 		out = out.replace(/__/,'_');		
 		if( test == true ) sensorr.test('out',out);
 		
 		this.eles_aktiv = out;
 		
 		//objj.create('ctrl_form',name).value = out;		
 	}
 	
 	this.setLiAktiv = function setLiAktiv(li_aktiv_new_obj)
 	{//subli: Unterliste, durch ~ übergeben
 		
 		var name = "list_cls.setLiAktiv(li_aktiv_new='"+li_aktiv_new_obj+"')";
 		
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		
 		if( test == true ) sensorr.test('Name',name);
 		if( test == true ) sensorr.test('Listen-ID',this.list.id);
 		if( test == true ) sensorr.test('Listenmodus',this.modus);
 		
 		if( li_aktiv_new_obj != null ) 
 		{
 			if( test == true ) sensorr.test('ID neues Objekt',li_aktiv_new_obj.id);
 			
 			if( this.modus != 'all' )
 			{
 				if( test == true ) sensorr.test('Case 1.1.','Single');
 				if( typeof(li_aktiv_new_obj) != 'undefined' )
 				{
 					if( test == true ) sensorr.test('Case 1.1.1.','Neues aktives Element');
 					if( this.type == 'bunch' )
 					{
 						if( test == true ) sensorr.test('Case 1.1.1.1.','Bunch');
 						var li_aktiv_old = listt.bunch[this._bunch['index']]['li_aktiv'];
 					}
 					else 
 					{
 						if( test == true ) sensorr.test('Case 1.1.1.2.','Normale Liste');
 						var li_aktiv_old = this._aktiv['li_aktiv'];
 					}
 					if( li_aktiv_old != null )
 					{
 						if( test == true ) sensorr.test('Case 1.1.1.3. Altes Element',li_aktiv_old.id);
 					}
 					
 					if( test == true ) sensorr.test('Anzahl Listenelemente',this._li.length);
 					for( var i=0; i < this._li.length; i++ )
 					{
 						//if( test == true ) sensorr.test('Listenelement',this._li[i].id);
 						if( test == true ) sensorr.test('Durchlauf ID',this._li[i].id);
 						
 						var break_var = false;
 						var check = false;
 						
 						if( li_aktiv_new_obj.id == this._li[i].id )
 						{
 							check = true;
 							if( test == true ) sensorr.test('Msg',"Aktives Elemtent ID = '"+this._li[i].id+"'");
 							break_var = true;
 							break;
 						}
 					}
 					
 					if( ( break_var == false ) && ( test == true ) )
 					{	
 						sensorr.test('Msg',"Kein aktives Li-Element in Liste ID = '"+this.id+"' vorhanden");
 					}
 					
 					var ready = false;
 					if( check == true )
 					{						
 						if( li_aktiv_old != null )
 						{
 							if( test == true ) sensorr.test('Case','Reset altes Element');
 							li_aktiv_old.style.color = '';
 							li_aktiv_old.style.fontWeight = '';
 							
 							if( li_aktiv_old.id == li_aktiv_new_obj.id ) ready = true;//Abschalten eines Elementes
 						}
 						else if( test == true ) sensorr.test('Case','Kein altes aktives Element vorhanden');
 						
 						if( ready == false )
 						{
 							if( test == true ) sensorr.test('Case',"Set Neues Aktives Element ID='"+li_aktiv_new_obj.id+"'");
 							li_aktiv_new_obj.style.color = this._style['color_aktiv'];
 							li_aktiv_new_obj.style.backgroundColor = this._style['backgroundColor_aktiv'];
 							li_aktiv_new_obj.style.fontWeight = this._style['font_weight_aktiv'];
 							if( this.type == 'bunch' ) listt.bunch[this._bunch['index']]['li_aktiv'] = li_aktiv_new_obj;
 							else this._aktiv['li_aktiv'] = li_aktiv_new_obj;				
 						}
 					}		
 				}		
 			}
 			else//All
 			{
 				if( test == true ) sensorr.test('Case 1.2.','All');
 				if( test == true ) sensorr.test('ID neues Objekt',li_aktiv_new_obj.id);
 				li_aktiv_new_obj.style.color = this._style['color_aktiv'];
 				li_aktiv_new_obj.style.fontWeight = this._style['font_weight_aktiv'];
 			}			
 		}
 		else
 		{
 			sensorr.test('ERROR','Listenelement nicht vorhanden');
 		}
 	}
 
 	this.setLiAktivOnClick = function setLiAktivOnClick(li_aktiv_new_obj)
 	{//Weiterleitungsfunktion zur Zuordnung
 		var name = "list_cls.setLiAktivOnClick(li_aktiv_new_obj='"+li_aktiv_new_obj+"')";
 		
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('name',name);
 
 		this.setLiAktiv(li_aktiv_new_obj);	
 	}
 
 	this.setLiClass = function setLiClass(obj,klasse)
 	{
 		var name = "list_cls.setLiClass(klasse='"+klasse+"')";
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		obj.className = klasse;
 	}
 
 	this.setLiPassiv = function setLiPassiv(obj)
 	{
 		var name = "list_cls.setLiPassiv(obj='"+obj.id+"')";
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		if( test == true ) sensorr.test('Passives Element',this._class['list_ele']);
 		obj.style.color = cssRule(this._class['list_ele'],'color');
 	}
 	
 	this.setLiStyle = function setLiStyle(prop,value)
 	{
 		var name = "list_cls.setLiStyle(prop='"+prop+"',value='"+value+"')";
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		for( var i=0; i < this._li.length; i++ )
 		{
 			this._li[i]['style'][prop] = value;
 		}
 	}
 
 	this.setOnClick = function setOnClick(id)
 	{//onClick-Eigenschaft des Li-Elementes definieren
 		var name = "list_cls.setOnClick(id='"+id+"')";		
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		if( test == true ) sensorr.test('Listenlänge',this._li.length);
 		if( test == true ) sensorr.test('Bunch-Nr',this.bunch_nr);
 		
 		var param = new Array();
 		var onclick = new Array();
 		var clickobj = new Array();
 		
 		for( var i=0; i < this._li.length; i++ )
 		{			
 			if( test == true ) sensorr.test('Listenelement',this._li[i]);
 			if( test == true ) sensorr.test('Listenelement OnClick',this._li[i].getAttribute('onclick'));
 			param[i] = this._li[i].id.replace(this.id+"_li_",'');//Extraktion der Parameter
 			//if( this.test == true ) sensorr.test('Param',this._param[i]);
 			if( this._li[i].getAttribute('onclick') != null ) onclick[i] = this._li[i].getAttribute('onclick');//Auslesen der alten onclick-Fkt.
 			if( test == true ) sensorr.test('onClick['+i+']',onclick[i]);
 			
 			if( objj.check(this.obj) )
 			{
 				//if( test == true ) sensorr.test('Type',this.type);
 				if( this.type == 'bunch' )
 				{
 					if( test == true ) sensorr.test('Case','Bunch');
 					this._li[i].setAttribute('onClick',"listt.listeAktiv('"+this._bunch['id']+"',this.id);"+onclick[i]);
 				}
 				else
 				{
 					if( test == true ) sensorr.test('Case','Normale Liste');
 					clickobj[i] = this.obj+"['"+this.id+"']";
 					if( test == true ) sensorr.test('Klickobjekt',clickobj[i]);
 					this._li[i].setAttribute('onClick',clickobj[i]+".setLiAktivOnClick(this);"+onclick[i]);				
 				}
 			}
 			else
 			{
 				if( test == true ) sensorr.test('Msg','Listenelement ist kein Objekt');
 			}
 		}
 		
 		this._param = param;
 		if( test == true ) sensorr.test('Parameter',this._param);	
 	}
 
 	this.setSubLi = function setSubLi()
 	{//onClick-Eigenschaft des Li-Elementes definieren
 		var name = "list_cls.setSubLi(ID='"+arguments[0]+"')";
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('name',name);
 		
 		if( test == true ) sensorr.test('arguments[0]',arguments[0]);
 		this.sub_li[arguments[0]] = new Array();
 		
 		for( var i=1; i < arguments.length; i++ )
 		{
 			this.sub_li[arguments[0]][i-1] = arguments[i];
 		}
 		
 		if( test == true ) sensorr.test('Anzahl Sub-Listen',this.sub_li[arguments[0]].length);
 
 	}
 	
 	this.setRowsStyle = function setRowsStyle(prop,value)
 	{
 		var name = "list_cls.setRowsStyle(prop='"+prop+"',value='"+value+"')";
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('name',name);
 		
 		var klasse = new Array();
 		
 		for( var i=0; i < this._li.length; i++ )
 		{
 			klasse[i] = 'tr.tr_'+this.list.id+'_'+this._param[i];
 			//if( this.test == true ) sensorr.test('Reset für Klasse',klasse[i]);
 			cssRule(klasse[i],prop,value);
 		}
 	}
 
 	this.showSubLiRow = function showSubLiRow(id,strg)
 	{
 		var name = "list_cls.showSubLiRow(id='"+id+"',strg='"+strg+"')";
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('name',name);
 		
 		if( test == true ) sensorr.test('Listen-ID',this.id);	
 		var klasse = 'tr.tr_'+this.id+'_'+id+'_'+strg;
 		if( test == true ) sensorr.test('Klasse',klasse);
 		cssRule(klasse,'display','table-row');
 		
 		this.setElesPlus(id+'~'+strg);
 	}
 
 	this.showRows = function showRows(param,li_obj)
 	{
 		//modus: all => Anzeige aller aktiven Elemente | single => nur das aktive Element wird angezeigt
 		//li_obj: Liste, wenn das Element in die Buttonliste aufgenommen wird.
 		var name = "list_cls.showRows(param='"+param+"',li_obj)";
 		var test = sensorr.protocol();
 		if( test == true ) sensorr.test('name',name);	
 		//sensorr.test('Param showRows',param);		
 
 		//test = true;
 		if( this.test == true ) test = true;
 
 		var list_ctrl = '';
 
 		if( test == true ) sensorr.test('Aktive Elemente vorher',this.eles_aktiv);
 		if( test == true ) sensorr.test('Match',this.eles_aktiv.match(param));	
 
 		if( this.modus == 'single' )
 		{
 			if( test == true ) sensorr.test('Case 1.1.','Single');
 			list_ctrl = true;
 			this.setElesPlus(param);
 		}
 		else if( this.modus == 'all' )
 		{
 			if( test == true ) sensorr.test('Case 1.2.','All');
 			
 			if( test == true ) sensorr.test('Eles vor Match',this.eles_aktiv);
 			if( test == true ) sensorr.test('Param vor Match',param);
 			
 			if( ( this.eles_aktiv != '' ) && ( this.eles_aktiv.match(param) != null ) )
 			{
 				if( test == true ) sensorr.test('Case 1.2.1.','Zweitclick');
 				cssRule('tr.tr_'+this.id+'_'+param,'display','none');
 				this.setElesMinus(param);
 
 				if( typeof(li_obj) != 'undefined' )
 				{
 					this.setLiPassiv(li_obj);
 				}				
 			}
 			else
 			{									
 				if( test == true ) sensorr.test('Case 1.2.2.','Reload');
 				if( test == true ) sensorr.test('Parameter',param);
 									
 				this.setElesPlus(param);
 								
 				var ele_ar = param.split(/_/);
 				var nr = new Array();
 				var modus_ar = new Array();
 				var ar = new Array();
 				if( test == true ) sensorr.test('Anzahl Elemente',ele_ar.length);
 				for( var i=0; i < ele_ar.length; i++ )
 				{					
 					if( test == true ) sensorr.test('Durchlauf für Element:',ele_ar[i]);
 					if( ele_ar[i] != '' )
 					{
 						if( test == true ) sensorr.test('Durchlauf für Element',ele_ar[i]);
 					
 						if( ele_ar[i].match(/~/) == '~' )//Extraktion der Sublisten
 						{								
 							if( test == true ) sensorr.test('Case 1.2.2.1.','Subliste ausgeben');
 							ar[i] = ele_ar[i].split(/~/);
 							ele_ar[i] = ar[i][0];
 							this.showSubLiRow(ar[i][0],ar[i][1]);						
 							modus_ar[i] = 'subLi';
 							
 						}
 						else 
 						{
 							if( test == true ) sensorr.test('Case 1.2.2.2.','Modus = Listenelement');
 							modus_ar[i] = 'Li';
 						}
 					
 						//ele_ar_split.length = 0;//Reset	
 							
 						cssRule('tr.tr_'+this.id+'_'+ele_ar[i],'display','table-row');//Anzeige der Reihe
 					
 						if( modus_ar[i] == 'Li' )
 						{
 							if( test == true ) sensorr.test('Case 1.2.2.3.','Parameter für Li');
 							if( test == true ) sensorr.test('Anzahl Parameter',this._param.length);
 							if( this._param.length > 0 )
 							{
 								if( test == true ) sensorr.test('Case 1.2.2.3.2','Key für Listenelement holen');
 
 								nr[i] = this.getParamKey(ele_ar[i]);
 								
 							}
 							
 							if( nr[i] >= 0 )
 							{
 								if( test == true ) sensorr.test('Case 1.2.2.3.3.','Listenelement aktiv setzen');
 								if( test == true ) sensorr.test('Listenelement Nr.',nr[i]);
 								if( test == true ) sensorr.test('Listenelement',this._li[nr[i]].id);
 								
 								this.setLiAktiv(this._li[nr[i]]);								
 							}							
 						}
 					}
 					else
 					{
 						if( test == true ) sensorr.test('Leerer String bei',i);
 					}
 				}
 			}
 		}
 	
 
 		if( list_ctrl == true )
 		{
 			if( test == true ) sensorr.test('Case 1.3.','CSS-Row');
 			var css_row = 'tr.tr_'+this.id+'_'+param;
 			if( test == true ) sensorr.test('CSS-Row',css_row);
 			cssRule(css_row,'display','table-row');
 			
 			if( this._param.length > 0 ) nr = this.getParamKey(param);
 			if( test == true ) sensorr.test('Link-Nr',nr);
 			if( nr >= 0 )
 			{
 				if( test == true ) sensorr.test('ID Link',this._li[nr].id);
 				this.setLiAktiv(this._li[nr]);			
 			}
 		}
 		
 		if( test == true ) sensorr.test('Aktive Elemente nachher',this.eles_aktiv);		
 		//objj.create('ctrl_form',name).value = this.eles_aktiv;
 	}
 
 	this.showRowsByClassName = function showRowsByClassName(id,klasse,modus)
 	{
 		var name = "list_cls.showRowsByClassName(id='"+id+"',klasse='"+klasse+"',modus='"+modus+"')";				
 		var test = sensorr.protocol();	
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 
 		table = objj.create(id,name);
 		if( typeof(modus) == 'undefined' ) modus = 'table-row';
 		//if( test == true ) sensorr.test('Table',table);
 		rows = table.getElementsByTagName('tr');
 		if( test == true ) sensorr.test('Anzahl Zeilen',rows.length);
 		for( var i=0; i < rows.length; i++ )
 		{
 			if( test == true ) sensorr.test('Durchlauf',rows[i].className);
 			if( rows[i].className == klasse )
 			{
 				if( test == true ) sensorr.test('Case','Aktive Reihe ..............');
 				//if( test == true ) sensorr.test('Match',rows[i].className);
 				if( test == true ) sensorr.test('Modus',modus);
 				//if( test == true ) sensorr.test('Klasse Aktive Reihe',rows[i].className);
 				if( typeof(modus) != 'undefined' ) rows[i].style.display = modus;
 				this._aktiv['klasse'] = klasse;
 			}
 			else if( rows[i].className == 'show_always' )
 			{
 				if( test == true ) sensorr.test('Case','Einblenden');
 				rows[i].style.display = 'table-row';
 			}
 			else
 			{
 				if( test == true ) sensorr.test('Case','Ausblenden');
 				rows[i].style.display = 'none';
 			}
 		}
 	}
 
 	this.showTable = function showTable(id,klasse,modus)
 	{//Spez.Fkt
 		var name = "list_cls.showTable(id='"+id+"', klasse='"+klasse+"', modus='"+modus+"')";
 		var test = sensorr.protocol();
 
 		if( test == true ) sensorr.test('name',name);
 		var out;
 		
 		var obj = objj.create(id,name);
 		var display = csss.value(id,'display');
 		
 		if( test == true ) sensorr.test('Aktueller Display-Wert',display);
 		if( test == true ) sensorr.test('Aktive Klasse',this._aktiv['klasse']);
 		
 		if( display == 'none' )
 		{
 			if( test == true ) sensorr.test('Case','Display auf Block');
 			obj.style.display = modus;
 			out = 'block';
 		}
 		else if( klasse == this._aktiv['klasse'] )//Button zum 2. Mal aktiviert zum Schließen
 		{
 			if( test == true ) sensorr.test('Case','Display auf None');
 			obj.style.display = 'none';
 			out = 'none';
 			if( this.type == 'bunch' ) listt.aktiv = null;
 			else
 			{
 				if( listt.li_aktiv != null )
 				{
 					listt.li_aktiv.style.backgroundColor = '';
 					listt.li_aktiv = null;				
 				}
 			}
 		}
 		else//Neuer Button aktiviert
 		{
 			if( test == true ) sensorr.test('Case','Neuer Block angezeigt');
 			obj.style.display = 'block';
 			out = 'block';			
 		}
 		
 		if( test == true ) sensorr.test('Out',out);
 		return out;
 	}
 
 	this.setUlPassiv = function setUlPassiv()
 	{
 		var name = "list_cls.setUlPassiv()";
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		for( var i=0; i < this._li.length; i++ )
 		{
 			if( test == true ) sensorr.test('Li.ID',this._li[i].id);
 			this._li[i].style.color = '';
 			this._li[i].style.backgroundColor = '';		
 		}
 
 	}
 	
 	this.__construct(id,modus,type,bunch_id,bunch_obj,settings);	
 
 }
   </script>
   <script>
    var menuee = new Object();//Metaobjekt für die Panels
 	menuee.aktiv = null;//Aktives Menü
 	menuee.anzeige = 'off';//Anzeige des 1. Panels ermöglichen
 	menuee.level = 0;
 	menuee.list = new Object();//Liste aller initialisierten Menüs
 
 	menuee.closeMenues = function closeMenues()//Schließen aller Menüs
 	{
 		for( index in menuee.list ) menuee.list[index].style.display = 'none';
 	}
 	
 function menue_cls(id,obj)
 {
 	this.test = false;
 	//this.test = true;
 
 		
 	this.__construct = function __construct(id,obj)
 	{
 		var name = "menue_cls.__construct(id='"+id+"',obj='"+obj+"')";
 		var test = sensorr.protocol();
 		//if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);		
 		
 		this.id = this.__ini(id,'id');//Ini ID
 		this.panel = objj.create(this.id,name);//Das Menüpanel
 		this.source_obj = null;//Object, dessen Kontextmenü aktiviert wurde.
 		this.parent = this.__ini(id,'obj');// Ini Mutterobjekt	
 		this.obj_name = id;
 		this.store_modus = '';//store, wenn der Wert in DB gespeichert werden soll
 		this.basis_obj = null;
 		if( typeof(obj) != 'undefined' ) this.basis_obj = objj.create(obj,name);//Objekt, das mit dem Menue gesteuert wird.
 		//if( ( test == true ) && ( typeof(obj) == 'undefined' ) ) sensorr.test('MSG','Achtung! Es ist kein Basis-Obj. definiert');
 		
 		if( test == true )
 		{
 			if( typeof(this.basis_obj) == 'undefined' ) sensorr.test('Achtung','Es wurde kein Basis-Obj. definiert');	
 		}
 
 		this.correct_flag = false;//Anzeige, ob die Koordinaten gesetzt wurden.
 		this.correct_x = '';//Verschiebung des Menüs
 		this.correct_y = '';//Verschiebung des Menüs
 		
 		menuee.list[this.id] = this.panel;//Eintrag in die Menüliste
 	}
 
 	this.__ini = function __ini(id, modus)
 	{
 		var name = "menue_cls._ini(id='"+id+"',modus='"+modus+"')";
 		var test = sensorr.protocol();
 		//if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		var ret;
 		if( id.match(/./) != null )
 		{
 			ar = id.split(/\./);
 			if( modus == 'obj' ) ret = ar[0];
 			else if( modus == 'id' ) ret = ar[1];
 		}
 		else
 		{
 			if( modus == 'obj' ) ret = '';
 			else if( modus == 'id' ) ret = id;
 		}
 		
 		if( test == true ) sensorr.test('Return',ret);
 		
 		return ret;
 	}
 
 	this.bubble_control = function bubble_control(menue_id,source_id)
 	{
 		var name = "menue_cls.bubble_control(menue_id='"+menue_id+"',source_id='"+source_id+"')";
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		var bubble_reset = false;
 		var body_event = false;//Event auf der Body-Ebene
 		
 		if( test == true ) sensorr.test('Eingangswert menuee.anzeige',menuee.anzeige);
 
 		if( typeof(menuee.bubble) != 'undefined' )
 		{
 			if( test == true ) sensorr.test('Typ menuee.bubble',menuee.bubble);
 		}
 		
 
 		if( source_id != 'bdy' ) 
 		{
 			menuee.bubble = 'on';//Event aus einer höheren Bubble-Ebene
 			menuee.level++;
 		}
 		else
 		{
 			if( test == true ) sensorr.test('Case','Bubble-Steuerung');
 			if( menuee.level > 0 )
 			{
 				if( test == true ) sensorr.test('Case','Bubble-Reset');
 				bubble_reset = true;
 			}
 			else
 			{
 				if( test == true ) sensorr.test('Case','Body-Bubblevent');
 				body_event = true;
 			}
 			
 			menuee.level = 0;
 		}
 
 		if( menuee.level > 0 )//Event höherer Ebene
 		{
 			if( test == true ) sensorr.test('Case 1','Event höherer Ebene');
 			if( menuee.level == 1 ) 
 			{
 				this.closeMenues();
 				menuee.anzeige = 'on';
 			}
 			else
 			{
 				if( test == true ) sensorr.test('Case','Blockade unterer Ebenen');
 				menuee.anzeige = 'off';
 			}
 		}
 		else//Unterste Bubble-Ebene
 		{
 			if( test == true ) sensorr.test('Case 2','Bubble auf unterster Ebene');
 			
 			if( ( test == true ) && ( menuee.aktiv != null ) ) sensorr.test('Aktives Menü',menuee.aktiv.id);
 			if( ( menuee.aktiv == null ) || ( menuee.aktiv.id == menue_id ) )
 			{
 				if( test == true ) sensorr.test('Case 2a','Kontextmenü neu oder erneut');
 				this.closeMenues();
 				menuee.anzeige = 'on';
 			}
 			else if( ( menuee.anzeige == 'on' ) && ( bubble_reset != true ) )//Nur Event auf 1. Ebene
 			{
 				if( test == true ) sensorr.test('Case 2b','Kontextmenü bei offenem Menü');
 				this.closeMenues();
 				menuee.anzeige = 'on';
 			}
 			else if( body_event == true )
 			{
 				if( test == true ) sensorr.test('Case 2c','Kontextevent');
 				this.closeMenues();
 				menuee.anzeige = 'on';
 			}
 			else 
 			{
 				if( test == true ) sensorr.test('Case 2c','Kontextmenü blockiert');
 				menuee.anzeige = 'off';
 			}
 		}
 		if( test == true ) sensorr.test('Ausgang: menuee.anzeige',menuee.anzeige);
 	
 	}
 
 	this.closeMenues = function closeMenues() 
 	{ 
 		var name = "menue_cls.closeMenues() ";
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		//jss.alertt(menuee.list);//Anzeige der Listenobjekte
 		for( index in menuee.list ) menuee.list[index].style.display = 'none';
 		
 		menuee.anzeige = 'off';//Keine Anzeige aktiv
 	}
 
 	this.closePanel = function closePanel() 
 	{ 
 		var name = "menue_cls.closePanel() ";
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		if( this.basis_obj != null )
 		{
 			if( test == true ) sensorr.test('Basis-Obj',this.basis_obj.id);
 			this.basis_obj.style.display = 'none';
 		}
 		
 		this.closeMenues();
 	}
 
 	this.controlPositionMenu = function controlPositionMenu(source)
 	{
 		var name = "menue_cls.controlPositionMenu(source='"+source+"')";
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		var fix = new Array();
 	
 			}
 
 	this.displayMenue = function displayMenue(ev)
 	{
 		var name = "menue_cls._display(ev)";
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		if( test == true ) sensorr.test('Panel-ID',this.panel.id);
 		//for( index in menuee.list ) menuee.list[index].style.display = 'none';
 		//for( index in menuee.list ) alert(menuee.list[index]);
 			
 		this.panel.style.display = 'block';
 		left = (document.all) ? (window.event.clientX + document.body.scrollLeft) : ev.pageX; 
 		top = (document.all) ? (window.event.clientY + document.body.scrollTop) : ev.pageY; 
 		
 		this.panel.style.left = ( left )+'px';	
 		this.panel.style.top = ( top-50 )+'px';	
 		
 		
 		return false;
 	}
 
 	this.displayPanel = function displayPanel(value,id,modus)
 	{
 		var name = "menue_cls.displayPanel(value='"+value+"', id='"+id+"',modus)";
 		var test = sensorr.protocol(1);
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		
 		if( typeof(id) != 'undefined' )
 		{
 			if( test == true ) sensorr.test('Case','Objekt übergeben');
 			objj.create(id,name).style.display = value;
 		}
 		else if( this.source_obj != null )
 		{
 			this.source_obj.style.display = value;
 			id = this.source_obj.id;
 		}
 		else
 		{
 			if( test == true ) sensorr.test('Case','Kein Objekt vorhanden');
 			return;
 		}
 		
 	
 		this.closeMenues();//Panels schließen
 		
 		if( ( this.store_modus == 'store' ) || ( modus == 'store' ) ) 
 		{
 			if( test == true ) sensorr.test('Case','Position speichern');
 			this.storeDisplayPanel(id);//Zustand speichern
 		}
 		else if( test == true ) sensorr.test('Case','Position nicht speichern');
 
 	}
 
 	this.fixPanelPosition = function fixPanelPosition(prop,id)
 	{
 		var name = "menue_cls.fixPanelPosition(prop='"+prop+"',id='"+id+"')";
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		if( test == true ) sensorr.test('ID Basis-Obj',this.source_obj.id);
 		
 		if( typeof(id) == 'undefined' ) id = this.source_obj.id;
 		if( test == true ) sensorr.test('ID',id);
 
 		var strg = id+'|fix~'+prop;
 		
 		objj.create('css_values',name).value = strg;
 		sensorr.test('Fix-Strg',strg);
 		jss.submit('side_form');	
 	}
 
 	this.itemClick = function itemClick(obj,anzeige,modus,x,y)
 	{
 		var name = "menue_cls.itemClick(ID obj='"+obj.id+"', anzeige= '"+anzeige+"', modus= '"+modus+"', x= '"+x+"',y='"+y+"')";
 		
 		sensorr.test('name',name);
 	
 		if( obj.id.toLowerCase() == 'td_submit' )
 		{
 			jss.submit('side_form');	
 		}
 		else if( obj.id.toLowerCase() == 'td_logout' )
 		{
 			enginee.logout();
 		}
 		else this.select(anzeige,modus,x,y);
 	}
 
 	this.select = function select(anzeige,modus,x,y)
 	{
 		var name = "menue_cls.select(anzeige='"+anzeige+"',modus='"+modus+"',x='"+x+"',y='"+y+"')";
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 
 		var script_panel = objj.create('script_panel',name,'null');
 	
 		if( modus == 'fkt' )
 		{
 			sensorr.test('Case','Funktion');
 			if( anzeige == 'Reload' )
 			{
 				window.location.reload();
 			}
 		}
 		else if( modus == 'dropdown' )
 		{
 			if( test == true ) sensorr.test('ID Anzeige',anzeige);
 			if( test == true ) sensorr.test('x',x);
 			if( test == true ) sensorr.test('y',y);
 			var div = objj.create(anzeige,name);
 			var div_display = window.getComputedStyle(div,null).getPropertyValue("display");
 			objj.create('protokoll_table',name).style.display = 'none';
 			if( div_display == 'none' )
 			{
 				div.style.display = 'block';
 				div.style.left = x;
 				div.style.top = y;
 				this.status = 'open';
 			}
 			else
 			{
 				div.style.display = 'none';
 			}
 		}
 		else
 		{
 		
 			var protokoll_table = objj.create("protokoll_table",name);//Sensorleiste
 			
 			var rows = protokoll_table.getElementsByTagName("tr");
 			sensorr.protokoll_aktiv = objj.create(anzeige,name);//onClick-Zelle
 			
 			if( sensorr.protokoll_aktiv.style.display == "block" )
 			{
 				//sensorr.test('Modus','Anzeige deaktiviert für: '+sensorr.protokoll_aktiv.id);
 				
 				sensorr.protokoll_aktiv.style.display = "none";
 				protokoll_table.style.display = "none";
 				img_x.style.display = "none";
 			}	
 			else
 			{
 				for( var i = 0; i < rows.length; i++)
 				{
 					rows[i].style.display = 'none';
 				}	
 				
 				objj.create('protokoll_head_tr',name).style.display = 'table_row';
 				sensorr.protokoll_aktiv.style.display = "table-row";
 				this.status = 'open';
 			}
 			
 			csss.show();
 		
 			//sidee.dragAndDrop();
 		}
 		
 		this.closeMenues();
 		if( test == true ) sensorr.test('Ende',name);
 	}
 
 	this.setXY = function setXY(x,y)
 	{
 		this.correct_x = x;
 		this.correct_y = y;
 		this.correct_flag = true;
 	}
 
 	this.showPanel = function showPanel(ev,menue_id,source_id,modus)//Event,Aufgerufenes Panel, Aufrufendes Objekt
 	{//Bsp. für Param.: (event,'editor_menue','area_text')	
 		var name = "menue_cls.showPanel(ev,menue_id='"+menue_id+"',source_id='"+source_id+"',modus)";
 		var test = sensorr.protocol(1);
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		if( typeof(modus) != 'undefined' ) this.store_modus = modus;//store, wenn der Wert gespeichert werden soll!
 		
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('name',name);
 
 		if( ( typeof(source_id) == 'undefined' ) && ( this.basis_obj != null ) )source_id = this.basis_obj.id;//Event wird vom Body ausgelöst
 		this.source_obj = objj.create(source_id,name);
 		
 		this.bubble_control(menue_id,source_id);//Steuerung von menuee.anzeige
 		
 		if( menuee.anzeige == 'off' )//Blockierung gegen Bubbles
 		{
 			if( test == true ) sensorr.test('Case','Anzeige blockiert');
 			return false;
 		}
 		else if( menuee.anzeige == 'on' )
 		{
 			if( test == true ) sensorr.test('Case','Anzeige des Menüs');
 
 			menuee.aktiv = objj.create(menue_id,name);
 			if( test == true ) sensorr.test('Aktives Menue',menue_id);
 	
 			this.panel_x = (document.all) ? window.event.clientX + document.body.scrollLeft : ev.pageX; 
 			this.panel_y = (document.all) ? window.event.clientY + document.body.scrollTop : ev.pageY; 
 	
 			//sensorr.test('this.panel_x',this.panel_x);
 			//sensorr.test('this.panel_y',this.panel_y);
 			var x_limit; var x_oben; var x_unten; var y_limit; var y_oben; var y_unten;
 			if( this.aktiv_id == 'editor_menue' )
 			{
 				x_limit=850; x_oben=-150; x_unten=10; y_limit=150; y_oben=50; y_unten=100;
 			}
 			else
 			{
 				x_limit=880; x_oben=-150; x_unten=10; y_limit=150; y_oben=0; y_unten=70;
 			}
 	
 			var x_correct = ( this.correct_flag == true )
 								? this.correct_x
 								: ( this.panel_x > x_limit ) ?  x_correc = x_oben : x_correct = x_unten;
 			var y_correct = ( this.correct_flag == true )
 								? this.correct_y
 								: ( this.panel_y < y_limit ) ?  y_correct = y_oben : y_correct = y_unten;
 			
 			menuee.aktiv.style.left = (this.panel_x + x_correct)+'px'; 
 			menuee.aktiv.style.top = (this.panel_y - y_correct)+'px';
 			menuee.aktiv.style.display = "block"; 
 			
 			return false;
 		}
 	}
 
 	this.storeDisplayPanel = function storeDisplayPanel(id)
 	{
 		var name = "menue_cls.storeDisplayPanel(id='"+id+"')";
 		var test = sensorr.protocol(1);
 		if( test == true ) sensorr.test('Name',name);
 		
 		var obj_aktiv = objj.create(id,name);
 	
 		var mode = (document.all)
 			?	obj_aktiv.currentStyle['display']
 			:	window.getComputedStyle(obj_aktiv,null).getPropertyValue("display");
 		var strg = obj_aktiv.id+'|display~'+mode;
 		if( test == true ) sensorr.test('strg',strg);
 		
 		var url='';
 		var post = '';
 		if( test == true ) sensorr.test('sidee.modus',sidee.modus);
 
 		if( ( sidee.modus == 'editor' ) || ( sidee.modus == 'editor_google' ) )
 		{
 			if( test == true ) sensorr.test('Modus','Editor');
 			url = sidee.path_root+"editor/editor.ajax.php";
 			post = "ajax_sql=css_update&side_thema="+sidee.thema+"&css_values="+strg;	
 		}
 		else if( ( sidee.modus == 'engine' ) && ( sidee.locus == 'local' ) )
 		{
 			if( test == true ) sensorr.test('Modus','Engine-Local');
 			url = sidee.domain_dir+"../../engine/ajax/engine.ajax.php";
 			if( test == true ) sensorr.test('URL',url);
 			post = "ajax_sql=css_update&css_values="+strg;
 		}
 		else if( ( sidee.modus == 'engine' ) && ( sidee.locus == 'web' ) )
 		{
 			if( test == true ) sensorr.test('Modus','Engine-Web');
 			url = sidee.domain_dir+"config/ajax.start.php";
 			post = "ajax_sql=css_update&css_values="+strg;
 		}	
 		else if( sidee.modus == 'timer' )
 		{
 			if( test == true ) sensorr.test('Modus','Timer');
 			
 			url = ajaxx.url;
 			post = "ajax_sql=css_update&css_values="+strg;
 		}
 		if( test == true ) sensorr.test('URL',url);
 		if( test == true ) sensorr.test('post',post);
 	
 		ajaxx.startProtocol();
 		ajaxx.send(name,url,post,"ajaxx.confirm(resp)");	
 	}
 
 	this.storePanelPosition = function storePanelPosition(id)
 	{
 		var name = "menue_cls.storePanelPosition(id='"+id+"')";
 		var test = sensorr.protocol();
 		//if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		if( typeof(id) != 'undefined' ) obj = objj.create(id,name);
 		else if( this.basis_obj != null ) obj = this.basis_obj;
 		
 		if( obj == null )
 		{
 			if( test == true ) sensorr.test('Case','Kein Objekt vorhanden');
 			return;
 		}
 
 		var left = (document.all)
 			?	obj.currentStyle['left']
 			:	window.getComputedStyle(obj,null).getPropertyValue('left');	
 	
 		var top = (document.all)
 			?	obj.currentStyle['top']
 			:	window.getComputedStyle(obj,null).getPropertyValue('top');				
 	
 		var post = "ajax_sql=css_update&side_thema="+sidee.thema+"&css_values="+id+"|top~"+top+"|left~"+left;
 		if( test == true ) sensorr.test('sidee.modus',sidee.modus);
 		
 		var ajax_path;
 	
 		if( sidee.modus == 'editor' )
 		{
 			if( test == true ) sensorr.test('Nachricht','Case 1');
 			ajax_path = "editor.ajax.php";
 		}	
 		else if( ( sidee.modus == 'engine' ) && ( sidee.locus == 'local' ) )
 		{
 			if( test == true ) sensorr.test('Nachricht','Case 2');
 			sensorr.test('ACHTUNG','Ajax-Pfad Local');
 			ajax_path = "../../engine/ajax/engine.ajax.php";
 		}
 		else if( ( sidee.modus == 'engine' ) && ( sidee.locus == 'web' ) )
 		{
 			if( test == true ) sensorr.test('Nachricht','Case 3');
 			ajax_path = "config/ajax.start.php";
 			sensorr.test('ACHTUNG','Ajax-Pfad Web');
 		}	
 		else if( sidee.modus == 'timer' )
 		{
 			if( test == true ) sensorr.test('Nachricht','Case 4');
 			ajax_path = ajaxx.url;
 		}
 		
 		ajax_path = sidee.path_level+ajax_path;
 		
 		if( test == true ) sensorr.test('Ajax-Pfad',ajax_path);
 		
 		if( test == true ) sensorr.test('Obj.-Name',this.obj_name);
 		
 		ajaxx.startProtocol();
 		
 		ajaxx.send(name,ajax_path,post,this.obj_name+".storePanelPositionReturn(resp,'silent')");
 	}
 
 	this.storePanelPositionReturn = function storePanelPositionReturn(resp)
 	{
 		var name = "menue_cls.storePanelPositionReturn(resp)";
 		var test = sensorr.protocol();
 		//if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		var flag = xmll.insert(resp,'confirm');//Thomas-Fkt.
 		//sensorr.test('flag',flag);
 		//sensorr.test('Typeof flag',typeof(flag));
 		var text = xmll.insert(resp,'text');
 
 		var mesg_out = objj.create('mesg_out',name);
 		if( mesg_out != null )
 		{
 			if( test == true ) mesg_out.value = text;
 		}	
 	}
 
 	this.submit = function submit(resp)
 	{
 		var name = "menue_cls.submit()";
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		jss.submit('side_form');
 	}
 
 	this.switchOff = function switchOff()
 	{
 		var name = "menue_cls.switchOff()";
 		var test = sensorr.protocol();
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		var script_panel = objj.create('script_panel',name);
 		var protokoll_table = objj.create('protokoll_table',name);
 		var img_x = objj.create('img_x',name);
 		protokoll_table.style.display = 'none';
 		img_x.style.display = 'none';
 		script_panel.style.display = sensorr.script_panel_display;
 	}
 	
 	this.__construct(id,obj);
 
 }
   </script>
   <script>
    function select_cls(id)
 {
 	this.test = false;
 	//this.test = true;
 	
 	this.__construct = function __construct(id)
 	{//Aufruf aus der lezten Zeile
 		var name = "select_cls.__construct(id='"+id+"')";
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		this.slct = objj.create(id,name);
 	}
 
 	this.insertOptionsWithJson = function insertOptionsWithJson(rubrik,resp)
 	{
 		var name = "select_cls.insertOptionsWithJson(rubrik='"+rubrik+"',resp)";
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name)
 		
 		if( test == true ) sensorr.test('JSON',resp);
 		
 		json = eval(resp);//json: Umgewandelter JSON-String
 		
 		var opt = new Array();
 		if( test == true ) sensorr.test('Json',json);
 		
 		if( test == true ) sensorr.test('Step','Optionen einbauen');
 		for( var k=0; k < json.length; k++ )//Array der Objekte
 		{
 			for( var assoc in json[k] )//Optionen mit der richtigen Rubrik einbauen
 			{
 				if( test == true ) sensorr.test('Assoc',assoc);
 				if( assoc == rubrik )
 				{
 					opt[k] = new Option(json[k][assoc]);
 					this.slct.options[k] = opt[k];				
 				}
 			}
 		}
 		
 		if( test == true ) sensorr.test('Step','Option aktivieren');
 		var aktiv_index = 0;
 		var aktiv_id = '';
 		for( var k=0; k < json.length; k++ )//Array der Objekte
 		{
 			for( var assoc in json[k] )//Optionen mit der richtigen Rubrik einbauen
 			{
 				if( test == true ) sensorr.test('Assoc',assoc);
 				if( test == true ) sensorr.test('Match',assoc.match(/aktiv/));
 				if( assoc.match(/aktiv/) == 'aktiv' )
 				{
 					if( test == true ) sensorr.test('Aktives Element',assoc);
 					if( assoc.replace(/_aktiv/,'') == rubrik ) this.selected(json[k][assoc]);
 					if( test == true ) sensorr.test('Index der aktiven Rubrik',aktiv_index);
 					if( assoc.replace(/_aktiv/,'') == 'id' )
 					{
 						aktiv_id = json[k][assoc];
 					}
 				}
 			}
 		}
 		
 		if( test == true ) sensorr.test('Aktive ID',aktiv_id);
 		return aktiv_id;
 	}
 
 	this.length = function length()
 	{
 		var name = "select_cls.length()";
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		return this.slct.length;
 	}
 
 	this.options = function options(i)
 	{
 		return this.slct.options[i];
 	}
 
 	this.removeOptions = function removeOptions()
 	{
 		var name = "select_cls.removeOptions()";
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		this.slct.length = 0;
 	}
 	
 	this.selected = function selected(value)
 	{
 		var name = "select_cls.selected(value='"+value+"')";
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		
 		formm.selectSetOption(this.slct,value);
 	}
 
 	this.setStyle = function setStyle(prop,val)
 	{
 		var name = "select_cls.setStyle(prop='"+prop+"')";
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		if( test == true ) sensorr.test('Name',name);
 		this.slct.style[prop] = val;
 	}
 	
 	this.value = function value()
 	{
 		var name = "select_cls.value()";
 		var test = false;
 		test = true;
 		if( this.test == true ) test = true;
 		
 		return this.slct.options[this.slct.selectedIndex].value;
 	}
 	
 	this.__construct(id);	
 }
   </script>
   <script type="text/javascript">
    function table_cls(id,anzahl,parent)
 {
 	this.table;
 	this.tbdy;	
 	this.id;	
 	this.anzahl;//Anzahl der Spalten
 	this._cell = new Object();
 		this._cell['attrib'] = new Object();//Basisobjekt für ein mehrdimensionales Attributen-Objekt
 		this._cell['class'] = new Object();
 		this._cell['style'] = new Object();	
 	this.head_style = new Object();
 	this._row = new Object();
 		this._row['attrib'] = new Object();//Objekt mit den Attributen	
 		this._row['class'] = '';
 		this._row['style'] = new Object();
 	this.rows = new Array();//Array mit allen Zeilen
 	this.test = false;
 	//this.test = true;
 
 	this.__construct = function __construct(id,anzahl,parent)
 	{//Aufruf aus der lezten Zeile
 		var name = "table_cls(id='"+id+"',anzahl='"+anzahl+"')";
 		//sensorr.test('Konstruktor',name);
 		var test = false;
 		//test = true;
 		
 		obj = objj.create(id,name);
 		
 		if( obj == null )//Case: Neue Tabelle
 		{
 			this.createTable(id,anzahl,parent);
 		}		
 		else//Case: Vorhandene Tabelle
 		{
 			this.table = obj;
 			this.tbdy = this.table.getElementsByTagName('tbody')[0];
 			this.anzahl = anzahl;
 		} 
 	}
 
 	this.createAttrib = domm.createAttrib;
 
 	this.createFoot = function createFoot(id)
 	{
 		var name = "table_cls.createFoot(id='"+id+"')";
 		sensorr.test('name',name);
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		
 		var foot = document.createElement('tr');
 		var td = document.createElement('td');
 		td.setAttribute("colspan",this.anzahl);
 		var lk = document.createElement('a');
 		lk.setAttribute('href',"javascript:domm.removeChildFromBody('"+id+"')");
 		lk_text = document.createTextNode("Schließen");
 		lk.appendChild(lk_text);
 		td.appendChild(lk);
 		foot.appendChild(td);
 		
 		for( index in this._cell['style'] )
 		{				
 			//if( this.test == true ) sensorr.test('Passed Index',index);
 			for( prop in this._cell['style'][index] )
 			{									
 				//if( this.test == true ) sensorr.test('prop',prop);
 				//if( this.test == true ) sensorr.test('value',this._cell['style'][index][prop]);
 				eval("td.style."+prop+" = '"+this._cell['style'][index][prop]+"';");
 			}
 		}
 		td.style.textAlign = 'center';
 		td.style.paddingTop = '10px';
 		td.style.border = '0px solid white';
 		
 		this.tbdy.appendChild(foot);
 	}
 	
 	this.createHead = function createHead()
 	{
 		var name = "table_cls.createHead()";
 		sensorr.test('name',name);
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		
 		var head = document.createElement('tr');
 			
 		if( arguments[0] == '' )
 		{
 			head.style.textAlign = 'center';
 			head.style.fontWeight = 'bold';			
 		}
 		else
 		{
 			head.className = arguments[0];
 		}
 		
 		for( var i=1; i < this.anzahl*2; i = i + 2)
 		{
 			node = document.createTextNode(arguments[i]);
 			td = document.createElement('td');
 			var sign = '';
 			if( arguments[i+1] != 'auto' ) sign = 'px';
 			td.style.width = arguments[i+1] + sign;
 			for( prop in this.head_style )
 			{
 				eval("td.style."+prop+" = '"+this.head_style[prop]+"';");
 			}
 			//sensorr.test('width',td.style.width);
 			sign = '';
 			td.appendChild(node);
 			head.appendChild(td);
 		}
 		
 		this.tbdy.appendChild(head);
 	}
 	
 	this.createRow = function createRow()
 	{
 		var name = "table_cls.createRow(Anzahl Argumente='"+arguments.length+"')";
 		sensorr.test('name',name);
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		
 		var tr = document.createElement('tr');
 		
 		for( var i=0; i < this._row['attrib'].length; i++ )
 		{
 			tr.setAttributeNode(this._row['attrib'][i]);		
 		}
 
 		if( this._row['class'] != '' )
 		{
 			if( this.test == true ) sensorr.test('Row-Klasse',this._row['class']);
 			tr.className = this._row['class'];
 		}
 		
 		for( prop in this._row['style'] )
 		{
 			//sensorr.test('Durchlauf Nr.',i);
 			tr.style[prop] = this._row['style'][prop];
 		}		
 
 		var node;
 		for( var i=0; i < this.anzahl; i++ )
 		{			
 			//sensorr.test('Spalte Nr. ',i);
 			if( ( arguments[i] != '' ) && ( arguments[i] != null ) )
 			{
 				node = document.createTextNode(arguments[i]);
 			}
 			else
 			{
 				node = document.createTextNode("\xA0");
 			}
 
 			var td = document.createElement('td');
 			td.appendChild(node);
 			node = null;
 			
 
 			if( typeof(this._cell['attrib'][i]) == 'object' )
 			{
 				for( var k=0; k < this._cell['attrib'][i].length; k++ )//Einzelne Attribute durchlaufen
 				{
 					td.setAttributeNode(this._cell['attrib'][i][k]);
 				}		
 			}
 			
 			for( index in this._cell['style'] )
 			{				
 				if( i == ( index - 1) )
 				{
 					if( this.test == true ) sensorr.test('Passed Index',index);
 					for( prop in this._cell['style'][index] )
 					{									
 						if( this.test == true ) sensorr.test('prop',prop);
 						if( this.test == true ) sensorr.test('value',this._cell['style'][index][prop]);
 						td.style[prop] = this._cell['style'][index][prop];
 					}				
 				}
 			}
 			
 			tr.appendChild(td);
 		}
 		
 		this.tbdy.appendChild(tr);	
 		if( this.test == true ) sensorr.test('Ende',name);
 		return tr;
 	}
 
 	this.createTable = function createTable(id,anzahl,parent)
 	{
 		var name = "table_cls.createTable(id='"+id+"',anzahl='"+anzahl+"',parent='"+parent+"')";
 		sensorr.test('name',name);
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		
 		if( typeof(parent) == 'undefined' )
 		{
 			parent = null;
 			if( this.test == true ) sensorr.test('parent-Type',typeof(parent));
 		}
 		
 		if( objj.create(id,name,'null') != null )
 		{
 			domm.removeChildFromBody(id);
 		}		
 		
 		this.table = document.createElement('table');
 		
 		this.table.id = id;//ID Tabelle
 		this.anzahl = anzahl;
 		//sensorr.test('Anzahl Spalten',this.anzahl);
 		this.tbdy = document.createElement('tbody');
 		this.table.appendChild(this.tbdy);
 	
 		var parent_obj = null;
 		if( ( typeof(parent) == 'object' ) && ( parent != null ) )
 		{
 			if( this.test == true ) sensorr.test('Case 1');
 			parent_obj = parent;
 		}		
 		else if( parent != null )
 		{
 			if( this.test == true ) sensorr.test('Case 2');
 			parent_obj = objj.create(parent,name);
 		}
 		else 
 		{
 			if( this.test == true ) sensorr.test('Case 3');
 			parent_obj = document.body;
 			
 		}
 	
 		parent_obj.appendChild(this.table);
 	}
 
 	this.createtitle = function createtitle(text)
 	{
 		var name = "table_cls.createtitle(text='"+text+"')";
 		sensorr.test('name',name);
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		
 		var title = document.createElement('tr');
 		var td = document.createElement('td');
 		td.setAttribute("colspan",this.anzahl);
 		var node = document.createTextNode(text);
 		td.appendChild(node);
 		td.style.textAlign = 'center';
 		td.style.height = '20px';
 		td.style.fontWeight = 'bold';
 		td.style.backgroundColor = 'yellow';
 		title.appendChild(td);
 		
 		sensorr.test('Anzahl Attribute',this._cell['style'].length);
 
 		for( index in this._cell['style'] )
 		{				
 
 			if( this.test == true ) sensorr.test('Passed Index',index);
 			for( prop in this._cell['style'][index] )
 			{									
 				if( this.test == true ) sensorr.test('prop',prop);
 				if( this.test == true ) sensorr.test('value',this._cell['style'][index][prop]);
 				eval("td.style."+prop+" = '"+this._cell['style'][index][prop]+"';");
 			}
 		}
 		
 		this.tbdy.appendChild(title);
 	}
 
 
 
 	this.setCellAllAttrib = function setCellAllAttrib(attrib,value)
 	{
 		var name = "table_cls.setCellAllAttrib(...)";
 		sensorr.test('name',name);
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 
 		var attrib = this.createAttrib(attrib,value);
 		
 		for( var i=0; i < this.anzahl; i++ )
 		{
 			if( typeof(this._cell['attrib'][i]) != 'object' )
 			{
 				this._cell['attrib'][i] = new Object();
 			}
 			
 			this._cell['attrib'][i][this._cell['attrib'][i].length] = attrib;
 		}		
 	}
 	
 	this.setCellClass = function setCellClass(cls)
 	{
 		var name = "table_cls.setCellClass(cls='"+cls+"')";
 		sensorr.test('name',name);	
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		
 		if( arguments.length == 1 )
 		{
 			for( var i=0; i < this.anzahl; i++ )
 			{
 				this._cell['class'][i] = cls;
 			}
 		}
 		else
 		{
 			this._cell['class'][pos] = cls;
 		}
 	}	
 
 	this.setCellSingleAttrib = function setCellSingleAttrib(pos,attrib,value)
 	{
 		var name = "table_cls.setCellSingleAttrib(...)";
 		sensorr.test('name',name);
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 				
 		if( typeof(this._cell['attrib'][pos-1]) != 'object' )
 		{
 			this._cell['attrib'][pos-1] = new Object;
 		}
 		var attrib = this.createAttrib(attrib,value);
 		//jss.alertt('Name',name,'Länge',this._cell['attrib'][pos-1].length);
 		this._cell['attrib'][pos-1][this._cell['attrib'][pos-1].length] = attrib;
 	}
 
 	this.setCellStyle = function setCellStyle()
 	{
 		var name = "setCellStyle(Anzahl Argumente='"+arguments.length+"')";
 		sensorr.test('name',name);
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 
 		if( typeof(arguments[0]) != 'number' )
 		{
 			for( var i=0; i <= this.anzahl; i++ )
 			{
 				if( typeof(this._cell['style'][i]) != 'object' )
 				{
 					this._cell['style'][i] = new Object();
 				}
 				for( var k=0; k < arguments.length; k = k + 2 )
 				{
 					this._cell['style'][i][arguments[k]] = arguments[k+1];
 				}				
 			}
 		}
 		else
 		{
 			for( var i=1; i < arguments.length-1; i = i + 2 )
 			{
 				if( this.test == true ) sensorr.test('Durchlauf Nr. '+i);
 				if( typeof(this._cell['style'][arguments[0]]) != 'object' )
 				{
 					this._cell['style'][arguments[0]] = new Object();
 					if( this.test == true ) sensorr.test('Neues Objekt erzeugt');
 				}
 				this._cell['style'][arguments[0]][arguments[i]] = arguments[i+1];
 			}		
 		}
 	}	
 
 	this.setHeadCellStyle = function setHeadCellStyle()
 	{
 		var name = "table_cls.setHeadCellStyle(Anzahl Argumente = '"+arguments.length+"')";
 		sensorr.test('name',name);
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 	
 		for( var i=0; i < arguments.length; i = i + 2 )
 		{
 			this.head_style[arguments[i]] = arguments[i+1];
 		}
 	}
 
 	this.setRowAttrib = function setRowAttrib(attrib,value)
 	{
 		var attrib = this.createAttrib(attrib,value);
 		this._row['attrib'][this._row['attrib'].length] = attrib;
 	}
 	
 	this.setRowClass = function setRowClass(cls)
 	{
 		var name = "table_cls.setRowClass(cls='"+cls+"')";
 		sensorr.test('name',name);
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		
 		this._row['class'] = cls;
 		sensorr.test('Row-Klasse',this._row['class']);
 	}
 
 	this.setRowStyle = function setRowStyle()
 	{
 		var name = "table_cls.setRowStyle(Anzahl Argumente='"+arguments.length+"')";
 		sensorr.test('name',name);
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		
 		for( var i=0; i < arguments.length; i = i + 2 )
 		{
 			this._row['style'][arguments[i]] = arguments[i+1];
 		}
 	}	
 
 	this.setTableAttrib = function setTableAttrib(attrib,value)
 	{
 		var name = "table_cls.setTableAttrib(attib='"+attib+"', value='"+value+"')";		
 		sensorr.test('name',name);
 		var test = false;
 		//test = true;
 		if( this.test == true ) test = true;
 		
 		var attrib = this.createAttrib(attrib,value);
 		this.setAttributeNode(attrib);
 	}
 	
 	this.setTableClass = function setTableClass(cls)
 	{
 		var name = "table_cls.setTableClass(cls='"+cls+"')";
 		sensorr.test('name',name);
 
 		this.className = cls;
 	}
 
 	this.setTableStyle = function setTableStyle()
 	{
 		var name = "table_cls.setTableStyle(Anzahl Argumente='"+arguments.length+"')";
 		sensorr.test('name',name);
 
 		for( var i=0; i < arguments.length; i = i + 2 )
 		{
 			eval("this.table.style."+arguments[i]+" = '"+arguments[i+1]+"';");
 		}
 	}
 	
 	this.__construct(id,anzahl,parent);
 }
   </script>
   <script>
    list_cls.prototype = new mother_cls;
 	menue_cls.prototype = new mother_cls;
 	select_cls.prototype = new mother_cls;
 	table_cls.prototype = new mother_cls;
   </script>
   <script type="text/javascript">
    var sensorr = new Object();
 	sensorr.css_block = true;
 	sensorr.css_clear;//Reset Timeout	
 	sensorr.index = 1;
 	sensorr.input_aktiv = null;
 	sensorr.label_aktiv = null;	
 	sensorr.label_click = false;
 	sensorr.msg_blocked;//true, wenn das Msg-Feld geblockt ist (z.B. bei einer Warnung)
 	sensorr.msg_text = '';
 	sensorr.prot_anzeige = false;
 	sensorr.prot_js_node = document.createElement('span');
 	sensorr.protocol_modus = 'continue';//Protokoll wird nach Reload weitergeschreiben (Alt.: 'start')
 	sensorr.protokoll_aktiv = null;
 	sensorr.row_aktiv = null;
 	sensorr.runner = 0;
 	sensorr.script_panel_display = 'none';
 	sensorr.utf = 'ä Ä ü Ü ö Ö';
 	sensorr.test = false;
 	sensorr.test = true;
 
 
 sensorr.changeCss = function changeCss(prop, dir)
 {
 	var name = "sensorr.changeCss(prop='"+prop+"',dir='"+dir+"')";
 	var test = false;
 	//test = true;
 	if( this.test == true ) test = true;
 	if( test == true ) this.test('Name',name);
 
 	var obj = objj.create('',name);
 	//this.test('ID Obj',obj.id);
 	if( dir == 'plus' ){i = 1;} else{ i = -1;}
 	var value = this.getCssProp(obj,prop).replace(/px/,'')*1;
 	//this.test('value',value);
 	if( prop == 'height' )
 	{		
 		if( (value+i) > 0 ){obj.style.height = (value + i) + 'px';}
 	}
 	else if( prop == 'width' )
 	{		
 		if( (value+i) > 0 ){obj.style.width = (value + i) + 'px';}
 	}		
 	else if( prop == 'left' ){obj.style.left = (value + i) + 'px';}
 	else if( prop == 'top' ){obj.style.top = (value + i) + 'px';}
 
 	this.setObj(obj);
 	
 	if( this.css_block == false )
 	{
 		this.css_clear = setTimeout("sensorr.changeCss('"+prop+"','"+dir+"')",700);
 	}
 }
 
 sensorr.getCssProp = function getCssProp(obj,prop)
 {
 	var name = "sensorr.getCssProp()";
 	var test = false;
 	//test = true;
 	if( this.test == true ) test = true;
 	if( test == true ) this.test('Name',name);
 	
 	if( prop == '' )
 	{
 		alert("Bitte CSS-Eigenschaft angeben!");
 	}
 	
 	var value = ( document.all )
 		?	obj.currentStyle[prop]
 		:	window.getComputedStyle(obj,null).getPropertyValue(prop);				
 		
 	//this.test("Hintergrundfarbe Obj. ID='"+obj.id+"'",color);
 	return value;
 }
 
 sensorr.msg = function msg(msg, src, time)
 {
 	var name = "sensorr.msg(msg='"+msg+"', src='"+src+"')";
 	var test = sensorr.protocol(1);
 	if( test == true ) sensorr.test('name',name);
 	
 	if( this.msg_blocked != true )
 	{
 		objj.create('mesg_out',name).value = msg;
 		if( typeof(time) == 'undefined' ) time = 3000;
 		setTimeout("sensorr.msgClear()",time)
 	}
 	else
 	{
 		if( test == true ) sensorr.test('Case','Msg. geblockt');
 	}
 }
 
 sensorr.msgClear = function msgClear()
 {
 	objj.create('mesg_out',name).value = this.msg_text;
 }
 
 sensorr.msg_block = function msg_block(time)
 {
 	var name = "sensorr.msg_block(time='"+time+"')";
 	var test = false;
 	//test = true;
 	if( this.test == true ) test = true;
 	if( test == true ) this.test('Name',name);
 	
 	if( time != 0 )
 	{
 		this.msg_blocked = true;
 		setTimeout("sensorr.msg_block(0)",time);
 	}
 	else 
 	{
 		this.msg_blocked = false;
 	}
 }
 
 sensorr.protocol = function protocol(val)
 {
 	if( val == 1 ) return true;
 }
 
 sensorr.setObj = function setObj(obj)
 {
 	var name = "sensorr.setObj(obj)";
 	var test = false;
 	//test = true;
 	if( this.test == true ) test = true;
 	if( test == true ) this.test('Name',name);
 	
 	sidee_side_obj = obj;//Übergabe an glob. Objektvar.	
 	
 	objj.create('object_id_input',name).value = obj.id;
 
 
 	objj.create('object_class_input',name).value = obj.className;
 	objj.create('object_height_input',name).value = (document.all)
 		? obj.currentStyle["height"]
 		: window.getComputedStyle(obj,null).getPropertyValue("height");
 	objj.create('object_left_input',name).value = (document.all)
 		? obj.currentStyle["left"]
 		: window.getComputedStyle(obj,null).getPropertyValue("left");
 	objj.create('object_top_input',name).value = (document.all)
 		? obj.currentStyle["top"]
 		: window.getComputedStyle(obj,null).getPropertyValue("top");
 	objj.create('object_width_input',name).value = (document.all)
 		? obj.currentStyle["width"]
 		: window.getComputedStyle(obj,null).getPropertyValue("width");
 	var hex = (document.all)
 		? obj.currentStyle["backgroundColor"].replace(/#/,'')
 		: colorr.convertRgbHex(window.getComputedStyle(obj,null).getPropertyValue("background-color"));
 	//this.test('hex',hex);
 	if( hex == '' ){ hex = 'transparent'; }
 	objj.create('object_bg_input',name).value = hex;	
 
 	//this.test('Ende',name);
 }
 
 sensorr.start = function start()
 {
 	var name = "sensorr.start()";
 	var test = false;
 	//test = true;
 	if( this.test == true ) test = true;
 	if( test == true ) this.test('Name',name);
 	
 	var protokoll_display = csss._prop['display']['protokoll_table'];
 
 	if( protokoll_display == 'block' ) csss.show();//Automatische Formatierung des Div.
 	
 	sensorr.visibility();
 	
 	//sidee.dragAndDrop();	
 }
 
 sensorr.test = function test(label,value)
 {	
 	var div = objj.create('script_panel',name,'null');
 
 	if( 
 	   	( typeof(value) != 'undefined' )
 	&&	( label != 'name' )
 	){
 		if( typeof(value) == 'string' )
 		{
 			if( value == '' ) value = 'Leerer String';
 		}
 		if( typeof(value) == 'bool' )
 		{
 				if( value == false ) value = 'false';
 				else if( value == true ) value = 'true';
 		}
 		var new_node = document.createTextNode(this.index+') '+label + ': ' + value);
 	}
 	else
 	{
 		var new_node = document.createElement('span');
 
 		if( label == 'hier' )
 		{
 			var row_node = document.createTextNode(this.index+': -------------- hier ---------------');
 			new_node.appendChild(row_node);
 			
 		}
 		else if( label.toLowerCase() == 'name' )
 		{
 			var out = "- - - ";
 			//this.test(out,value);
 			var row_node = document.createTextNode(this.index+") "+out+" "+value);
 			new_node.appendChild(row_node);			
 			this.runner++;
 		}
 		else
 		{
 			var row_node = document.createTextNode(this.index+') Funktion: ' + label);
 			new_node.appendChild(row_node);
 			new_node.style.fontWeight = 'bold';
 		}		
 	}
 
 	if( div != null )
 	{		
 		var text_span = objj.create('script_text_span',name,'null')
 		
 		if( text_span != null )
 		{
 			var text_first = text_span.firstChild;		
 			
 			if( this.prot_anzeige == false )//Erster Einbau
 			{
 				this.visibility();
 				text_span.insertBefore(document.createElement("br"),text_first);	
 				text_span.insertBefore(new_node,text_first);
 			}
 			else//Normaler Einbau
 			{
 				//alert('Normaler Einbau');
 				text_span.insertBefore(document.createElement("br"),text_first);	
 				text_span.insertBefore(new_node,text_first);
 			}				
 		}
 	}
 	else//Case: Div.-Bereich noch null
 	{
 		js_first = this.prot_js_node.firstChild;
 		this.prot_js_node.insertBefore(document.createElement("br"),js_first);	
 		this.prot_js_node.insertBefore(new_node,js_first);
 		
 		//alert('Eintrag gespeichert');
 	}
 	
 	this.index++;
 }
 
 sensorr.visibility = function visibility()
 {
 	var name = "sensorr.visibility()";
 	var test = false;
 	//test = true;
 	if( this.test == true ) test = true;
 	if( test == true ) this.test('Name',name);
 	
 	if( sidee.test == true )
 	{
 		var div = objj.create('script_panel',name,'null');
 		var text_span = objj.create('script_text_span',name,'null')
 		
 		if( text_span != null )
 		{
 			text_span.appendChild(this.prot_js_node);
 			this.prot_anzeige = true;				
 		}
 	}
 }
   </script>
   <script>
    var csss = new Object();
 	csss._color = new Object();
 		csss._color['button_aktiv'] = '';
 		csss._color['button_over'] = '';
 		csss._color['font'] = '#084B8A';
 		csss._color['kontrast'] = '#EA1C2C';
 		csss._color['nav_hover'] = '#F8EF43';
 		csss._color['nav_passiv'] = '#FCF9B8';		
 		csss._color['reg_passiv'] = '#EEEEEE';
 		csss._color['glossar_bg'] = '#FCEE7A';
 	csss._prop = new Object();
 
 		csss._prop['display'] = new Object();
 			csss._prop['display']['protokoll_table'];
 		csss._prop['left'] = new Object();
 			csss._prop['left']['protokoll_table'];
 		csss._prop['top'] = new Object();
 			csss._prop['top']['protokoll_table'];
 		csss._prop['width'] = new Object();
 			csss._prop['width']['image_std_width'] = '200';
   </script>
   <script type="text/javascript">
    csss.insertCSS = function insertCSS(id,val)//Val: width:300px;height:200px;
 {
 	var name = "csss.insertCSS(id='"+id+"',val='"+val+"')";
 	var test = sensorr.protocol();	
 	if( test == true ) sensorr.test('name',name);
 	
 	var _val = val.split(/;/g);
 	
 	var obj = objj.create(id,name);
 	
 	var _css = Array();
 	for( var i=0; i < _val.length; i++ )
 	{
 		if( test == true ) sensorr.test('Wert',_val[i]);
 		
 
 		
 		//obj.setAttribute("style",_val[i]); 
 		/**/
 		if( _val[i] != '' )
 		{
 			_css[i] = _val[i].split(/:/);
 			if( test == true ) sensorr.test('Prop',_css[i][0]);
 			if( test == true ) sensorr.test('Val',_css[i][1]);
 			
 			obj.style[_css[i][0]] = _css[i][1];
 		}
 		
 	}
 }
 
 csss.changeDisplay = function changeDisplay(id,next)
 {
 	var name = "csss.changeDisplay(id='"+id+"',next='"+next+"')";
 	var test = false;
 	//test = true;
 	if( test == true ) sensorr.test('Name',name);
 	 
 	obj = objj.create(id,name);
 
 	now = this.value(id,'display');
 	
 	if( now == 'none' )
 	{
 		if( test == true ) sensorr.test('Case','Aktivieren');
 		obj.style.display = 'table-row';
 		
 	}
 	else obj.style.display = 'none';
 }
 
 csss.checkColor = function checkColor(strg)
 {
 	var name = "csss.checkColor(strg='"+strg+"')";
 	var test = false;
 	test = true;
 	if( test == true ) sensorr.test('Name',name);
 	if( test == true ) sensorr.test('Länge',strg.length);
 	
 	var reg = new RegExp();
 	var colors = "red|yellow|green|blue|white|black";
 	reg = /[^a-fA-F0-9]/;
 	
 	if( strg.search(colors) > -1 )
 	{
 		if( test == true ) sensorr.test('Case','Übereinstimmung mit Farbe');
 		return true;
 	}
 	else if( strg == 'transparent' )
 	{
 		return true;
 	}
 	else if( !( ( strg.length == 3 ) || ( strg.length == 6 ) ) )
 	{
 		if( test == true ) sensorr.test('ERROR','Error: Farbe hat falsche Länge');
 		return false;
 	}
 	else if( strg.search(reg) > -1 )
 	{
 		if( test == true ) sensorr.test('ERROR','falsche Zeichen');
 		return false;
 	}
 	else return true;
 }
 
 csss.getHeight = function getHeight(id)
 {
 	var obj = objj.create(id,name,'null');
 	var height = obj.offsetHeight;
 	//sensorr.test('height',height);
 	return height;
 }
 csss.getWidth = function getWidth(id)
 {
 	var obj = objj.create(id,name,'null');
 	var width = obj.offsetWidth;
 	//sensorr.test('width',width);
 	return width;
 }
 
 csss.removePx = function removePx(px)//Entfernt die Px. von einer Maßangabe
 {
 	var name = "csss.removePx(px='"+px+"')";
 	var test = sensorr.protocol();	
 	if( test == true ) sensorr.test('name',name);
 	if( test == true ) sensorr.test('Typeof(px)',typeof(px));
 	
 	var new_px;
 	if( ( px != '' ) && ( typeof(px) == 'string' ) ) new_px = px.replace(/px/,'')*1;
 	else new_px = px*1;
 	
 	return new_px;
 }
 
 csss.setAttribs = function setAttribs()
 {
 	var name = "csss.setAttribs()";
 	sensorr.test('name',name);
 	//alert(name);
 	var test = true;
 	if( typeof(arguments[0]) != 'object' )
 	{
 		obj = objj.create(arguments[0]);
 	}
 	else obj = arguments[0];
 	
 	for( var i=1; i < arguments.length; i = i + 2 )
 	{
 		obj.setAttribute(arguments[i],arguments[i+1]);
 	}
 
 }
 
 csss.setProps = function setProps()
 {
 	var name = "csss.setProps()";
 	//sensorr.test('name',name);
 	//alert(name);
 	var test = false;
 	//test = true;
 	
 	if( typeof(arguments[0]) != 'object' )
 	{
 		obj = objj.create(arguments[0],name,'null');
 	}
 	else obj = arguments[0];
 	
 	if( obj != null )
 	{
 		for( var i=1; i < arguments.length; i = i + 2 )
 		{
 			obj.style[arguments[i]] = arguments[i+1];
 		}	
 	}
 }
 
 csss.show = function show()
 {
 	var name = "csss.show()";
 	var test = false;
 	//test = true;
 	if( this.test == true ) test = true;
 	if( test == true ) sensorr.test('Name',name);
 	
 	var protokoll_table = objj.create("protokoll_table",name,'null');
 	var img_x = objj.create("img_x",name,'null');
 	
 	var divs = protokoll_table.getElementsByTagName('div');
 	//sensorr.test('Anzahl',divs.length);
 	for( var i=0; i < divs.length; i++ )
 	{
 		if( divs[i].style.display == 'block' )
 		{
 			//sensorr.test('Aktiver Div',divs[i].id);
 			//jss.alertt('Aktiver Div', divs[i].id);
 			var div_aktiv = divs[i];
 			//sensorr.test('ID div_aktiv',div_aktiv.id);
 			
 			
 			if( div_aktiv.id == 'protokoll_table' )
 			{
 				div_aktiv.style.width = this._prop['width']['protokoll_table'];
 			}
 
 			var hoehe = sensorr.getCssProp(div_aktiv,'height');
 			var breite = sensorr.getCssProp(div_aktiv,'width');
 			//sensorr.test('Höhe',hoehe);
 			//sensorr.test('Breite',breite);
 			//sensorr.test('Modus','Anzeige für Div: '+div_aktiv.id);
 		}
 		else
 		{
 			divs[i].style.display = 'none';
 			//sensorr.test('Modus','Display == NONE');
 		}
 	}
 	
 	if( typeof(hoehe) == 'string' )
 	{
 		protokoll_table.style.height = hoehe;		
 	}
 	if( typeof(breite) == 'string' )
 	{
 		protokoll_table.style.width = breite;		
 	}
 
 	//sensorr.test('Höhe',protokoll_table.style.height);
 	//sensorr.test('Ende',name);
 }
 
 csss.value = function value(id, value)
 {//Die Werte müssen in Original-CSS-Schreibweise eingesetzt werden.
 	var name = "csss.value(id='"+id+"',value='"+value+"')";
 	
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('Name',name);	
 	
 	var obj;
 	if( typeof(id) != 'object' ) obj = objj.create(id,'csss.value');
 	else obj = id;
 	var retour = (document.all)
 		?	obj.currentStyle[value]
 		:	window.getComputedStyle(obj,null).getPropertyValue(value);
 		
 	if( test == true ) sensorr.test('Ausgelesener Wert',retour);
 	
 	if( typeof(retour) != 'undefined' )
 	{
 		if( retour.match(/px/) != null )
 		{
 			retour = retour.replace(/px/gi,'')*1;
 		}
 		
 		return retour;
 	}	
 }
   </script>
   <script>
    var ajaxx = new Object();
 	ajaxx.add = false;
 	ajaxx.async = false;//Standardmodus: syncron
 	ajaxx.asyncBlock = false;
 	ajaxx.asyncOverFkt = '';//Fkt., die am Ende der Asyncron-Fkt. gestartet wird.
 	ajaxx.goal;//In der ajaxx.send()-Fkt. angegebenes Ziel
 	ajaxx.modus = '';//json vs. xml
 	ajaxx.msg = '';//Nachricht an Ajax
 	ajaxx.msg_txt = '';//Msg., die statt der Rückgabemessage ausgegeben wird, z.B. von einer JS-Fkt.
 	ajaxx.response_modus = 4;//Auslieferungsmodus
 	ajaxx.sound_block = false;//Blockt eine Confirm-Meldung
 	ajaxx.source = '';//Aufrufende JS-Fkt.
 
 
 
 ajaxx.send = function send(source,url,post,goal,modus)
 {
 	//modus: json|text|xml ( wird an ajaxx.out weitergegeben | 
 
 	var name = "ajaxx.send(source,url,goal,modus,block)";
 	var test = sensorr.protocol(1);
 	if( test == true ) sensorr.test('name',name);
 	if( test == true ) sensorr.test('url',url);
 	if( test == true ) sensorr.test('Asyncron-Modus',this.async);
 	if( test == true ) sensorr.test('Response-Modus',this.response_modus);
 	
 	var send_modus = '';
 	this.goal = goal;
 	if( typeof(modus) == 'undefined' ) modus = '';
 	this.modus = modus;
 	if( test == true ) sensorr.test('ajaxx.modus',this.modus);
 	
 	var prot_modus = this.protocol_modus(sensorr.protocol_modus);
 	//alert(sensorr.protocol_modus);
 
 	//if( test == true ) sensorr.test('post',post);
 	
 	if( post != '' )
 	{
 		send_modus = 'post';
 		post = post+prot_modus+"&ajax_source="+source+"&ajax_modus="+modus+"&ajax_msg="+this.msg;
 		
 		post = this.mask(post);
 		
 		if( test == true ) sensorr.test('post',post);	
 	}
 	else send_modus = 'get';
 	
 	this.source = '';
 
 	if( window.ActiveXObject )
 	{
 		if( test == true ) sensorr.test('Case','EXPLORER');
 		rq = new ActiveXObject("MSXML2.XMLHTTP.3.0");
 		//var ajax = new ActiveXObject("Microsoft.XMLHTTP");
 	}	
 	else
 	{
 		rq = new XMLHttpRequest();
 		if( modus == 'json' ) 
 		{
 			if( test == true ) sensorr.test('Case','JSON MimeType');
 			rq.overrideMimeType('text/plain; charset=utf-8');
 		}
 		else
 		{
 			if( test == true ) sensorr.test('Case','XML MimeType');
 			rq.overrideMimeType('text/xml; charset=utf-8');
 		}
 	}
 	
 	var async = false;//Standard: Syncrone Übertragung
 	if( this.async == true )
 	{
 		if( test == true ) sensorr.test('Case','Asyncrone Übermittlung');
 		async = true;
 		this.async = false;//Reset auf Standardwert
 	}
 	else if( test == true ) sensorr.test('Case','Syncrone Übermittlung');
 	
 	if( test == true ) sensorr.test('URL',url);
 		
 	var open_flag = rq.open(send_modus,url,async);//true: asyncron | false: syncron
 	
 	if( test == true ) sensorr.test('Status','Objekt geöffnet');
 	
 	rq.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
 
 	if( send_modus == 'post' )
 	{
 		if( test == true ) sensorr.test('Send-Modus','POST');
 		rq.send(post);
 	}
 	else if( send_modus == 'get' )
 	{
 		if( test == true ) sensorr.test('Send-Modus','GET');
 		rq.send(null);
 	}
 	
 	if( test == true ) sensorr.test('readyState',rq.readyState);
 
 	var ret = false;
 	
 	if( async == false )//Syncroner Modus
 	{
 		if( test == true ) sensorr.test('Status','Syncroner Aufruf der Out-Methode');
 		
 		ret = this.out(rq,modus);//Die inneren Fkt. liegt außerhalb des Objektes
 	}
 	else
 	{			
 		if( test == true ) sensorr.test('Status','Asyncroner Aufruf der Out-Methode');
 		
 		rq.onreadystatechange = function()//Ajaxx-Objekt wird extern angesprochen
 		{
 			//sensorr.test('Nachricht','Asyncron-Aufruf ajaxx.out()');
 			///if( test == true ) sensorr.test('Ready-State',rq.readyState);
 			var test = sensorr.protocol();			
 			if( rq.readyState == 4 )//Sperre für vorzeitiges Weiterleiten
 			{				
 				if( test == true ) sensorr.test('State','RequestEnde');
 				if( ajaxx.response_modus == 4 )
 				{
 					ret = ajaxx.out(rq,modus);//Die inneren Fkt. liegt außerhalb des Objektes
 				}
 				else ajaxx.response_modus = 4;//Reset Response-Modus
 				ajaxx.asyncOver();
 			}
 			else
 			{
 				if( test == true ) sensorr.test('Text',rq.responseText);
 				if( test == true ) sensorr.test('Response-Modus',ajaxx.response_modus);
 				if( ajaxx.response_modus == 3 )
 				{
 					if( test == true ) sensorr.test('Case','Ausgabe für readyState = 3');
 
 					if( ajaxx.asyncBlock == true )
 					{
 						sensorr.test('Case','ABBRUCH Ajax-Request');
 						ajaxx.response_modus = 4;
 						rq.abort();	
 					}
 					else
 					{
 						if( test == true ) sensorr.test('Case','Ausgabe');
 						ret = ajaxx.out(rq,modus);//Die inneren Fkt. liegt außerhalb des Objektes					
 					}
 				}				
 			}
 		}	
 	}
 		
 	return ret;
 }
 
 ajaxx.out = function out(rq,modus)
 {
 	var name = "ajaxx.out(rq,modus='"+modus+"')";
 	var test = sensorr.protocol(1);
 	if( test == true ) sensorr.test('Name',name);
 	
 	if( window.ActiveXObject )//IE
 	{
 		if( test == true ) sensorr.test('Case','EXPLORER');
 		var text = rq.responseText;
 		if( test == true ) sensorr.test('text',text);
 		//if( test == true ) sensorr.test('XMLDOM',window.ActiveXObject("Microsoft.XMLDOM"));
 		
 		resp = new window.ActiveXObject("Microsoft.XMLDOM");
 		
 		resp.async = "false";
 		resp.loadXML(text);		
 		if( test == true ) sensorr.test('resp',resp);
 	}	
 	else if( window.XMLHttpRequest )//Fox
 	{		
 		if( test == true ) sensorr.test('Case','FIREFOX');
 		//Ausgabe von PHP-Warnungen
 
 		if( 
 			( rq.responseText.search(/Warning/) > 0 )
 		||	( rq.responseText.search(/Parse error/) > 0 )
 		){
 			
 			sensorr.test('A C H T U N G!','Ajax liefert eine Warnung!!!!!!!!!');
 			sensorr.test('responseText',rq.responseText);
 		}	
 
 
 		if( ( modus == 'text' ) || ( modus == 'json' ) )
 		{
 			if( test == true ) sensorr.test('Case','Textausgabe/JSON');
 			var resp = rq.responseText;
 			if( test == true ) sensorr.test('Rückgabetext',resp);
 			if( resp != '' ) return eval(this.goal);
 			else if( test == true ) sensorr.test('Case','Keine rückgabefähige Antwort');
 		}
 		else 
 		{
 			resp = rq.responseXML;
 			if( test == true ) sensorr.test('XML-Obj',resp);
 			if( test == true ) sensorr.test('resp',resp);
 			if( test == true ) sensorr.test('ajaxx.goal',this.goal);
 			
 			return eval(this.goal);			
 		}
 	}
 }
 
 ajaxx.asyncOver = function asyncOver()//Modus: silent
 {
 	var name = "ajaxx.asyncOver()";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 	if( test == true ) sensorr.test('AsyncOverFkt',this.asyncOverFkt);
 	if( this.asyncOverFkt != '' )
 	{
 		eval(this.asyncOverFkt);
 	}
 }
 
 ajaxx.confirm = function confirm(resp, modus)//Modus: silent
 {
 //ACHTUNG! Bei Problemen erst einmal die FIREBUG-Konsole auf Fehlermeldungen konsultieren!
 	var name = "ajaxx.confirm(resp='"+resp+"', modus='"+modus+"' )";
 	var test = sensorr.protocol(1);
 	if( test == true ) sensorr.test('name',name);
 	
 
 	if( this.modus == 'json' )
 	{
 		if( test == true ) sensorr.test('Case','JSON');
 		
 		json = eval("("+resp+")");
 		
 		if( test == true ) sensorr.test('Confirm',json.confirm);
 		if( test == true ) sensorr.test('Msg',json.text);
 		
 		if( 
 			( json.confirm == 'true' ) 
 		||	( json.confirm == 'TRUE' )
 		||	( json.confirm == true )
 		){
 			json.confirm = true;
 		}
 		else json.confirm = false;
 		
 		if( modus != 'silent' )
 		{
 			if( test == true ) sensorr.test('Case','Sound-Ausgabe aktiviert');
 			if( json.confirm == true )
 			{
 				if( test == true ) sensorr.test('Case','true-Sound'); 
 				soundd.sys('true',name);
 			}
 			else
 			{
 				if( test == true ) sensorr.test('Case','false-Sound');
 				soundd.sys('false',name);							
 			}		
 		}
 		
 		if( json.text != '' ) sensorr.msg(json.text);//mesg_out ist die ID des Ausgabefeldes	
 		
 		return json.confirm;
 		
 	}
 	else
 	{
 			
 		if( test == true ) sensorr.test('Case','Normale Antwort');
 		
 		if( resp != null )
 		{
 			if( test == true ) sensorr.test('Case','XML-Objekt vorhanden');
 			
 			var flag = xmll.insert(resp,'confirm');//Thomas-Fkt.	
 		
 			if( test == true ) sensorr.test('Typeof flag',typeof(flag));
 			if( test == true ) sensorr.test('flag',flag);
 			if( flag == false ) this.sound_block = false;//Anzeige aktivieren		
 	
 			if( this.msg_txt == '' ) msgtext = xmll.insert(resp,'text');
 			else msgtext = this.msg_txt;
 		
 			if( test == true ) sensorr.test('msgtext',msgtext);
 			if( ( this.sound_block != true ) && ( modus != 'silent' ) )
 			{
 
 				
 				if( test == true ) sensorr.test('Sound aktiviert');
 				if( flag == true )
 				{
 					if( test == true ) sensorr.test('Case','true-Sound');
 					soundd.sys('true');
 				}
 				else
 				{
 					if( test == true ) sensorr.test('Case','false-Sound');
 					soundd.sys('false');
 				}
 				
 				
 				if( msgtext != '' ) sensorr.msg(msgtext);//mesg_out ist die ID des Ausgabefeldes	
 				
 			}
 			else
 			{
 				if( test == true ) sensorr.test('Sound blockiert');
 				
 				this.sound_block = false;
 				
 				if( test == true ) sensorr.test('Msg-Text',msgtext);
 				if( msgtext != '' ) sensorr.msg(msgtext,'',500);//mesg_out ist die ID des Ausgabefeldes	
 			}
 			if( test == true ) sensorr.test('Ende',name);
 			if( test == true ) sensorr.test('Flag',flag);
 			
 			if( sidee.modus == 'timer' )
 			{
 				if( test == true ) sensorr.test('Modus','Reset des Formulars');
 				objj.create('side_input',name).value = '';
 			}
 		
 			return flag;	
 				
 		}	
 		else
 		{
 			soundd.sys('false');
 		}
 		
 	}
 
 }
 
 ajaxx.continueProtocol = function continueProtocol()
 {
 	sensorr.protocol_modus = 'continue';
 }
 
 ajaxx.createUrl = function createUrl()
 {
 	var name = "ajaxx.createUrl(arguments='"+arguments+"')";
 	var test = sensorr.protocol(1);
 	if( test == true ) sensorr.test('name',name);
 	
 	var obj = '';
 	var vars='';
 	var sign='';
 	var value = '';
 	
 	if( typeof(arguments[0]) == 'object' )
 	{
 		if( test == true ) sensorr.test('Case 1.1.','Objekt');
 		
 		for( var i=0; i < arguments[0].length; i++ )
 		{
 			if( test == true ) sensorr.test('Case 1.1.1.','Durchlauf');
 			if( test == true ) sensorr.test('Arg',arguments[0][i]);
 			obj = objj.create(arguments[0][i],name);
 			if( test == true ) sensorr.test('ID Obj',obj.id);
 			if( test == true ) sensorr.test('Type Obj',obj.type);
 			if( test == true ) sensorr.test('Value Obj',obj.value);
 			
 			if( obj.nodeName == 'SELECT' )
 			{
 				if( test == true ) sensorr.test('ajaxx.createURL: Objekt SELECT',obj.id);
 				if( test == true ) sensorr.test('Typeof',typeof(obj));
 				if( test == true ) sensorr.test('Selected Index',obj.selectedIndex);
 				
 				if( ( obj.id == 'page_submodus' ) && ( obj.selectedIndex == -1 ) ) 
 				{
 					jss.msg("Es wurde kein Submodus ausgewählt");
 				}
 				
 				if( obj.selectedIndex == -1 )
 				{
 					if( test == true ) sensorr.test('ACHTUNG','Keine Optionen für SELECT-Feld = '+obj.id);
 				}
 				else
 				{
 					value = obj.options[obj.selectedIndex].value;
 					if( value != '' ) 
 					{
 						vars = vars+sign+obj.id+'='+value;
 						sign = '&';
 					}
 				}
 			}
 			else
 			{
 				if( obj.type == 'checkbox' )
 				{
 					if( test == true ) sensorr.test('Type','Objekt Checkbox');
 					var box = objj.create(obj.id,name);
 					if( box.checked == true )
 					{
 						vars = vars+sign+arguments[0][i]+'='+box.value;
 						sign = '&';
 						//sensorr.test('Vars',vars);
 					}
 				}
 				else
 				{
 					if( test == true ) sensorr.test('Type','Objekt Keine Checkbox');
 					value = objj.create(arguments[0][i],name).value;
 
 					if( value != '' )
 					{
 						value = this.string_replace(value);
 						vars = vars+sign+arguments[0][i]+'='+value;
 						sign = '&';
 					}				
 				}
 			}			
 		}
 	}
 	else
 	{
 		if( test == true ) sensorr.test('Case 1.2.','Besen');
 		for( var i=0; i < arguments.length; i++ )
 		{
 			vars = vars + '&'+arguments[i]+'='+objj.create(arguments[i],name).value;
 		}	
 	}
 	
 	if( test == true ) sensorr.test('vars',vars);
 	
 	return vars;
 }
 
 ajaxx.extract = function extract(resp,tag)
 {
 	var name = "ajaxx.extract()";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 	var ret = '';
 	if( this.modus == 'json' )
 	{
 		if( test == true ) sensorr.test('resp',resp);
 		resp = resp.replace(/\n/gi,"\\n");//Maskieren der Leerzeichen \n
 		json = eval("("+resp+")");
 		if( json[tag] == 'true' ) return true;
 		else if( json[tag] == 'false' ) return false;
 		else ret = json[tag];
 	}
 	else ret = xmll.insert(resp,tag);
 	
 	if( test == true ) sensorr.test('Return',ret);
 	return ret;
 }
 
 
 
 ajaxx.message = function message(msg,source)
 {//Msg. in Formular eintragen (hidden)
 	var name = "ajaxx.message(msg='"+msg+"', source='"+source+"')";
 	sensorr.test('name',name);
 	objj.create('ajax_msg',name).value = msg;
 	this.msg = msg;
 }
 
 ajaxx.protocol_modus = function protocol_modus(modus)//Steuerung des Protokoll-Modus
 {
 	if( modus == 'start' )
 	{
 		prot_modus = "&sensor_protocol_modus=start";
 		sensorr.protocol_modus = 'continue';
 	}
 	else
 	{
 		prot_modus = "&sensor_protocol_modus=continue";
 	}
 	
 	return prot_modus;
 }
 
 ajaxx.mask = function mask(strg)
 {
 	var name = "ajaxx.mask(strg)";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 	
 	strg = strg.replace(//gi,'>Euro>');
 	strg = strg.replace(/java/gi,'<j_a_v_a>');
 	strg = strg.replace(/'/gi,'<apos>');
 	strg = strg.replace(/\"/gi,'<quot>');
 	strg = strg.replace(/\+/gi,'<plus>');
 		
 	return strg;
 
 }
 
 ajaxx.startProtocol = function startProtocol()
 {
 	sensorr.protocol_modus = 'start';
 }
 
 ajaxx.string_replace = function string_replace(strg)
 {
 	var name = "ajaxx.string_replace(strg)";
 	//sensorr.test('name',name);
 	//sensorr.test('strg',strg);	
 	strg = strg.replace(/&/gi,'%26');
 	strg = strg.replace(/#/gi,'%23');
 	strg = strg.replace(/\=/gi,'%3D');
 	strg = strg.replace(//gi,'eXuXrXo');
 	//sensorr.test('strg',strg);	
 	return strg;
 }
 
 ajaxx.unmask = function unmask(strg)
 {
 	var name = "ajaxx.unmask(strg)";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);	
 	
 	strg = strg.replace(/>Euro>/gi,'');
 	strg = strg.replace(/<j_a_v_a>/gi,'java');
 	strg = strg.replace(/<apos>/gi,"'");
 	strg = strg.replace(/<quot>/gi,'"');
 	strg = strg.replace(/<plus>/gi,"+");
 	
 	return strg;
 
 }
 
 ajaxx.warning = function warning(msg)
 {
 	var name = "ajaxx.warning(msg='"+msg+"')";
 	//alert(name);
 	sensorr.msg(msg);
 	sensorr.msg_block(2000);
 	soundd.sys('false', name);
 }
   </script>
   <script>
    var arrayy = new Object();
 
 arrayy.alert = function array_alert(ar)
 {//Anzeige aller Array-Elemente in einem Alert-Fenster
 	var strg = '';
 	var sign = '';
 	for( var i=0; i < ar.length; i++ )
 	{
 		if( i > 0 ) sign = '\n';
 		strg = strg+sign+"Element "+i+": "+ar[i];
 	}
 	
 	alert(strg);
 }
 
 arrayy.in_array = function in_array(ar,test)
 {
 	var name = "arrayy.in_array(ar='"+ar+"',test='"+test+"')";
 	//sensorr.test('name',name);
 	
 	for( ix in ar )
 	{
 		if( ar[ix] == test ) return true;
 	}
 	
 	return false;
 }
 
 arrayy.swapRows = function swapRows(ar,first,scd)
 {
 	var name = "arrayy.swapRows(ar,first='"+first+"',scd='"+scd+"')";
 	var test = false;
 	test = true;
 	if( test == true ) sensorr.test('name',name);
 	
 	var store = ar[first];
 	ar[first] = ar[scd];
 	ar[scd] = store;
 	
 	return ar;
 	
 }
   </script>
   <script>
    var butt = new Object();
 	butt.aktiv = null;//Aktiver Button
 	butt.color = new Object();
 		butt.color.aktiv = csss._color['button_aktiv'];
 		butt.color.over = csss._color['button_over'];
 	butt.src = '';//Name der aufrufenden Fkt.
 	butt.old = null;//Letzter aktiver Button
 	butt.src_aktiv = "grafik/dreieck.gif";
 	butt.src_passiv = "grafik/dreieck_passiv.gif";
 
 butt.check = function check(text,src,top)
 {//Style-Arguments: zelle~top~15px, table~left~10px
 	var name = "butt.check(text='"+text+"',src,top)";//Name zur Source-Zuordnung
 	test = sensorr.protocol(1);
 	if( test == true ) sensorr.test('name',name);
 	if( test == true ) sensorr.test('Name der aufr. Fkt.',src);
 	var blackboard = objj.create("blackboard",name);
 	var zelle = objj.create('blackboard_msg',name);
 	
 	for( var i=1; i < arguments.length; i++ )
 	{
 		ar = arguments[i].split(/~/);
 		//if( test == true ) sensorr.test('1. Wert',ar[0]);
 		//if( test == true ) sensorr.test('2. Wert',ar[1]);
 		//if( test == true ) sensorr.test('3. Wert',ar[2]);
 		
 		if( ar[0] == 'zelle' ) zelle.style[ar[1]] = ar[2];
 		if( ar[0] == 'table' ) blackboard.style[ar[1]] = ar[2];
 	}
 	
 	if( this.src == '' )
 	{
 		if( test == true ) sensorr.test('Case','Make Ready');		
 		jss.msg(text);
 		this.src = src;
 		return false;
 	}
 	else if ( this.src != src )//Überprüfung der Quelle für den Zweitclick
 	{
 		sensorr.test('Case','Falsche Quelle');
 		this.src = '';
 	}
 	else
 	{
 		if( test == true ) sensorr.test('Case','Go');
 		blackboard.style.display = 'none';
 		clearTimeout(jss.msg_timeout);//Reset-Fkt. abbrechen
 		this.src = '';//Reset Source-Kontrolle
 		return true;
 	}
 }
 	
 butt.click = function click(obj)
 {
 	var name = "butt.click(obj)";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);	
 
 	if( this.aktiv != null ) this.aktiv.style.backgroundColor = '';
 	
 	if( this.aktiv !== obj )
 	{
 		this.old = this.aktiv;
 		//if( this.old !== null ) sensorr.test('Alter Button',this.old.id);
 		this.aktiv = obj;
 		//sensorr.test('Aktiver Button',this.aktiv.id);
 		obj.style.backgroundColor = this.color.aktiv;			
 	}
 	else
 	{
 		this.aktiv = null;
 		this.old = null;
 	}
 }
 
 butt.nav_over_out = function nav_over_out(i,modus,check)
 {
 	var name = "butt.nav_over_out(i='"+i+"', modus='"+modus+"', check='"+check+"')";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 		
 	img = document.getElementById('nav_image_'+i);
 	if( test == true ) sensorr.test('Img',typeof(img));
 	
 	if( check == 'nav_button_passiv' )
 	{
 		if( img != null )
 		{
 			if( modus == 'over' ) 
 			{
 				img.src = this.src_aktiv;
 			}
 			else 
 			{
 				img.src = this.src_passiv;
 			}
 		}
 	}
 }
 
 butt.over = function over(obj)
 {
 	var name = "butt.over(obj)";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);	
 	
 	obj.style.cursor = 'pointer';
 	if( obj !== this.aktiv ) obj.style.backgroundColor = this.color.over;
 }
 
 butt.out = function out(obj)
 {
 	var name = "butt.out(obj)";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);	
 	
 	if( obj !== this.aktiv ) obj.style.backgroundColor = '';
 }
 
 butt.reset = function reset()
 {
 	var name = "butt.reset()";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);		
 	if( this.aktiv !== null ) this.aktiv.style.backgroundColor = '';
 	this.aktiv = null;
 	this.old = null;
 }
 
 butt.setActiv = function setActiv()
 {
 	var name = "butt.setAktiv()";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);		
 	
 	for( var i=0; i < arguments.length; i++ )
 	{
 		objj.create(arguments[i],name).style.color = csss._color['font'];
 	}
 	
 	//sensorr.test('Aktiver Button',this.aktiv);
 	if( this.aktiv != null ) this.aktiv.style.color = 'red';
 	
 }
 
 butt.waitOn = function waitOn()
 {//Wartegrafik anzeigen
 	var name = "butt.waitOn()";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);		
 	return true;
 }
 
 butt.nav_sub_show_hide = function nav_sub_show_hide(i, tr_name)
 {
 	var name = "butt.nav_sub_show_hide(i='"+i+"', tr_name='"+tr_name+"')";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);	
 	
 	this.nav_sub_name = tr_name;//Name der aktiven Subbuttons
 	
 	var ele = document.getElementsByName('sub_button_'+tr_name);
 	if( test == true ) sensorr.test('Anzahl Subs',ele.length);
 	
 	for( var i=0; i < ele.length; i++ )
 	{
 		if( test == true ) sensorr.test('Type',typeof(ele[i]));
 		if( test == true ) sensorr.test('Display',objj.create(ele[i].id,name).style.display);
 		if( 
 			( objj.create(ele[i].id,name).style.display == 'none' )
 		||	( objj.create(ele[i].id,name).style.display == '' )
 		){
 			objj.create(ele[i].id,name).style.display = 'table-row';
 		}
 		else
 		{
 			objj.create(ele[i].id,name).style.display = 'none';
 		}
 	}
 }
 
 
 butt.waitOff = function waitOff()
 {//Wartegrafik ausblenden
 	var name = "butt.waitOff()";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);		
 }
   </script>
   <script>
    var jsonn = new Object();
 
 jsonn.evall = function evall(resp)
 {
 	var name = "jsonn.eval(resp='"+resp+"')";
 	sensorr.test('name',name);
 	var test = sensorr.protocol();
 	
 	return eval("("+resp+")");
 }
 
 jsonn.setJsonInput = function setJsonInput(resp,prefix)
 {
 	var name = "jsonn.setJsonInput(resp, prefix='"+prefix+"')";
 	sensorr.test('name',name);
 	var test = sensorr.protocol();
 	
 	if( test == true ) sensorr.test('resp',resp);
 
 	resp = resp.replace(/\\u0080/gi,'');//Eurozeichen einsetzen
 	resp = resp.replace(/&euro;/gi,'');
 	resp = resp.replace(/u0080/gi,'');
 	resp = resp.replace(/<plus>/gi,'+');
 	resp = resp.replace(/<j_a_v_a>/gi,'java');
 	resp = resp.replace(/<apos>/gi,"'");
 	resp = resp.replace(/<quot>/gi,'\\"');
 	resp = resp.replace(/<sprung_n>/gi,"\\n");
 
 	if( test == true ) sensorr.test('Resp',resp);
 	
 
 	json = eval('('+resp+')');
 	if( test == true ) sensorr.test('JSON',json);
 	
 	for ( var key in json )
 	{
 		if( test == true ) sensorr.test('Key',key);
 		if( test == true ) sensorr.test('Value',json[key]);
 		
 		if( typeof(prefix) != 'undefined' )
 		{
 			if( test == true ) sensorr.test('Case','Insert mit Prefix');
 			var obj = document.getElementsByName(prefix+'_'+key)[0];		
 			if( obj == null ) obj = objj.create(prefix+'_'+key,name);		
 		}
 		else
 		{
 			var obj = document.getElementsByName(key)[0];		
 			if( obj == null ) obj = objj.create(key,name);		
 		}
 
 		if( obj != null )
 		{
 			if( test == true ) sensorr.test('Type',obj.type);
 			if( obj.type == 'radio' )
 			{
 				if( test == true ) sensorr.test('Obj.-Name',obj.name);
 				if( test == true ) sensorr.test('Obj.-Wert',json[key]);
 				this.setRadio(obj.name,json[key]);
 			}
 			else if( obj.type == 'checkbox' )
 			{
 				obj.checked = json[key];
 			}
 			else
 			{
 				obj.value = ajaxx.unmask(json[key]);
 			}
 		}
 		else if( test == true ) sensorr.test('Fehler Obj',key);	
 		if( test == true ) sensorr.test('Ende');
 	}	
 }
   </script>
   <script>
    var jss = new Object();
 	jss.ctrl = new Object();
 	jss.ctrl['waitstop'] = false;
 	jss.blinkanzahl = 0;
 	jss.blinkcolor = '';
 	jss.submit_block = false;
 	//jss.submit_block = true;
 	jss.msg_timeout;	
 	jss.first_call;
 	jss.helpTimeout = null;
 	jss.hex_ar = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F");			
 	var jss_textZelle;//Textzelle-Obj
 
 jss.alertt = function alertt()
 {
 	var name = "jss.alertt()";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);		
 	
 	var strg = '';
 	if( typeof(arguments[0]) == 'object')
 	{
 		strg = 'Objekte:';
 		for( index in arguments[0] )
 		{
 			strg = strg+' | '+index+': '+arguments[0][index];
 		}
 	}
 	else if( arguments.length == 0 )
 	{
 		strg = "'kein Argument'";
 	}
 	else if( arguments.length == 1 )
 	{
 		if( arguments[0].length > 0 )
 		{
 			strg = "Array mit "+arguments[0].length+" Elementen:\n\n";
 			for( var i=0; i < arguments[0].length; i++ )
 			{
 				strg = strg + "Element["+i+"]: "+arguments[0][i]+"\n";
 			}
 		}
 		else
 		{
 			strg = strg+"'"+arguments[0]+"'";
 		}		
 	}
 	else
 	{
 		for( var i = 0; i < arguments.length; i = i + 2 )
 		{
 			
 			strg = strg+arguments[i]+':\t\t'+arguments[i+1]+'\n';
 		}	
 	}
 
 	alert(strg);
 }
 
 jss.blink = function blink(id,color,anzahl,time)
 {
 	var name = "jss.blink()";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);		
 	
 	obj = objj.create(id,name);
 	if( obj != null )
 	{
 		if( test == true ) sensorr.test('Obj',obj);
 		
 		if( typeof(color) == 'undefined' ) color = 'yellow';
 		if( typeof(anzahl) == 'undefined' ) anzahl = 10;
 		if( typeof(time) == 'undefined' ) time = 300;
 		
 		if( test == true ) sensorr.test('Blinkanzahl',this.blinkanzahl);
 		if( this.blinkanzahl < anzahl )
 		{
 			if( test == true ) sensorr.test('Durchlauf',this.blinkanzahl+1);
 			if( color == this.blinkcolor )
 			{
 				obj.style.backgroundColor = '';
 				this.blinkcolor = '';
 			}
 			else
 			{
 				obj.style.backgroundColor = color;
 				this.blinkcolor = color;
 			}
 			this.blinkanzahl++;
 			setTimeout("jss.blink('"+id+"','"+color+"','"+anzahl+"','"+time+"')",time);
 		}
 		else
 		{
 			this.blinkanzahl = 0;
 			this.blinkcolor = '';
 			obj.style.backgroundColor = '';
 		}	
 	}
 }
 
 jss.cut = function cut(num)
 {
 	strg = num.toString();
 	strg_ar = strg.split(".");
 	return strg_ar[0]*1;	
 }
 
 jss.extract = function extract(strg,start,sign)
 {
 	var name = "extact(strg ='"+strg+"',start,sign)";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);		
 	
 	klasse_check = strg.match(start);
 	
 	if( klasse_check == start )
 	{
 		ar_1 = strg.split(start,2);
 		ar_2 = ar_1[1].split(sign,3);
 		//sensorr.test('Klasse',ar_2[1]);	
 		return ar_2[1];
 	}
 }
 
 jss.help = function help(ev,strg)
 {
 	var name = "jss.help(ev,strg ='"+strg+"')";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);		
 		
 	if( strg != '' )
 	{
 		this.helpTimeout = setTimeout(function(){jss.helpShow(ev,strg);},1000);//Closure-Technik
 	}
 }
 
 jss.helpShow = function helpShow(ev,strg)
 {
 	var name = "jss.helpShow(strg='"+strg+"')";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);		
 	
 	if( test == true ) sensorr.test('MouseX',ev.pageX);
 	if( test == true ) sensorr.test('MouseY',ev.pageY);
 	
 	help_msg = objj.create('help_msg',name);
 	if( help_msg != null )
 	{
 		help_msg.innerHTML = strg;
 		help_msg.style.top = (ev.pageY+10)+'px';
 		help_msg.style.left = (ev.pageX+10)+'px';
 		help_msg.style.display = 'block';
 		help_msg.style.zIndex = 1000;
 	}
 }
 
 jss.helpHide = function helpHide()
 {
 	var name = "jss.helpHide()";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);		
 	
 	clearTimeout(this.helpTimeout);
 	help_msg = objj.create('help_msg',name);
 	if( help_msg != null )
 	{
 		help_msg.style.display = 'none';
 		help_msg.style.top = '-50px';
 		help_msg.style.left = '-50px';	
 	}
 }
 
 jss.klein = function klein(strg)
 {
 	var name = "klein(strg='"+strg+"')";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);		
 	
 	if( typeof(strg) != 'undefined' )
 	{
 		return strg.toLowerCase();
 	}
 	
 }
 
 jss.msg = function msg(text, zeit, top, left)
 {
 	var name = "jss.msg(text='"+text+"',zeit,top='"+top+"', left='"+left+"')";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);		
 	
 	var blackboard = objj.create("blackboard",name);
 	var blackboard_msg = objj.create("blackboard_msg",name);
 
 	if( test == true ) sensorr.test('Case','Blackboard vorhanden');
 	if( test == true ) sensorr.test('Text',text);
 	if( typeof(zeit) == 'undefined' ) zeit = 2000;
 
 	blackboard_msg.innerHTML = text;
 	if( typeof(top) == 'undefined' ) top = 0;
 	if( typeof(left) == 'undefined' ) keft = 0;
 	blackboard.style.top = (top+180)+'px';
 	blackboard.style.left = (left+200)+'px';
 	blackboard.style.display = 'block';
 	
 	butt.check_confirm = true;
 	this.msgReset(true, zeit);//Start des Resets	
 }
 
 jss.msgReset = function msgReset(bool, zeit)
 {
 	var name = "jss.msgReset("+bool+", "+zeit+")";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);		
 	
 	var blackboard = objj.create("blackboard",name);
 	
 	if( bool == true )
 	{
 		this.msg_timeout = setTimeout("jss.msgReset(false)", zeit);
 	}
 	else if( bool == false )
 	{
 		//alert("false");
 		butt.check_confirm = false;
 				
 		blackboard.style.top = '-200px';
 		
 		if( butt.src != '' ) butt.src = '';
 	}
 }
 
 jss.submit = function submit(id)
 {	
 	if( typeof(id) == 'undefined' ) id = 'side_form';
 	obj = objj.create(id,name);
 	if( this.submit_block != true ) obj.submit();
 }
 
 jss.to_boolean = function to_boolean(strg)
 {
 	var name = "jss.to_boolean(strg='"+strg+"')"
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);		
 	
 	if( ( strg == 'true' ) || ( strg == true ) || ( strg == '1' ) )//'1': Umwandlung von PHP nach JS
 	{
 		return true;
 	}
 	else
 	{
 		return false;
 	}
 }
 
 jss.ucfirst = function ucfirst(strg)
 {
 	//sensorr.test('strg',strg);
 	var name = "jss.ucfirst(stg='"+strg+"')";
 	test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);		
 	
 	var retour = strg.substring(0,1).toUpperCase() + strg.substring(1,strg.length).toLowerCase();
 	if( test == true ) sensorr.test('Return',retour);
 	return retour;
 }
 
 jss.vv = function vv(value, vv_1, vv_2)
 {
 	var retour;
 	( value == vv_1 ) ? retour = vv_2 : retour = vv_1;
 	sensorr.test('retour',retour);
 	return retour;
 }
 
 jss.wait = function wait(millisec)
 {
 	var name = "jss.wait(millisec='"+millisec+"')";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('Name',name);
 	
 	var eDate = null;
 	var eMsec = 0;
 	var sDate = new Date();
 	var sMsec = sDate.getTime();
 	
 	do 
 	{
 	  eDate = new Date();
 	  eMsec = eDate.getTime();
 	} 
 	while( 
 		( (eMsec-sMsec) < millisec )
 	||	( this.ctrl['waitstop'] == true )
 	);
 	
 	
 	if( this.ctrl['waitstop'] == true )
 	{
 		this.ctrl['waitstop'] = false;
 	}
 	else return true;
 }
   </script>
   <script>
    var datumm = new Object();
 datumm.select_date = '';
 datumm.select_date_stamp = '';
 
 datumm.germanDate = function germanDate(date)
 {//von Mysql-Datum nach German-Datum
 	var name = "datumm.germanDate(date='"+date+"')";
 	sensorr.test('name',name);
 	var test = true;
 	//test = false;
 	if( test == true ) sensorr.test('date',date);
 	date = date.split(" ")[0];
 	date_ar = date.split("-");
 	return date_ar[2]+"."+date_ar[1]+"."+date_ar[0];
 }
   </script>
   <script>
    var domm = new Object();
 	domm.parent_node = '';//Elternknoten
 
 domm.createAttrib = function createAttrib(attrib,value)
 {
 	var attrib = document.createAttribute(attrib);
 	attrib.nodeValue = value;
 	return attrib;
 }
 
 domm.createSpan = function createSpan(node, text,modus)
 {
 	var name = "domm.createSpan(node,text,modus)";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 	if( test == true ) sensorr.test('text',text);
 	//sensorr.test('text_td ID',this.text_td.id);
 	//sensorr.test('modus',modus);
 	
 	var textknoten = document.createTextNode(text);		
 	var font_ele = document.createElement('span');
 	font_ele.appendChild(textknoten);
 	font_ele.style.fontWeight = modus;
 	if( test == true ) sensorr.test('Knoten-ID',node.id);
 	node.appendChild(font_ele);
 }
 
 domm.createJsLink = function createJsLink(node, lk_text, href, modus)
 {
 	var name = "domm.createJsLink(node, lk_text="+lk_text+", href, modus)";
 	var test = sensorr.protocol();
 	//sensorr.test('name',name);
 	//sensorr.test('lk_text',lk_text);
 	//sensorr.test('href',href);
 	//sensorr.test('node-ID',node.id);
 	var lk = document.createElement("a");//Linkknoten erstellen
 	var lk_text_nd = document.createTextNode(lk_text);
 	lk.appendChild(lk_text_nd);
 	
 	href = href.replace(/javascript:/,"")
 	href = href.replace(/\"/gi,"");
 	//sensorr.test('href',href);
 	lk.href = "javascript:"+href;
 	
 	//sensorr.test('lk.href',lk.href);
 	lk.style.fontWeight = modus;
 	node.appendChild(lk);
 }
 
 domm.createLeerzeile = function createLeerzeile(node)
 {
 	var name = "xmll.createLeerzeile()";
 	var test = sensorr.protocol();
 	//sensorr.test('name',name);
 	node.appendChild(document.createElement('br'));
 }
 
 domm.createLink = function createLink(node, lk_text, href, modus, klasse)
 {
 	var name = "domm.createLink(node,lk_text, href, modus, klasse)";
 	var test = sensorr.protocol();
 	
 	if( test == true ) sensorr.test('name',name);
 	if( test == true ) sensorr.test('lk_text',lk_text);
 	if( test == true ) sensorr.test('href',href);
 	//sensorr.test('parent-ID',parent.id);
 	var lk = document.createElement("a");//Linkknoten erstellen
 	var lk_text_nd = document.createTextNode(lk_text);
 	lk.appendChild(lk_text_nd);
 	
 	if( href.match(/target/)!= null )
 	{
 		//sensorr.test('Nachricht','Target vorhanden');
 		if( href.match(/_blank/) != null )
 		{
 			href = href.replace(/target=_blank/,'');
 			lk.target = '_blank';
 			//sensorr.test('href ohne target',href);
 		}
 	}
 	
 	if( href.match(/style/)!= null )
 	{
 		sensorr.test('Nachricht','Style vorhanden');
 		if( href.match(/color/) != null )
 		{
 			sensorr.test('Nachricht','Colorattribut vorhanden');
 		}
 	}
 	
 	if( typeof(klasse) != 'undefined')
 	{
 		if( test == true ) sensorr.test('Klasse',klasse);
 		lk.className = klasse;
 	}
 		
 	lk.href = href;
 	lk.style.fontWeight = modus;
 	node.appendChild(lk);
 }
 
 domm.createTextNode = function createTextNode(parent,text)
 {
 	var name = "domm.createTextNode(parent='"+parent.id+"',text)";	
 	sensorr.test('name',name);
 	var test = sensorr.protocol();
 	
 	//sensorr.test('Länge text_ar',text_ar.length);
 	/*	*/
 	var br = new Array();
 	var span = new Array();
 	var node = new Array();
 	var subnode = new Array;
 	var subspan = new Array;
 	var return_check = -1;
 
 	if( text != '' )
 	{
 		if( test == true ) sensorr.test('Prüfung auf Zeilensprung',text.search(/<br>/));
 		return_check = text.search(/<br>/);	
 	}
 	
 	if( return_check > -1 )
 	{
 		return_ar = text.split(/<br>/);
 		
 		//if( test == true ) sensorr.test('sidee.browser',sidee.browser);
 		if( test == true ) sensorr.test('Anzahl Abschnitte',return_ar.length);
 		
 		for( var k = 0; k < return_ar.length; k++ )
 		{
 			//if( test == true ) sensorr.test('Element',return_ar[k]);
 			span[k] = document.createElement('span');
 			subnode[k] = new Array();
 			subspan[k] = new Array();
 			
 			text_ar = return_ar[k].split(/<strong>/);
 			if( test == true ) sensorr.test('Anzahl Strongs',text_ar.length);
 
 			if( text_ar.length > 1 )
 			{		
 				if( test == true ) sensorr.test('Case','Strong-Knoten');
 				for( var i=0; i < text_ar.length; i++ )
 				{
 					//if( test == true ) sensorr.test('Durchlauf Nr: '+i);
 					
 					if( text_ar[i].match(/<\/strong>/) != null )
 					{				
 						split_ar = text_ar[i].split(/<\/strong>/);
 						subnode[k][0] = document.createTextNode(split_ar[0]);
 						subspan[k][0] = document.createElement('span');
 						subspan[k][0].appendChild(subnode[k][0]);
 						subspan[k][0].style.fontWeight = 'bold';
 						span[k].appendChild(subspan[k][0]);
 						subnode[k][1] = document.createTextNode(split_ar[1]);			
 						span[k].appendChild(subnode[k][1]);
 						parent.appendChild(span[k]);				
 					}
 					else
 					{
 						subnode[k][0] = document.createTextNode(text_ar[i]);
 						span[k].appendChild(subnode[k][0]);
 						parent.appendChild(span[k]);
 						br[k] = document.createElement('br');
 						parent.appendChild(br[k]);							
 					}
 				}						
 			}
 			else
 			{
 				if( test == true ) sensorr.test('Case','Kein Strong-Knoten ....................');
 				if( test == true ) sensorr.test('Text',text_ar[0]);
 				if( text_ar[0] == '' )
 				{
 					if( test == true ) sensorr.test('Case','1. Element leer');
 					var br = document.createElement('br');
 					parent.appendChild(br);							
 				}
 				else
 				{
 					subnode[k][0] = document.createTextNode(text_ar[0]);
 					span[k].appendChild(subnode[k][0]);
 					var br = document.createElement('br');
 					parent.appendChild(br);
 					parent.appendChild(span[k]);				
 				}
 
 			}
 		}	
 	}
 	else
 	{
 		if( text != '' ) this.strongNode(parent,text);
 	}
 }
 
 domm.deleteChilds = function deleteChilds(node)
 {
 	var name = "deleteChilds(node)";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 	
 	if( typeof(node) != 'undefined' ) 
 	{
 		//if( test == true ) sensorr.test('Typeof',typeof(obj));
 		if( typeof(node) != 'object' ) node = objj.create(node,name);
 		
 		if( node != null )
 		{
 			while( node.hasChildNodes() )
 			{
 				  node.removeChild(node.lastChild);
 			}			
 		}
 
 	}
 	else
 	{
 		if( this != null )
 		{
 			while( this.hasChildNodes() )
 			{
 				  this.removeChild(this.lastChild);
 			}			
 		}
 	}
 }
 
 domm.insertSameTagAfter = function insertSameTagAfter(new_node,node)
 {//Fügt den neuen Knoten vor dem nachfolgenden Knoten gleichen Namens ein ( ... also z.B. tr oder td )
 	var name = "domm.insertSameTagAfter(new_node ='"+new_node+"')";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 
 	parent = node.parentNode;
 	var node_check = false;
 	
 	for( var i=0; i < parent.childNodes.length; i++ )
 	{
 		if( node_check == true )
 		{
 			parent.insertBefore(new_node,parent.childNodes[i]);
 			break;
 		}
 		else if( parent.childNodes[i] == node )
 		{
 			if( test == true ) sensorr.test('Knoten gefunden');
 			node_check = true;
 		}
 	}
 }
 
 domm.removeChildFromBody = function removeChildFromBody(id)
 {
 	var name = "domm.removeChildFromBody(id='"+id+"')";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 	
 	var obj = objj.create(id,name);
 
 	if( obj != null )
 	{
 		document.body.removeChild(obj);
 	}
 	else sensorr.test('Nachricht',"Objekt ID = '"+id+"' nicht gefunden");	
 }
 
 domm.removeChildFromParentNode = function removeChildFromParentNode(id)
 {
 	var name = "domm.removeChildFromParentNode(id='"+id+"')";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 	
 	var obj = objj.create(id,name);
 	//sensorr.test('obj',obj);
 	if( obj != null )
 	{
 		var node = obj.parentNode;
 		node.removeChild(obj);	
 	}
 	else sensorr.test('Nachricht',"Objekt ID = '"+id+"' nicht gefunden");
 
 }
 
 domm.removeChildsWithNameFromParentNode = function removeChildWithNameFromParentNode(parent,nodename)
 {
 	var name = "domm.removeChildWithNameFromParentNode(parent='"+parent+"',nodename='"+nodename+"')";
 	var test = sensorr.protocol();	
 	if( test == true ) sensorr.test('name',name);
 	
 	if( typeof(parent) != 'object' )
 	{
 		var obj = objj.create(parent,name);
 	}
 	else obj = parent;
 		
 	if( test == true ) sensorr.test('obj',obj);
 	if( obj != null )
 	{
 		childs = obj.childNodes;
 		if( test == true ) sensorr.test('Anzahl Childs',childs.length);
 		var anzahl = childs.length;
 		for( var i=anzahl-1; i > 0; i--)
 		{
 			if( test == true ) sensorr.test('Durchlauf',i);
 			if( childs[i].name == nodename )
 			{
 				obj.removeChild(childs[i]);
 			}
 		}
 	}
 	else sensorr.test('Nachricht',"Objekt ID = '"+id+"' nicht gefunden");
 
 }
 
 domm.removeChildsFromParentNode = function removeChildFromParentNode(id)
 {
 	var name = "domm.removeChildFromParentNode(id='"+id+"')";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 
 	var obj = objj.create(id,name);
 	while( obj.hasChildNodes() )
 	{
 		obj.removeChild(obj.lastChild);
 	}
 }
 
 domm.strongNode = function strongNode(node,strg)
 {
 	var name = "domm.strongNode(node,strg)";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 	//sensorr.test('parent.ID',this.parent_node.id);
 	//sensorr.test('strg',strg);
 
 	strg_ar = strg.split(/<strong>/);	
 	//sensorr.test('strg_ar.length',strg_ar.length);
 	
 	if( sidee.browser.match(/ie/) )//Korrektur für ID
 	{
 		if( strg.search(/<strong>/) == 0 )
 		{
 			strg_ar.unshift('');//Erstes Arrayelement einfügen
 		}
 	}
 	for( var k=0; k < strg_ar.length; k++ )
 	{
 		if( strg_ar[k] != '' )
 		{
 			
 			if( k == 0 )
 			{
 				//sensorr.test('Case 1');
 				var normal = strg_ar[0].replace(/<\/strong>/,'');
 				//sensorr.test('normal',normal);
 				node.appendChild(document.createTextNode(strg_ar[0]));
 			}
 			else
 			{
 				//sensorr.test('Case 2');
 				var fett = strg_ar[k].split("</strong>")[0];
 				var normal = strg_ar[k].split("</strong>")[1];
 				
 				//sensorr.test('normal',normal);
 				//sensorr.test('fett',fett);
 				fett = fett.replace(/<\/strong>/,'');
 				text = document.createTextNode(fett);
 				span = document.createElement('span');				
 				span.appendChild(text);
 				span.style.fontWeight = 'bold';
 				node.appendChild(span);
 				
 				if( ( normal != null ) && ( normal != '' ) )
 				{
 					//sensorr.test('Case 3');
 					//sensorr.test('normal',normal);
 					node.appendChild(document.createTextNode(normal));
 				}					
 			}
 		}
 	}
 }
 
 domm.textNode = function textNode(obj,text)
 {
 	var name = "domm.textNode(text='"+text+"')";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 	if( typeof(obj) != 'object' ) obj = objj.create(obj,name);
 	
 	var node = '';
 	text_ar = text.split("\n");
 	//arrayy.alert(text_ar);
 	for( var i=0; i < text_ar.length; i++ )
 	{
 		if( text_ar[i] == '' ) node = document.createElement('br');
 		else node = document.createTextNode(text_ar[i]);
 		
 		obj.appendChild(node);
 		obj.appendChild(document.createElement('br'));
 		node = '';		
 	}
 }
 
 domm.weicheLink = function weicheLink(node,strg,modus)
 {
 	var name = "domm.weicheLink(node,strg,modus)";
 	var test = sensorr.protocol();	
 	if( test == true ) sensorr.test('name',name);
 	if( test == true ) sensorr.test('modus',modus);
 	if( test == true ) sensorr.test('strg',strg);
 	
 	var klasse_check = strg.match(/class/);
 	if( test == true ) sensorr.test('Klasse-Check',klasse_check);
 	if( klasse_check == 'class' )
 	{
 		klasse = jss.extract(strg,'class','"');
 	}
 	
 	var link_check = strg.match(/<\/a>/);
 	//sensorr.test('link_check',link_check);
 	if( link_check == null )//Case: Kein Link vorhanden
 	{
 		if( test == true ) sensorr.test('Case 1','Spanelement erzeugen');
 		this.createSpan(node,strg,modus);
 	}
 	else//Case: Link vorhanden
 	{
 		if( test == true ) sensorr.test('Case 2','Link erzeugen');
 		lk_ar = strg.split("<a");
 		//sensorr.test('Anzahl Knoten',lk_ar.length);
 		for( var i=0; i < lk_ar.length; i++ )
 		{
 			//sensorr.test('lk_ar['+i+']',lk_ar[i]);
 			
 			if( ( lk_ar[i] != '' ) && ( lk_ar[i] != null ) )
 			{
 				//sensorr.test('Knotenprüfung',lk_ar[i].match(/<\/a>/));
 				if( lk_ar[i].match(/<\/a>/) != null )
 				{
 					var lk = lk_ar[i].split("<\/a>")[0];
 					var text = lk_ar[i].split("<\/a>")[1];				
 				}
 				else
 				{
 					var text = lk_ar[i];
 					var lk = '';
 				}
 				
 				if( lk != '' )
 				{
 					//test = true;
 					if( lk.match("javascript:") != null )
 					{
 						if( test == true ) sensorr.test('Javascript-Link');
 						if( test == true ) sensorr.test('lk',lk);
 						var href = lk.split("href=")[1];
 						href = href.split(">")[0];
 						var lk_text = lk.split(">")[1];
 						if( test == true ) sensorr.test('href',href);
 						this.createJsLink(node,lk_text,href,modus);
 					}
 					else
 					{
 						if( test == true ) sensorr.test('Case','Ankerknoten');
 						if( test == true ) sensorr.test('lk',lk);
 						var href = lk.split("href=")[1];
 						
 						if( test == true ) sensorr.test('href',href);
 						href = href.split(">")[0];
 						href = href.replace(/\"/gi,'');
 						href = href.replace(/'/gi,'');
 						//sensorr.test('Fertige href',href);
 						
 						var lk_text = lk.split(">")[1];
 						if( test == true ) sensorr.test('lk_text',lk_text);
 						var klasse;
 						//jss.alertt('href',href);
 						this.createLink(node, lk_text,href,modus,klasse);								
 					}
 				}
 				
 				if( text != '' )
 				{
 					//sensorr.test('Case','Textknoten');
 					this.createSpan(node, text,modus);
 				}			
 			}
 		}
 	}
 }
 
 domm.weicheStrong = function weicheStrong(node,strg)
 {
 	
 	var name = "domm.weicheStrong(node,strg)";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 	if( test == true ) sensorr.test('node.ID',node.id);
 	if( test == true ) sensorr.test('strg',strg);
 
 	strg_ar = strg.split(/<strong>/);	
 	//sensorr.test('strg_ar.length',strg_ar.length);
 	
 	if( sidee.browser.match(/ie/) )//Korrektur für ID
 	{
 		if( strg.search(/<strong>/) == 0 )
 		{
 			strg_ar.unshift('');//Erstes Arrayelement einfügen
 		}
 	}
 	for( var k=0; k < strg_ar.length; k++ )
 	{
 		if( strg_ar[k] != '' )
 		{
 			
 			if( k == 0 )
 			{
 				if( test == true ) sensorr.test('Case 1','Nicht Fett');
 				var normal = strg_ar[0].replace(/<\/strong>/,'');
 				if( test == true ) sensorr.test('normal',normal);
 				this.weicheLink(node, normal,'normal');
 			}
 			else
 			{
 				if( test == true ) sensorr.test('Case 2','Fett');
 				var fett = strg_ar[k].split("</strong>")[0];
 				var normal = strg_ar[k].split("</strong>")[1];
 				
 				//sensorr.test('normal',normal);
 				//sensorr.test('fett',fett);
 				fett = fett.replace(/<\/strong>/,'');
 				this.weicheLink(node, fett,'bold');
 				
 				if( ( normal != null ) && ( normal != '' ) )
 				{
 					//sensorr.test('Case 3');
 					//sensorr.test('normal',normal);
 					this.weicheLink(node, normal,'normal');
 				}					
 			}
 		}
 	}
 }
   </script>
   <script>
    //imgg.obj.php
 var imgg = new Object();
 	imgg.table;
 	imgg.tbdy;
 	imgg.bottom_td;
 	imgg.control = new Object();
 	//imgg.control['std_width'] = csss._prop['width']['image_std_width'];
 	imgg.obj = new Object();
 	imgg.src = new Array();
 	imgg.txt = new Array();
 	imgg.dia = new Array();//Dia, wird zum Obj. gemacht
 
 	imgg.dia_ctrl = new Array();//Steuerung der Diaformatierung
 	imgg.dia_height = new Array();//Höhe des Dias	
 	imgg.dia_nr;//Startparameter der Diashow	
 	imgg.dia_ratio = new Array();//Kantenverhältnis der Dias
 	imgg.dia_size = new Array();//Array mit Size-Strings	
 	imgg.dia_src = new Array();//Quelle der Dias
 	imgg.dia_txt = new Array();//Txt des Dias
 	imgg.dia_width = new Array();//Breite des Dias
 
 	imgg.size = new Object();//Daten der Diashoe
 	imgg._table_css = new Object();//Obj. für css-Werte der Tabelle
 	
 	
 
 imgg.preload = function preload()
 {
 	var name = "imgg.preload()";
 	var test = sensorr.protocol();
 	if( test == true )sensorr.test('name',name);
 	//alert('imgg.preload()');
 	
 	if( test == true ) sensorr.test('Anzahl der Bilderquellen',this.src.length);
 	
 	for( var i=0; i < this.src.length; i++ )
 	{
 		this.obj[i] = new Image();
 		this.obj[i].src = this.src[i];
 		if( test == true ) sensorr.test('Source',this.src[i]);
 	}
 	
 	if( test == true ) sensorr.test('Anzahl Dias',this.dia_src.length);
 	for( var k=0; k < this.dia_src.length; k++ )
 	{
 		this.dia[k] = new Image();//Dia, wird hier zusammengebastelt
 		this.dia[k].src = this.dia_src[k];
 		this.dia[k].txt = this.dia_txt[k];
 		this.dia[k].width = csss.removePx(this.dia_width[k]);
 		this.dia[k].height = csss.removePx(this.dia_height[k]);
 		if( test == true ) sensorr.test('Source',this.dia_src[k]);
 		if( test == true ) sensorr.test('dia.width',this.dia[k].width);
 	}	
 }
 
 imgg.moveDias = function moveDias(dir)
 {
 	var name = "imgg.moveDias(dir='"+dir+"')";	
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 	
 	if( test == true ) sensorr.test('Name',name);
 
 	if( test == true ) sensorr.test('Dia-Nr.',this.dia_nr);
 	//if( test == true ) sensorr.test('Text', dia[dia_nr].txt);
 
 	if( test == true ) sensorr.test('Anzahl Dias',this.dia.length);
 
 	if( dir == 'up' )
 	{
 		this.dia_nr++;
 		if( this.dia_nr == this.dia.length ) this.dia_nr = 0;
 		if( test == true ) sensorr.test('Nächstes Dia',this.dia_nr);
 	}
 	else if( dir == 'down' )
 	{
 		this.dia_nr--;
 		if( this.dia_nr == -1 ) this.dia_nr = this.dia.length-1;
 		if( test == true ) sensorr.test('Nächstes Dia',this.dia_nr);
 	}	
 		
 	if( test == true ) sensorr.test('Dia-Nr',this.dia_nr);
 	this.showImage('dia',this.dia_nr,this.dia[this.dia_nr].txt);
 
 }
 
 imgg.showDias = function showDias(dir,bottom,left,width,height)
 {
 	var name = "imgg.showDias(dir='"+dir+"',bottom='"+bottom+"',left='"+left+"',width='"+width+"',height='"+height+"')";	
 	var test = sensorr.protocol(1);
 	if( test == true ) sensorr.test('name',name);
 
 	if( test == true ) sensorr.test('Dia-Nr.',this.dia_nr);
 	//if( test == true ) sensorr.test('Text', dia[dia_nr].txt);
 
 	if( test == true ) sensorr.test('Anzahl Dias',this.dia.length);
 	
 	if( typeof(bottom) == 'undefined' ) left = '0px';
 	this.size['bottom'] = (objj.mouseY + csss.removePx(bottom) - 350)+'px';	
 	
 
 	if( typeof(left) == 'undefined' ) left = '0';
 	this.size['left'] = (objj.mouseX + csss.removePx(left) + 70)+'px';	
 
 	if( test == true ) sensorr.test('Left',left);
 	
 	if( typeof(width) != 'undefined' ) this.size['width'] = width;
 	if( test == true ) sensorr.test('Width',width);
 	
 	if( typeof(height) != 'undefined' ) this.size['height'] = height;
 	if( test == true ) sensorr.test('Height',height);
 	
 	this.dia_nr = 0;
 	this.showImage('dia',this.dia_nr,this.dia[0].txt,bottom,left,width,height);
 
 }
 
 imgg.showImage = function showImage(modus,nr,text,bottom,left,width,height)
 {
 	var name = "imgg.showImage( modus='"+modus+"', nr='"+nr+"', text='"+text+"', bottom='"+bottom+"',left='"+left+"', width='"+width+"', height='"+height+"')";
 	sensorr.test('name',name);
 	var test = sensorr.protocol();
 		
 	if( typeof(bottom) == 'undefined' ) bottom = this.size['bottom'];
 	if( test == true ) sensorr.test('Bottom',bottom);
 	if( typeof(left) == 'undefined' ) left = this.size['left'];
 	if( test == true ) sensorr.test('left',left);
 	if( typeof(width) == 'undefined' ) width = this.size['width'];
 	if( test == true ) sensorr.test('width',width);
 	if( typeof(height) == 'undefined' ) height = this.size['height'];
 	if( test == true ) sensorr.test('height',height);
 	
 	table = objj.create('image_table',name);
 	image_td = objj.create('image_img_td',name);	
 	image_txt_td = objj.create('image_text_td',name);
 		
 	old_image = image_td.firstChild;
 	if( old_image != null ) image_td.removeChild(old_image);
 
 	var new_image = Object();
 	if( modus == 'single' )
 	{
 		if( test == true ) sensorr.test('Modus','Case 1.1. Einzelbild');
 		new_image = this.obj[nr-1];
 		table.style.left = (objj.mouseX + csss.removePx(left) + 70)+'px';
 		table.style.bottom = (objj.mouseY + csss.removePx(bottom) - 70)+'px';//bottom, damit der Boden sich nicht versetzt!		
 		new_image.style.width = width;
 	}
 	else if( modus == 'dia' )
 	{
 		if( test == true ) sensorr.test('Modus','Case 1.2. Dia-Show');
 		if( test == true ) sensorr.test('Dia-Ctrl',this.dia_ctrl[nr]);
 		if( test == true ) sensorr.test('Side.left',this.size['left']);
 		table.style.left = this.size['left'];
 		
 		if( test == true ) sensorr.test('Side.bottom',this.size['bottom']);		
 		table.style.bottom = this.size['bottom'];
 	
 		if( test == true ) sensorr.test('Nr',nr);
 		if( test == true ) sensorr.test('Typ Dia',typeof(this.dia[nr]));
 		if( test == true ) sensorr.test('Dia.source',this.dia[nr].src);
 		if( test == true ) sensorr.test('Dia.width',this.dia[nr].width);
 		new_image = this.dia[nr];
 
 		
 		if( test == true ) sensorr.test('Dia-Breite',this.dia[nr].width);
 		if( test == true ) sensorr.test('Dia-Höhe',this.dia[nr].height);
 		if( csss.removePx(this.dia[nr].height) > 0 )
 		{
 			var ratio = csss.removePx(this.dia[nr].width)/csss.removePx(this.dia[nr].height);
 			if( test == true ) sensorr.test('Ratio',ratio);
 		}
 		
 		if( this.dia_ctrl[nr] == 'format_all' )
 		{
 			if( test == true ) sensorr.test('Case 1.2.1.','Foto vollständig formatiert auf Weite|Höhe ['+this.dia[nr].width+':'+this.dia[nr].height+']');
 			this.dia[nr].style.width = this.dia[nr].width;
 			this.dia[nr].style.height = this.dia[nr].height;
 			image_td.style.height = height;
 			image_td.style.width = width;
 		}
 		else if( this.dia_ctrl[nr] == 'format_height' )
 		{
 			if( test == true ) sensorr.test('Case 1.2.2.','Foto formatiert auf Höhe['+this.dia[nr].height+']');
 			this.dia[nr].style.width = (csss.removePx(this.dia[nr].height)*ratio)+'px';
 			this.dia[nr].style.height = this.dia[nr].height;
 			image_td.style.height = height;
 			image_td.style.width = width;
 		}
 		else if( this.dia_ctrl[nr] == 'format_width' )
 		{
 			if( test == true ) sensorr.test('Case 1.2.3.','Foto formatiert auf Breite['+this.dia[nr].width+']');
 			this.dia[nr].style.width = this.dia[nr].width;
 			this.dia[nr].style.height = (csss.removePx(this.dia[nr]).width/ratio)+'px';
 			image_td.style.height = height;
 			image_td.style.width = width;
 		}		
 		else if( ratio > 1 ) //Querformat
 		{
 			if( test == true ) sensorr.test('Case 1.2.4.',"Querformat='"+width+"'");
 			this.dia[nr].style.width = width;
 			this.dia[nr].style.height = (csss.removePx(width)/ratio)+'px';
 			image_td.style.height = height;
 		}
 		else
 		{
 			if( test == true ) sensorr.test('Case 1.2.5.',"Hochformat='"+height+"'");
 			this.dia[nr].style.height = height;
 			this.dia[nr].style.width = (csss.removePx(height)*ratio)+'px';
 			
 			image_td.style.width = width;
 		}
 		
 	}
 	
 	image_td.appendChild(new_image);
 	text_node = image_txt_td.firstChild;
 	if( text_node != null ) text_node.nodeValue = text;
 	else
 	{
 		text_node = document.createTextNode(text);
 		image_txt_td.appendChild(text_node);
 	}
 	
 	nav_tr = objj.create('nav_tr',name);
 	if( test == true ) sensorr.test('Anzahl ChildNodes nav_tr',nav_tr.childNodes.length);
 	if( modus == 'single' )
 	{
 		if( test == true ) sensorr.test('Modus','Single');
 		objj.create('img_nav_left_td').style.display = 'none';
 		objj.create('img_nav_right_td').style.display = 'none';
 		image_td.style.height = '0px';
 		image_td.style.width = '0px';		
 	}
 	else if( modus == 'dia' )
 	{
 		if( test == true ) sensorr.test('Modus','Dia');
 		objj.create('img_nav_left_td').style.display = 'block';
 		objj.create('img_nav_right_td').style.display = 'block';
 	}	
 	
 	table.style.display = 'block';	
 }
 
 imgg.over = function imgg_over(obj)
 {
 	obj.style.backgroundColor = csss._color['nav_hover'];
 	obj.style.color = csss._color['kontrast'];
 }
 
 imgg.out = function imgg_out(obj)
 {
 	obj.style.backgroundColor = csss._color['nav_passiv'];
 	obj.style.color = csss._color['font'];	
 }
 
 imgg.removeImage = function imgg_removeImage()
 {
 	var name = "imgg.removeImage()";
 	var test = sensorr.protocol();
 	
 	obj = objj.create('image_table',name);
 	obj.style.display = 'none';
 }
   </script>
   <script>
    objj = new Object();
 objj.mouseX = 0;
 objj.mouseY = 0;
 
 objj.create_obj_from_strg = function create_obj_from_strg(strg,sign_1,sign_2)
 {
 	var name = "objj.create_obj_from_strg(strg="+strg+", sign_1="+sign_1+", sign_2="+sign_2+")";
 	var test = sensorr.protocol(1);
 	if( test == true ) sensorr.test('Name',name);
 	
 	var obj = new Object();
 	
 	var reg_1 = new RegExp(sign_1,"g");
 	var reg_2 = new RegExp(sign_2);
 	
 	var _parts = strg.split(reg_1);
 	if( test == true ) sensorr.test('Anzahl Elemente',_parts.length);
 	
 	for( i=0; i < _parts.length; i++ )
 	{
 		var _subparts = _parts[i].split(reg_2,2);
 		//if( test == true ) sensorr.test('Anzahl Subparts',_subparts.length);
 		//if( test == true ) sensorr.test('Prop.',_subparts[0]);
 		//if( test == true ) sensorr.test('Val.',_subparts[1]);
 		//if( test == true ) sensorr.test('Obj-Typ',typeof(obj));
 		obj[_subparts[0]] = _subparts[1];
 		if( test == true ) sensorr.test("Obj.-prop[' "+_subparts[0]+"']:",obj[_subparts[0]]);
 	}
 	
 	return obj;
 }
 
 objj.captureClick = function captureClick()
 {
 	var name = "objj.captureClick()";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('Name',name);
 
 	if (document.layers) document.captureEvents(Event.CLICK);//Mozilla
 	
 	document.onclick = this.getMouse;
 }
 
 objj.check = function check(value)
 {
 	if( ( value != '' ) && ( typeof(value) != 'undefined' ) ) return true;
 }
 
 objj.className = function className(obj,modus,value)
 {//Veränderung der Klassen eines Objektes
 	var name = "objj.className(obj,modus='"+modus+"',value='"+value+"')";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('Name',name);
 
 	if( obj != null )
 	{
 		var klasse = obj.className;
 		/*	*/
 		if( test == true ) sensorr.test('Klasse',klasse);
 	
 		if( modus == '+' ) klasse = klasse + ' ' + value;
 		else if( modus == '-' ) 
 		{
 			value = eval("/"+value+"/gi");
 			klasse = klasse.replace(value,'');
 			klasse = klasse.replace(/  /,'');
 		}
 		if( test == true ) sensorr.test('Neue Klasse',klasse);
 		
 		obj.className = klasse;	
 		
 	}
 }
 
 objj.close = function close(obj)
 {
 	var name = "objj.close()";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('Name',name);
 	
 	if( typeof(obj) != 'Object' ) obj = objj.create(obj,name);
 
 	if( obj.close_protector != true ) obj.style.display = 'none';
 	else
 	{ 
 		check = butt.check('Bisher wurde noch nicht gesichert!\n\nSoll das Fenster trotzdem geschlossen werden?',name);
 		if( check == true )
 		{
 			obj.style.display = 'none';
 			obj.close_protector = false;
 		}
 	}
 }
 
 objj.close_protect = function close_protect(obj,mode)
 {//Meth. verhindert ungesichertes Schließen eines Fensters
 	var name = 'objj.close_protect()';
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('Name',name);
 
 	if( typeof(obj) != 'Object' ) obj = objj.create(obj,name);
 	if( mode == 'on' ) obj.close_protector = true;
 	else obj.close_protector = false;
 }
 
 objj.create = function create(id, fkt_name,modus)//fkt_name, Name der aufrufenden Fkt.
 {//modus: 'null': Keine Alarmausgabe
 	var name = "objj(id='"+id+"',fkt_name='"+fkt_name+"',modus='"+modus+"')";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('Name',name);
 	
 	//( id == '' ) ? test = true : test = false;//Test für einzelne Objekte
 	
 	if( ( typeof(id) != 'undefined' ) && ( id != '' ) )
 	{
 		var obj = document.getElementById(id);
 		if( obj == null ) obj = document.getElementsByName(id)[0];
 		if( obj == '[object HTMLSelectElement]' )
 		{
 			if( test == true ) sensorr.test('Value',obj.value);
 		}
 		
 		if( obj != null )
 		{			
 			if( test == true )
 			{
 				if( test == true ) sensorr.test('Type',obj);
 				if( obj == '[object HTMLInputElement]' ) sensorr.test('Objekttyp['+id+']','Input');	
 				else if( obj == '[object HTMLSelectElement]' ) sensorr.test('Objekttyp['+id+']','Select');
 						
 			}
 
 			return obj;
 		}
 		else
 		{
 			if( ( modus != 'null' ) && ( modus != null ) && ( this.check(fkt_name) == true )  )
 			{
 				if( 
 					( sidee.locus == 'local' )
 				||	( ( sidee.locus == 'web' ) && ( sidee.test == true ) )
 				){
 					alert("Fehlermeldung von objj.create():\n\nEs wurde in '"+fkt_name+"' kein Objekt mit der ID == '"+id+"' gefunden!");
 				}
 				else
 				{
 					return null;
 				}
 			}
 			else
 			{
 				return null;
 			}
 		}	
 	}
 	else
 	{
 		alert("Fehler bei objj.create-Aufruf(id='"+id+"') von Fkt. '"+fkt_name+"'");
 	}
 
 }
 
 objj.getMouse = function getMouse(e)
 {
 	var name = "objj.getMouse(e='"+e+"')";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('Name',name);
 	
 	//Mit this geht es leider nicht.
     if (document.layers)
 	{
         if( test == true ) sensorr.test('Case:','Netscape alt');
 		this.mouseX = e.pageX;
         this.mouseY = e.pageY;
     } 
 	else if (document.all)
 	{
         if( test == true ) sensorr.test('Case:','IE');
 		if( test == true ) sensorr.test('window.event',window.event.clientX);
 		this.mouseX = window.event.clientX + document.body.scrollLeft;
         this.mouseY = window.event.clientY + document.body.scrollTop;
     }
 	else if (document.getElementById)
 	{
         if( test == true ) sensorr.test('Case:','Netscape neu');
         this.mouseX = e.pageX;
         this.mouseY = e.pageY;
     }
 	
 	if( test == true ) sensorr.test('Maus-X | Y',this.mouseX+' | '+this.mouseY);
 	objj.mouseX = this.mouseX;
 	objj.mouseY = this.mouseY;
 }
 
 objj.length = function length(ar)
 {
 	var name = "objj.length(ar='"+ar+"')";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('Name',name);
 	
 	var nr = 0;
 	if( ar.length > 0 ) return ar.length;
 	else
 	{
 		if( test == true ) sensorr.test('Case','Assoziatives Objekt');
 		for( ix in ar )
 		{
 			nr++;
 			if( test == true ) sensorr.test('Durchlauf',nr);
 			if( test == true ) sensorr.test('assoc',ix);
 			if( test == true ) sensorr.test('value',ar[ix]);
 			
 		}
 		return nr;
 	}
 }
 
 objj.show = function show(obj)
 {
 	var name = "objj.show(obj)";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('Name',name);
 	
 	for( var key in obj )
 	{
 		if( typeof(obj[key]) == 'object' )
 		{
 			sensorr.test('Unterobjekt von',obj[key]);
 			for( var key_1 in obj[key] )
 			{
 				sensorr.test(key_1,obj[key][key_1]);
 			}
 		}
 		else
 		{
 			sensorr.test(key,obj[key]);
 		}		
 	}
 }
   </script>
   <script type="text/javascript">
    var sidee = new Object();
 	sidee.browser = 'fox';
 	sidee.ende = ' .....................';//Standardstrich für Markierungen im Protokoll
 	sidee.focuss = '';
 	sidee.focus_obj = null;
 	sidee.domain = 'Naturheilpraxis-hamacher.de'.toLowerCase();
 	sidee.input = '';
 	sidee.level = ''*1;//htaccess-Ebene
 	
 	sidee.locus = 'remote';
 	sidee.msg_out = 'mesg_out';//ID des Ausgabefeldes für Nachrichten
 	sidee.modus = 'engine';
 	sidee.page = 'index';
 	sidee.page_last = '';	
 	sidee.path_common = '../../engine/common/';
 	sidee.path_root = '../../';
 	sidee.path_level = '';
 	if( sidee.level > 0 )
 	{
 		for( var i=0; i < sidee.level; i++ )
 		{
 			sidee.path_level = sidee.path_level+'../';
 		}
 		//sensorr.test('Side-Path',sidee.path);
 	}	
 	sidee.path_own = '../../engine/';
 	sidee.domain_dir = '';//Root-Dir der Side
 	sidee.sound = '';
 	sidee.test = jss.to_boolean('');//true, wenn Testmodus aktiviert ist.
 	sidee.visibility = '';
 	sidee.dd_obj = new Array();//Array mit den ID's der nicht-fixierten Objekten
 	
 	var sidee_side_obj;//Ausgewähltes Obj
 /*
 sidee.dragAndDrop = function dragAndDrop()
 {	
 	var name = "sidee.dragAndDrop()";
 	var test = false;
 	//test = true;
 	if( test == true ) sensorr.test('Name',name);
 	
 	var check = new Array();//Array mit den ID's der nicht-fixierten, angezeigten Panelen.
 	var fix = new Array();//Werte aus der Datenbank
 	var obj = new Array();//Array mit den nicht-fixierten Panelen als Obj.
 	
 	if( test == true ) sensorr.test('Anzahl css->_prop[fix]','0');
 
 	var visus;
 	var k = 0;
 	if( test == true ) sensorr.test('DD-Obj',this.dd_obj);
 	if( test == true ) sensorr.test('Anzahl dd_obj',this.dd_obj.length);
 	
 	
 	for( var i=0; i < this.dd_obj.length; i++ )//sidee.dd_obj ist ein Array mit der ID
 	{
 		if( test == true ) sensorr.test('Durchlauf Nr. ',i);
 		
 		if( test == true ) sensorr.test("DD-Obj",this.dd_obj[i]);
 		if( test == true ) sensorr.test('hier');
 		
 		if( this.dd_obj[i] != '' )
 		{
 			obj[i] = objj.create(this.dd_obj[i],name);
 		}
 		else
 		{ 
 			if( test == true ) sensorr.test('ERROR!!!',"sidee.dd_obj["+i+"] ist leer!");
 		}
 
 		if( obj[i] != null )
 		{
 			display = ( document.all )
 			?	obj[i].currentStyle["display"]
 			:	window.getComputedStyle(obj[i],null).getPropertyValue("display");
 	
 			if( display == 'block' )//DragDrop nur bei angezeigten Objekten aktivieren
 			{
 				check[k] = this.dd_obj[i];
 				k++;
 			}		
 		}
 	}
 
 	if( test == true ) sensorr.test('Anzahl Check',check.length);
 	
 	for( var j=0; j < check.length; j++ )
 	{
 		if( test == true ) sensorr.test('Durchlauf '+j,check[j]);
 		
 		if( test == true ) sensorr.test('Anzahl der fix. Objekte',fix.length);
 		for( var k=0; k < fix.length; k++ )
 		{
 			
 			if( check[j] == fix[k] )
 			{
 				if( test == true ) this.test('Nachricht',check[j]+' wurde fixiert');
 				check[j] = '';
 			}
 		}
 	}	
 
 	jss.first_call = false;	
 	
 	SET_DHTML(check);
 	
 	if( test == true ) sensorr.test('Ende',name);
 }
 */
 sidee.goHome = function goHome()
 {
 	var name = "sidee.goHome()";
 	sensorr.test('name',name);
 	var test = sensorr.protocol(1);
 	
 	var href = "index.php?side_page=index";
 	if( test == true ) sensorr.test('href',href);
 	window.location = href;
 	
 }
   </script>
   <script>
    var strgg = new Object();
 
 strgg.getSubstrg = function getSubstrg(strg,start,end)
 {
 	var name = "strgg.getSubstrg(strg,start='"+start+"',end='"+end+"')";
 	
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 	if( test == true ) sensorr.test('strg',strg);
 	
 	var retour = strg.slice(start,end);
 	
 	return retour;
 
 }
 
 strgg.removeSubstrg = function removeSubstrg(strg,start,end)
 {
 	var name = "strgg.removeSubstrg(strg,start='"+start+"',end='"+end+"')";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 	if( test == true ) sensorr.test('strg',strg);
 	
 	var strg_before = strg.substr(0,start);
 	if( test == true ) sensorr.test('strg_before',"|"+strg_before+"|");
 	
 	var strg_after = strg.substr(end,strg.length);
 	if( test == true ) sensorr.test('strg_after',"|"+strg_after+"|");	
 	
 	var retour = strg_before+strg_after;
 	
 	return retour;
 
 }
   </script>
   <script>
    var syss = new Object();
 
 syss.getPlugins = function getPlugins()
 {
 	var name = "syss.getPlugins()";
 	plugin = navigator.plugins;
 	for( var i=0; i < plugin.length; i++ )
 	{
 		sensorr.test('Plugin',plugin[i].name);
 	}
 }
   </script>
   <script>
    var tablee = new Object();
 	tablee.anzahl = '';//Anzahl der Spalten
 	tablee._ctrl = new Object();
 		tablee._ctrl['aktiv_row'] = null;//Aktive Zeile
 	tablee.id;//ID der Tabelle
 	tablee.tbdy;//Body der Tabelle
 	
 
 tablee.changeOrder = function changeOrder(table)
 {
 	var name = "tablee.changeOrder(table='"+table+"')"
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('Name',name);
 	var table = objj.create(table,name);
 	var tbody = table.getElementsByTagName('tbody')[0];
 	if( test == true ) sensorr.test('tbody',tbody);
 	var rows = tbody.getElementsByTagName('tr');
 	var head_stop = false;
 	var bottom_stop = true;
 	
 	if( test == true ) sensorr.test('Anzahl Reihen',rows.length);
 	for( var k=0; k < rows.length;k++ )
 	{
 		if( test == true ) sensorr.test('Durchlauf Nr.',k);
 		if( head_stop != true )
 		{
 			if( rows[k].id.search(/head/) == -1 )
 			{
 				if( test == true ) sensorr.test('Erste Reihe bei',k);
 				var first_row = k;
 				head_stop = true;
 				bottom_stop = false;
 			}
 		}
 		
 		if( bottom_stop != true )
 		{		
 			if( rows[k].id.search(/bottom/) > -1 )
 			{
 				if( test == true ) sensorr.test('Letzte Reihe bei',k-1);
 				var last_row = k-1;
 				bottom_stop = false;
 			}			
 		}		
 	}
 	if( test == true ) sensorr.test('first_row',first_row);
 	if( test == true ) sensorr.test('last_row',last_row);
 	
 	for( var i=first_row; i < last_row; i++ )
 	{
 		tbody.insertBefore(rows[last_row],rows[i]);
 	}
 }
 
 tablee.insertAfter = function insertAfter(id,step)
 {
 	var name = "tablee.insertAfter(id='"+id+"', step='"+step+"')"
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('Name',name);
 
 	if( typeof(step) == 'undefined' ) step = 1;
 	
 	var obj = objj.create(id,name);
 	
 	var parent = obj.parentNode;
 	
 	var childs = parent.getElementsByTagName('tr');
 	
 	var pos = 0;
 	
 	if( test == true ) sensorr.test('Anzahl Kindknoten',childs.length);
 	for( var i=0; i < childs.length; i++ )
 	{
 		//if( test == true ) sensorr.test('Durchlauf',i);
 		//if( test == true ) sensorr.test('Row-ID',childs[i].id);
 		if( childs[i].id == id )
 		{
 			pos = i;
 			if( test == true ) sensorr.test('Position',pos);
 			break;
 		}
 	}
 	
 	if( childs[pos+step+1] != null )
 	{
 		if( test == true ) sensorr.test('Case','Einhängen');
 		parent.insertBefore(obj,childs[pos+step+1]);
 	}
 	else
 	{
 		if( test == true ) sensorr.test('Case','Anhängen');
 		parent.appendChild(obj);
 	}
 }
 
 tablee.insertBefore = function insertBefore(id,step)
 {
 	var name = "tablee.insertBefore(id='"+id+"', step='"+step+"')"
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('Name',name);
 
 	if( typeof(step) == 'undefined' ) step = 1;
 
 	var obj = objj.create(id,name);
 	
 	var parent = obj.parentNode;
 	
 	var childs = parent.getElementsByTagName('tr');
 	
 	var pos = 0;
 	
 	if( test == true ) sensorr.test('Anzahl Kindknoten',childs.length);
 	for( var i=0; i < childs.length; i++ )
 	{
 		//if( test == true ) sensorr.test('Durchlauf',i);
 		if( test == true ) sensorr.test('Row-ID',childs[i].id);
 		if( childs[i].id == id )
 		{
 			if( test == true ) sensorr.test('Übereinstimmung für ID',childs[i].id);
 			pos = i;
 			if( test == true ) sensorr.test('Position',pos);
 			break;
 		}
 	}
 	
 	var new_pos = pos-step;
 	if( test == true ) sensorr.test('Neue Position',new_pos);
 
 	if( new_pos < 0 )
 	{
 		if( test == true ) sensorr.test('Case','Jump auf 1. Stelle');
 		new_pos = 0;
 	}
 	else if( new_pos < childs.length )
 	{
 		if( test == true ) sensorr.test('Case','Jump auf letzte Stelle');
 		new_pow = childs.length;
 	}
 	
 	if( test == true ) sensorr.test('Einsetzen vor Knoten',new_pos);
 	parent.insertBefore(obj,childs[new_pos]);	
 
 }
 
 tablee.insertTop = function insertTop(id,id_top)
 {
 	var name = "tablee.insertTop(id='"+id+"',id_top='"+id_top+"')";	
 	var test = false;
 	//test = true;
 	if( test == true ) sensorr.test('name',name);
 	table = objj.create(id,name);
 	tbdy = table.getElementsByTagName('tbody')[0];
 	
 	top = objj.create(id_top,name);
 	
 	tbdy.removeChild(top);
 	
 	nodes = tbdy.childNodes;
 	
 	for( var i=0; i < nodes.length; i++ )
 	{
 		if( test == true ) sensorr.test('NodeName',nodes[i].nodeName);
 		if( test == true ) sensorr.test('Anzahl Knoten',nodes.length);
 		if( nodes[i].nodeName == 'TR' )
 		{
 			if( test == true ) sensorr.test('1. Zeile',nodes[i].id);
 			if( test == true ) sensorr.test('Top',top.id);
 			tbdy.insertBefore(top,nodes[i]);
 			return;
 		}
 		
 		tbdy.appendChild(top);//Reset, wenn keine Zeile da ist
 	}
 } 
 
 tablee.selectBoxes = function selectBoxes()
 {
 	var name = "tablee.selectBoxes()";
 	sensorr.test('name',name);
 	var index;
 	var table = objj.create('table_right', name);
 
 	var inputs = table.getElementsByTagName('input');
 	for( var i = 0; i < inputs.length; i++ )
 	{
 		if( inputs[i].type = 'checkbox' )
 		{
 			inputs[i].checked = true;
 		}
 	}
 }
 
 tablee.quitCell = function quitCell(obj)
 {
 	var name = "tablee.quitCell(obj == '"+obj+"')";	
 	sensorr.test('name',name);
 	
 	obj.style.backgroundColor='white';
 }
 
 tablee.getRow = function getRow(obj, id, slct)
 {
 	var name = "tablee.getRow(obj == '" +obj+ "', id == '" +id+ "',slct == '" +slct+ "')";	
 	//sensorr.test('name',name);
 	//alert(name);
 	
 	if(
 		( id != slct )
 	&&	( id != '' )
 	){
 		obj.style.backgroundColor = timerr.color.over;
 	}
 	else if( ( obj != null ) && ( id != slct ) )
 	{
 		obj.style.backgroundColor = timerr.color.over;
 	}	
 }
 
 tablee.getTextNode = function getTextNode(td)
 {
 	var name = "tablee.getTextNode(td='"+td.id+"')";
 	sensorr.test('name',name);
 	var test = false;
 	//test = true;
 	if( test == true ) sensorr.test('Anzahl ChildNodes',td.childNodes.length);
 	if( td.childNodes.length != 0 ) fc = td.firstChild;
 	else return '';
 	if( test == true ) sensorr.test('fc',fc);
 	if( test == true ) sensorr.test('Textknoten',fc.nodeValue);
 	return fc.nodeValue;
 }
 
 tablee.quitRow = function quitRow(obj, id, slct, color)
 {
 	var name = "tablee.quitRow(obj == '" +obj+ "', id == '" +id+ "',slct == '" +slct+ "',color='"+color+"')";	
 	//sensorr.test('name',name);
 	//alert(name);
 	
 	if( typeof(color) == 'undefined' ) color = '';
 	
 	if(
 		( id != slct )
 	&&	( id != '' )
 	){		
 		obj.style.backgroundColor = color;
 	}
 	else if( ( obj != null ) && ( id != slct ) )
 	{
 		obj.style.backgroundColor = color;
 	}
 }
 
 tablee.setAktivRow = function setAktivRow(id)
 {
 	var name = "tablee.setAktivRow(id='"+id+"')";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('Name',name);
 	
 	obj = objj.create(id,name);
 	obj.style.backgroundColor = 'orange';
 }
 
 tablee.setPassivRow = function setPassivRow(id)
 {
 	var name = "tablee.setPssivRow(id='"+id+"')";
 	var test = false;
 	test = true;
 	
 	obj = objj.create(id,name);
 	obj.style.backgroundColor = '';
 }
   </script>
   <script>
    var xmll = new Object();
 
 xmll.utf8_decode = function utf8_decode(strg)
 {  
 
 }  
 
 xmll.convertTextXML = function convertTextXML(strg)
 {
 	var name = "xmll.convertTextXML(strg='"+strg+"')";
 	//sensorr.test('name',name);
 	var test = sensorr.protocol();
 	var parser;
 	var resp = null;
 
 	//sensorr.test('DOMParser',window.DOMParser);
 	if( window.DOMParser )
 	{
 		parser = new DOMParser();
 		resp = parser.parseFromString(strg, "text/xml");
 	}
 	else if( window.ActiveXObject )
 	{
 		parser = new ActiveXObject("Msxml2.DOMDocument.3.0");
 		parser.async = "false";
 		resp = parser.load(strg);
 		//sensorr.test('xml-Doc',resp);
 	} 
 	
 	if( resp != null )
 	{
 		return resp;
 	}
 }
 
 xmll.createTextNode = function createTextNode(strg,parent_id)
 {
 	var name = "xmll.createTextNode()";
 	sensorr.test('name',name);
 	var test = sensorr.protocol();	
 	var parent = objj.create(parent_id, name);
 	var node;
 	strg_ar = strg.split("</strong>");
 	var test = true;
 	if( strg_ar.length > 0 )
 	{
 		if( sidee.browser.match(/ie/) )//Korrektur für ID
 		{
 			if( strg.search(/<strong>/) == 0 )
 			{
 				strg_ar.unshift('');//Erstes Arrayelement einfügen
 			}			
 		}
 		
 		if( test == true ) sensorr.test('Anzahl Elemente',strg_ar.length);
 		for( var i=0; i < strg_ar.length; i++ )
 		{
 	
 			if( strg_ar[i].match(/<strong>/) != null )
 			{
 				var fett_ar = strg_ar[i].split("<strong>");
 				parent.appendChild(document.createTextNode(fett_ar[0]));
 				node = document.createTextNode(fett_ar[1]);
 				span = document.createElement('span');
 				span.appendChild(node);
 				span.style.fontWeight = 'bold';
 				parent.appendChild(span);
 			}
 			else
 			{
 				node = document.createTextNode(strg_ar[i]);
 				parent.appendChild(node);
 			}
 		}	
 	}
 	else
 	{
 		parent.appendChild(strg);
 	}
 }
 
 xmll.extractSets = function extractSets(resp,tag)
 {
 	var name = "xmll.extractSets(resp='"+resp+"',tag='"+tag+"')";
 	//sensorr.test('name',name);
 	var test = sensorr.protocol();	
 	var nodes = resp.getElementsByTagName(tag);
 	//sensorr.test('Anzahl Knoten',nodes.length);
 	return nodes;
 }
 
 xmll.insert = function insert(obj, tag, nr)
 {
 	//Dok.: tag ist der Namen des TAG, das den Textknoten enthält.
 	var name = "xmll.insert(obj,tag='"+tag+"')";
 	//sensorr.test('Name',name);
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 	if( test == true ) sensorr.test('obj',obj);
 
 	if( typeof(nr) == 'undefined' )
 	{
 		nr = 0;
 	}
 	
 	if( typeof(obj) == 'string' )
 	{
 		if( test == true ) sensorr.test('Umwandlung in XML');
 		obj = this.convertTextXML(obj);
 	}
 	
 	if( obj.getElementsByTagName(tag)[nr] != null )
 	{
 
 		if( obj.getElementsByTagName(tag)[nr].firstChild != null )
 		{
 			
 			if( obj.getElementsByTagName(tag)[nr].textContent != '' )
 			{
 				var node_data = obj.getElementsByTagName(tag)[nr].textContent;
 				
 				if( node_data.toLowerCase() == 'true' )
 				{
 					node_bool = jss.to_boolean(node_data.toLowerCase());
 					node_data = node_bool;
 				}
 				else if( node_data.toLowerCase() == 'false' )
 				{
 					node_bool = jss.to_boolean(node_data.toLowerCase());
 					node_data = node_bool;
 				}
 
 				if( test == true ) sensorr.test('Knoten-Daten',node_data);
 				return node_data;								
 			}
 			else
 			{
 				if( test == true ) sensorr.test('Case','firstChild.data ist leer');
 				return '';
 			}					
 		}
 		else
 		{
 			if( test == true ) sensorr.test('Case','FirstChild == NULL');
 			return '';
 		}		
 	}
 	else
 	{
 		if( test == true ) sensorr.test('Case','NULL');
 		return '';
 	}
 }
 
 xmll.removeUmlaute = function removeUmlaute(strg)
 {
 	var name = "xmll.removeUmlaute(strg='"+strg+"')";
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('name',name);
 	
 	strg = strg.replace(/ä/g,'ae');
 	strg = strg.replace(/Ä/g,'Ae');
 	strg = strg.replace(/ö/g,'oe');
 	strg = strg.replace(/Ö/g,'Oe');
 	strg = strg.replace(/Ü/g,'Ue');
 	strg = strg.replace(/ü/g,'ue');
 	
 	return strg;
 }
   </script>
   <script type="text/javascript">
    var enginee = new Object();
 
 enginee.goToIndex = function gotoIndex(url) 
 {
 	//alert('enginee.goToIndex()');
 	document.location.href = "index.php?"+url;
 }
 
 enginee.home = function home()
 {
 	var name = 'enginee.home()';
 	//alert(name);
 
 	objj.create('side_input',name).value = 'index';		
 	objj.create('side_page',name).value = 'index';	
 	document.side_form.submit();
 }
 
 enginee.logout = function logout()
 {
 	var name = 'engine.logout()';
 	//alert(name);
 	document.side_form.side_page.value = 'letter';	
 	document.side_form.side_input.value = 'letter_adminLogoutPrepare';
 	
 	document.side_form.submit();	
 }
 
 enginee.test = function test()
 {
 	var name = "enginee.test()";
 	//sensorr.test('name',name);
 	//alert(name);
 	
 
 }
   </script>
   <script>
    var userr = new Object();
  userr.id = '';
   </script>
  </head>
  <body>
   <table class="context_menue_table" id="context_menue" onclick="sensorr.context_menue.closeMenues();" style="display:none;">
    <tr>
     <td class="context_menue_td" onclick="sensorr.context_menue.displayPanel('block','script_panel','store')">
      Skri
      <u>
       p
      </u>
      tpalette
     </td>
    </tr>
    <tr>
     <td>
      <hr class="menu_hr"/>
     </td>
    </tr>
    <tr>
     <td class="context_menue_td" onclick="objj.create('protokoll_leiste').style.visibility = 'hidden';">
      Hide Prot.-zeile
     </td>
    </tr>
    <tr>
     <td class="context_menue_td" onclick="objj.create('protokoll_leiste').style.visibility = 'visible';">
      Show Prot.-zeile
     </td>
    </tr>
    <tr>
     <td>
      <hr class="menu_hr"/>
     </td>
    </tr>
    <tr>
     <td class="context_menue_td" onclick="sensorr.context_menue.closeMenues();">
      Menü schließen
     </td>
    </tr>
   </table>
   <script>
    sensorr.context_menue = new menue_cls('sensorr.context_menue','context_menue');
   </script>
   <form action="/index.php" id="side_form" method="POST" name="side_form">
    <input id="color_auswahl_colors" name="color_auswahl_colors" type="hidden"/>
    <input id="color_auswahl_rows" name="color_auswahl_rows" type="hidden"/>
    <input id="css_values" name="css_values" type="hidden"/>
    <input id="user_id" name="user_id" type="hidden" value=""/>
    <input id="user_email_old" name="user_email_old" type="hidden"/>
    <input id="letter_id" name="letter_id" type="hidden" value=""/>
    <input id="letter_email" name="letter_email" type="hidden" value=""/>
    <input id="letter_status" name="letter_status" type="hidden" value=""/>
    <table border="0" id="engine_table">
     <tr id="banner_tr">
      <td colspan="2" id="banner_td">
       <img border="0" galleryimg="no" id="banner_img" src="grafik/banner.jpg" style=""/>
      </td>
     </tr>
     <tr id="untertitle_tr">
      <td id="impressum_td">
       <a class="impressum_nav_anker" href="kontakt.html" style="">
        Kontakt
       </a>
       <label id="impressum_strich">
        |
       </label>
       <a class="impressum_nav_anker" href="impressum/ils1_links_basics_impr_hamacher_content1_uebersicht.html?side_test=0&amp;href_strg=" style="">
        Impressum
       </a>
      </td>
      <td id="untertitle_td">
       <h2 id="side_untertitle">
        Akupunktur und Hypnose in Koblenz
       </h2>
      </td>
     </tr>
     <tr id="inline_tr">
      <!-- Page engine.form.php -->
      <td id="navlist_td">
       <nav id="navigationsbereich">
        <table border="0" id="navlist_table">
         <tr class="nav_li_" id="nav_li_index" name="" style="">
          <td>
           <a class="nav_button_anker nav_button_aktiv" href="http://www.naturheilpraxis-hamacher.de" onmouseout="butt.nav_over_out('0','out','nav_button_aktiv')" onmouseover="butt.nav_over_out('0','over','nav_button_aktiv')" style="">
            <img border="0" class="nav_image" id="nav_image_0" src="grafik/dreieck.gif"/>
            <span class="nav_label ">
             Home
            </span>
           </a>
          </td>
         </tr>
         <tr class="nav_li_" id="nav_li_hypnose" name="" style="">
          <td>
           <a class="nav_button_anker nav_button_passiv" href="hypnose/psychosomatik_hypnose_aspekte_einfuehrung_content.html?side_test=0&amp;href_strg=napo__1" onmouseout="butt.nav_over_out('1','out','nav_button_passiv')" onmouseover="butt.nav_over_out('1','over','nav_button_passiv')" style="">
            <img border="0" class="nav_image" id="nav_image_1" src="grafik/dreieck_passiv.gif"/>
            <span class="nav_label ">
             Hypnose
            </span>
           </a>
          </td>
         </tr>
         <tr class="nav_li_" id="nav_li_akupunktur" name="" style="">
          <td>
           <a class="nav_button_anker nav_button_passiv" href="akupunktur/nhk_akupunktur_ursprung_content.html?side_test=0&amp;href_strg=napo__2" onmouseout="butt.nav_over_out('2','out','nav_button_passiv')" onmouseover="butt.nav_over_out('2','over','nav_button_passiv')" style="">
            <img border="0" class="nav_image" id="nav_image_2" src="grafik/dreieck_passiv.gif"/>
            <span class="nav_label ">
             Akupunktur
            </span>
           </a>
          </td>
         </tr>
         <tr class="nav_li_" id="nav_li_diagnostik" name="" style="">
          <td>
           <a class="nav_button_anker nav_button_passiv" href="diagnostik/ils1_links_praxis_diagnostik_content1_uebersicht.html?side_test=0&amp;href_strg=napo__3" onmouseout="butt.nav_over_out('3','out','nav_button_passiv')" onmouseover="butt.nav_over_out('3','over','nav_button_passiv')" style="">
            <img border="0" class="nav_image" id="nav_image_3" src="grafik/dreieck_passiv.gif"/>
            <span class="nav_label ">
             Diagnostik
            </span>
           </a>
          </td>
         </tr>
         <tr class="nav_li_" id="nav_li_therapie" name="" style="">
          <td>
           <a class="nav_button_anker nav_button_passiv" href="therapie/ils2_intro_therapie_allgemein_content2_intro.html?side_test=0&amp;href_strg=napo__4" onmouseout="butt.nav_over_out('4','out','nav_button_passiv')" onmouseover="butt.nav_over_out('4','over','nav_button_passiv')" style="">
            <img border="0" class="nav_image" id="nav_image_4" src="grafik/dreieck_passiv.gif"/>
            <span class="nav_label ">
             Therapie
            </span>
           </a>
          </td>
         </tr>
         <tr class="nav_li_" id="nav_li_gesundheit" name="" style="">
          <td>
           <a class="nav_button_anker nav_button_passiv" href="gesundheit/ils2_intro_gesundheit_allgemein_content2_intro.html?side_test=0&amp;href_strg=napo__5" onmouseout="butt.nav_over_out('5','out','nav_button_passiv')" onmouseover="butt.nav_over_out('5','over','nav_button_passiv')" style="">
            <img border="0" class="nav_image" id="nav_image_5" src="grafik/dreieck_passiv.gif"/>
            <span class="nav_label ">
             Gesundheit
            </span>
           </a>
          </td>
         </tr>
         <tr class="nav_li_" id="nav_li_krankheiten" name="" style="">
          <td>
           <a class="nav_button_anker nav_button_passiv" href="krankheiten/ils2_intro_krankheiten_allgemein_content2_intro.html?side_test=0&amp;href_strg=napo__6" onmouseout="butt.nav_over_out('6','out','nav_button_passiv')" onmouseover="butt.nav_over_out('6','over','nav_button_passiv')" style="">
            <img border="0" class="nav_image" id="nav_image_6" src="grafik/dreieck_passiv.gif"/>
            <span class="nav_label ">
             Krankheiten
            </span>
           </a>
          </td>
         </tr>
         <tr class="nav_li_" id="nav_li_nichtraucher" name="" style="">
          <td>
           <a class="nav_button_anker nav_button_passiv" href="nichtraucher/ils2_intro_konzepte_nichtraucher_content2_intro.html?side_test=0&amp;href_strg=napo__7" onmouseout="butt.nav_over_out('7','out','nav_button_passiv')" onmouseover="butt.nav_over_out('7','over','nav_button_passiv')" style="">
            <img border="0" class="nav_image" id="nav_image_7" src="grafik/dreieck_passiv.gif"/>
            <span class="nav_label ">
             Nichtrauchen
            </span>
           </a>
          </td>
         </tr>
         <tr class="nav_li_" id="nav_li_wir_ueber_uns" name="" style="">
          <td>
           <a class="nav_button_anker nav_button_passiv" href="wir_ueber_uns/k_r_praxis_karten_kontakt_content.html?side_test=0&amp;href_strg=napo__8" onmouseout="butt.nav_over_out('8','out','nav_button_passiv')" onmouseover="butt.nav_over_out('8','over','nav_button_passiv')" style="">
            <img border="0" class="nav_image" id="nav_image_8" src="grafik/dreieck_passiv.gif"/>
            <span class="nav_label ">
             Wir über uns
            </span>
           </a>
          </td>
         </tr>
         <tr class="nav_li_" id="nav_li_anfahrt" name="" style="">
          <td>
           <a class="nav_button_anker nav_button_passiv" href="anfahrt/ils1_links_basics_anfahrt_content1_uebersicht.html?side_test=0&amp;href_strg=napo__9" onmouseout="butt.nav_over_out('9','out','nav_button_passiv')" onmouseover="butt.nav_over_out('9','over','nav_button_passiv')" style="">
            <img border="0" class="nav_image" id="nav_image_9" src="grafik/dreieck_passiv.gif"/>
            <span class="nav_label ">
             Anfahrt
            </span>
           </a>
          </td>
         </tr>
         <tr class="nav_li_" id="nav_li_sitemap" name="" style="">
          <td>
           <a class="nav_button_anker nav_button_passiv" href="sitemap.html?side_test=0" onmouseout="butt.nav_over_out('10','out','nav_button_passiv')" onmouseover="butt.nav_over_out('10','over','nav_button_passiv')" style="">
            <img border="0" class="nav_image" id="nav_image_10" src="grafik/dreieck_passiv.gif"/>
            <span class="nav_label ">
             Sitemap
            </span>
           </a>
          </td>
         </tr>
        </table>
       </nav>
      </td>
      <td id="inline_td" style="vertical-align:top;background-color:#FFFFFF;">
       <table border="0" id="engine_inline_table">
        <tr>
         <td id="engine_inline_table_td">
          <table border="0" class="content_table" id="single_ausgabe_table">
           <tr id="content_col_tr">
            <td class="content_col_td col_txt_td">
             <table border="0" style="width:780px;">
              <tr>
               <td colspan="3" style="font-style:italic;font-weight:bold;text-align:left;padding-right:20px;">
                <br/>
                Gesundheit ist gewiss nicht alles, aber ohne Gesundheit ist alles nichts!
               </td>
              </tr>
              <tr>
               <td colspan="3" style="text-align:right;font-style:italic;font-weight:bold;padding-right:50px;">
                Schopenhauer
               </td>
              </tr>
              <tr>
               <td colspan="3" style="padding-top:15px;">
                Herzlich willkommen auf unserer Internetseite. Wir möchten Sie hier über unsere Naturheilpraxis informieren und laden Sie herzlich ein, für einen
                <strong>
                 kurzen Moment
                </strong>
                bei uns zu verweilen.
                <br/>
                Viele Besucher dieser Seite sind auf der Suche nach einem Therapeuten, weil sie erkrankt sind und wieder
                <strong>
                 gesund
                </strong>
                werden wollen.
                <br/>
                In 20 Jahren Erfahrung als Heilpraktiker hat sich immer wieder bestätigt, dass die eigentliche
                <strong>
                 Heilkraft
                </strong>
                nicht vom Therapeuten ausgeht, sondern bereits im Patienten vorhanden ist.
               </td>
              </tr>
              <tr>
               <td style="padding-right:25px;">
                <br/>
                Die Ursachen für Krankheiten, Sorgen und Probleme sind sicher vielfältig - ihre
                <strong>
                 Überwindung
                </strong>
                ist aber nur dann möglich, wenn der Erkrankte bereit ist, sich zu verändern und alte Muster zu durchbrechen.
                <br/>
                <br/>
                Die Schulmedizin klammert Fragen nach der
                <strong>
                 tieferen Ursachen
                </strong>
                und begünstigenden Faktoren einer Erkrankung in der Regel aus und bekämpft im Wesentlichen die Symptome der Krankheit.
               </td>
               <td style="vertical-align:top;padding-top:15px;">
                <img height="190" src="https://grafik.Naturheilpraxis-hamacher.de/praxis/drops_2.jpg" width="360"/>
               </td>
               <td style="width:10px;">
               </td>
              </tr>
              <tr>
               <td colspan="3" style="padding-top:15px;">
                _sprungpdf_Sie vernachlässigt die
                <strong>
                 inneren Heilkräfte
                </strong>
                und lässt die Patienten oft seelisch alleine. Sie kann und muß ergänzt werden durch eine Zuwendung von Mensch zu Mensch.
                <br/>
                <br/>
                Eine ernsthafte Naturheilkunde ist der Bereich der Medizin, der auf die
                <strong>
                 Selbstheilungskraft
                </strong>
                des Körpers hin ausgerichtet ist! Wenn diese Kraft aktiviert und gestärkt wird, dann ergänzt dies die Schulmedizin und unterstützt so die Heilung einer Krankheit.
                <br/>
                <br/>
                Die alternative Medizin ist deshalb kein Sektor der Wellnessbranche, wo mit schönen Worten und bunten Bildern viele Versprechungen gemacht werden. Der Patient wird nicht verwöhnt, sondern er wird ermutigt, für  das  eigene  Leben  und  die  eigene Gesundheit
                <strong>
                 aktiv
                </strong>
                Verantwortung zu übernehmen und neues
                <strong>
                 Selbstvertrauen
                </strong>
                zu entwickeln.
                <br/>
                <br/>
                Die Naturheilkunde ist bereit, diesen Weg mit dem Patienten zu gehen und zu den
                <strong>
                 Wurzeln  seiner Gesundheit
                </strong>
                zurückzukehren. So wird die elementare Lebenskraft gestärkt, um die Krankheit aus dieser unbewussten Kraftquelle zu überwinden.
                <br/>
                Auf den folgenden Seiten möchten wir Sie gerne über die von uns angewandten Heilverfahren informieren, vor allem über die
                <a class="bold" href="akupunktur/nhk_akupunktur_ursprung_content.html?side_test=0&amp;href_strg=napo__2" style="">
                 Akupunktur
                </a>
                und die
                <a class="bold" href="hypnose/psychosomatik_hypnose_aspekte_einfuehrung_content.html?side_test=0&amp;href_strg=napo__1" style="">
                 Hypnose
                </a>
                .
                <br/>
                <br/>
                Sollten Sie noch Fragen haben, dann rufen Sie uns an oder schreiben Sie uns eine
                <strong>
                 <a class="" href="kontakt.html" style="">
                  Email
                 </a>
                </strong>
                .
                <br/>
                <br/>
                Wir danken Ihnen herzlich für Ihr Interesse!
                <br/>
                <br/>
                <strong>
                 Ihre Naturheilpraxis Hamacher
                </strong>
               </td>
              </tr>
             </table>
            </td>
            <td class="content_col_td" id="col_middle_td">
            </td>
            <td class="content_col_td col_txt_td">
            </td>
           </tr>
          </table>
         </td>
        </tr>
        <tr style="display:none;">
         <td id="inline_bottom_td">
         </td>
        </tr>
       </table>
      </td>
     </tr>
     <!-- Ende inline_tr -->
     <tr>
      <td>
      </td>
      <td colspan="1" id="foot_td">
       <a class="foot_link" href="kontakt.html" style="">
        Kontakt
       </a>
       <label class="foot_strich">
        |
       </label>
       <a class="foot_link" href="http://www.naturheilpraxis-hamacher.de">
        Home
       </a>
       <label class="foot_strich">
        |
       </label>
       <a class="foot_link" href="impressum/ils1_links_basics_impr_hamacher_content1_uebersicht.html?side_test=0&amp;href_strg=" style="">
        Impressum
       </a>
       <label class="foot_strich">
        |
       </label>
       <a class="foot_link" href="impressum/ils1_seite/basics_impressum_datenschutz.html?side_test=0&amp;href_strg=lianz__5|lipo__2" style="">
        Datenschutz
       </a>
      </td>
     </tr>
    </table>
    <input id="side_input" name="side_input" type="hidden" value=""/>
    <input id="side_page" name="side_page" type="hidden" value="index"/>
    <input id="side_test" name="side_test" type="hidden" value=""/>
    <input id="letter_order_ctrl" name="letter_order_ctrl" type="hidden"/>
    <input id="password_captcha_img" name="password_captcha_img" type="hidden" value=""/>
    <input id="user_pass_check" name="user_pass_check" type="hidden" value=""/>
    <script type="text/javascript">
     var gloss = new Object();
 gloss._glossar_text = new Object();
 gloss._glossar_title = new Object();
 gloss._glossar_css = new Object();
 	
 	
 
 gloss.showGlossar = function showGlossar(id,css_strg)
 {//Einknoten Head-Textknoten
 	var name = "gloss.showGlossar(id='"+id+"', css_strg='"+css_strg+"')";
 	sensorr.test('name',name);
 	var test = sensorr.protocol(1);
 
 	
 	if( objj.create('glossar_table',name) != null )
 	{
 		if( test == true ) sensorr.test('Case','Glossar-Tabelle entfernt');
 		document.body.removeChild(objj.create('glossar_table',name));
 	}
 	
 	var table = document.createElement('table');
 	table.id = 'glossar_table';
 	document.body.appendChild(table);
 	
 	var tbdy = document.createElement('tbody');	
 	table.appendChild(tbdy);
 	
 	var cell = new Array();
 	var row = new Array();
 
 	for( var i=0; i < 3; i++ )
 	{
 		
 		row[i] = document.createElement('tr');
 		cell[i] = document.createElement('td');
 		row[i].appendChild(cell[i]);	
 		tbdy.appendChild(row[i]);			
 		
 		if( i == 0 )//Titel
 		{
 			if( test == true ) sensorr.test('Case','Titel');
 			cell[i].id = 'glossar_head';
 			if( test == true ) sensorr.test('ID',id);
 			if( test == true ) sensorr.test('Titel',this._glossar_title[id]);
 			if( sidee.test == true ) cell[i].appendChild(document.createTextNode(this._glossar_title[id]+" ("+id+")"));
 			else cell[i].appendChild(document.createTextNode(this._glossar_title[id]));
 		}
 		else if( i == 1 )//Text
 		{
 			if( test == true ) sensorr.test('Case','Text');
 			cell[i].id = 'glossar_text';
 			cell[i].className = 'glossar_td';
 			cell[i].insertAdjacentHTML('beforeend',this._glossar_text[id]);
 			//this.glossarText(this._glossar_text[id],cell[i].id);
 		}			
 		else if( i == 2 )//Fuß
 		{
 			if( test == true ) sensorr.test('Case','Fuß');
 			cell[i].id = 'glossar_bottom';
 			var txt = document.createTextNode('Schließen');
 			node = document.createElement('a');
 			node.style.fontSize = '11px';
 			node.appendChild(txt);
 			node.href = "javascript:gloss.hideGlossar()";
 			cell[i].appendChild(node);
 		}
 	}
 	
 	table.style['width'] = '350px';
 		
 	if( this._glossar_css[id] != null )//Einsetzen der normalen übergebenen CSS-Werte der Glossar-Page
 	{
 		if( test == true ) sensorr.test('Case','CSS-Strg. vom Glossar');
 		this.insertCSS('glossar_table',this._glossar_css[id],'normal')
 	}
 	
 	if( css_strg != null )//Einsetzen der normalen übergebenen CSS-Werte der aufrufenden Seite
 	{
 		if( test == true ) sensorr.test('Case','CSS-Strg. vom Link');
 		this.insertCSS('glossar_table', css_strg,'normal')
 	}
 	
 	var height = csss.getHeight('glossar_table');//Auslesen des realen Wertes
 	
 	var width = csss.getWidth('glossar_table');//Auslesen des realen Wertes	
 	
 	var top = (objj.mouseY-height-30);
 	
 	var left = (objj.mouseX-(width/2));	
 
 	table.style['top'] = top+'px';
 	
 	table.style['left'] = left+'px';	
 
 	if( this._glossar_css[id] != null )//Einsetzen der übergebenen Top-Left-CSS-Werte der Glossar-Page
 	{
 		if( test == true ) sensorr.test('Case','CSS-Top-Left-Werte vom Glossar');
 		this.insertCSS('glossar_table',this._glossar_css[id],'top_left',top,left)
 	}
 	
 	if( css_strg != null )//Einsetzen der übergebenen Top-Left-CSS-Werte der aufrufenden Seite
 	{
 		if( test == true ) sensorr.test('Case','CSS-Top-Left-Werte vom Link');
 		this.insertCSS('glossar_table', css_strg,'top_left',top,left)
 	}
 
 }
 
 gloss.insertCSS = function insertCSS(id,val,modus,top,left)//Val: width:300px;height:200px; | modus: normal vs. top_left
 {//Fkt. existiert auch bei csss, ist hier eingesetzt, um gloss alleine betreiben zu können.
 	var name = "gloss.insertCSS(id='"+id+"',val='"+val+"',modus = '"+modus+"',top='"+top+"',left='"+left+"')";
 	var test = sensorr.protocol(1);	
 	if( test == true ) sensorr.test('name',name);
 	
 	var _val = val.split(/;/g);
 	
 	var obj = objj.create(id,name);
 	
 	var _css = Array();
 	for( var i=0; i < _val.length; i++ )
 	{
 		if( test == true ) sensorr.test('Wert',_val[i]);
 		
 		if( _val[i] != '' )
 		{
 			_css[i] = _val[i].split(/:/);
 			
 			if( test == true ) sensorr.test('Prop',_css[i][0]);
 			if( test == true ) sensorr.test('Val',_css[i][1]);
 			
 			if( modus == 'normal' )
 			{
 				if( ( _css[i][0] != 'top' ) && ( _css[i][0] != 'left') )
 				{
 					obj.style[_css[i][0]] = _css[i][1];
 				}
 			}
 			else if( modus == 'top_left' )
 			{
 				_css[i][1] = _css[i][1].replace(/px/,'');
 				
 				if( _css[i][0] == 'top' )
 				{
 					var new_top = top + _css[i][1]*1;
 					if( test == true ) sensorr.test('New-Top',new_top);
 					obj.style[_css[i][0]] = (new_top)+'px';
 				}
 				else if( _css[i][0] == 'left' )
 				{
 					var new_left = left + _css[i][1]*1;
 					if( test == true ) sensorr.test('New-Left',new_left);					
 					obj.style[_css[i][0]] = (new_left)+'px';
 				}
 			}
 		}	
 	}
 }
 
 gloss.glossarText = function glossarText(txt,id)
 {
 	var name = "gloss.glossarText(txt ,id='"+id+"')";
 	sensorr.test('name',name);
 	var test = sensorr.protocol();
 	if( test == true ) sensorr.test('Text',txt);
 	
 	txt_ar = txt.split('<br>');//Array der Knoten erstellen
 	parent_node = objj.create(id,name);
 	if( test == true ) sensorr.test('Anzahl Zeilensprünge',txt_ar.length);
 	for( var i=0; i < txt_ar.length; i++ )
 	//for( var i=0; i < 8; i++ )//Schleifenbegrenung zu Testzwecken
 	{		
 		if( txt_ar[i] == '' )
 		{
 			if( test == true ) sensorr.test('Case 1');
 			if( i > 0 )//Kontrolle des 1. Zeilensprungs
 			{
 				domm.createLeerzeile(parent_node);
 			}
 		}
 		else
 		{
 			if( test == true ) sensorr.test('Case 2');
 			if( i > 0 )//Kontrolle des 1. Zeilensprungs
 			{
 				if( test == true ) sensorr.test('Case 2a');
 				domm.createLeerzeile(parent_node);
 			}
 			domm.weicheStrong(parent_node,txt_ar[i]);
 		}
 	}
 }
 
 gloss.hideGlossar = function hideGlossar()
 {
 	var name = "gloss.hideGlossar()";
 	sensorr.test('name',name);
 	var table = objj.create('glossar_table',name);
 	document.body.removeChild(table);
 }
 
 gloss.anzeigen = function anzeigen(top, left, width, text)
 {
 	var name = 'gloss.anzeigen('+top+','+left+','+width+','+text+')';
 	sensorr.test('Name',name);
 	
 	var glossar = objj.create("glossar",name);
 	glossar.style.left = left+'px'; 
 	glossar.style.top = top+'px'; 
 	glossar.style.width = width+'px'; 			
 	glossar.style.visibility = "visible";	
 
 	this.insertText(text);
 	sensorr.test('Ende');
 }
 
 gloss.ausblenden = function ausblenden()
 {
 	var name = 'gloss.ausblenden()';
 	objj.create("glossar",name).style.visibility = "hidden";
 }
 
 gloss.insertText = function insertText(text)
 {
 	var name = "gloss.insertText(text == '"+text+"')";
 	//alert(name);
 	var i, flag;
 	
 	var glossar = objj.create('glossar',name);
 	var boldtext, normaltext, span, textnode;
 
 	text_ar = text.split("<strong>");
 	
 	glossar.removeChild(objj.create('glossartext',name));
 	var glossartext = document.createElement('span');
 	glossartext.id = 'glossartext';
 	glossar.appendChild(glossartext);
 	
 
 	for( i=0; i < text_ar.length; i++ )
 	{
 		//alert(text_ar[i]);
 		if( text_ar[i].search(/<\/strong>/) > 0 )
 		{
 			split_ar = text_ar[i].split("</strong>");
 			boldtext = document.createTextNode(split_ar[0]);
 			//alert("Bold"+split_ar[0]);
 			span = document.createElement('span');				
 			span.appendChild(boldtext);
 			
 			glossartext.appendChild(span);
 			span.style.fontWeight = 'bold';
 			normaltext = document.createTextNode(split_ar[1]);
 			glossartext.appendChild(normaltext);
 		}
 		else
 		{
 			//alert("Not-Bold"+text_ar[i]);
 			textnode = document.createTextNode(text_ar[i]);
 			glossartext.appendChild(textnode);			
 		}
 	}	
 }
    </script>
    <script>
     objj.captureClick();
    </script>
   </form>
  </body>
 </html>