<html>
  <head>
   <title>
    Smalltalk по-русски
   </title>
   <style>
    body{margin:0px 0px 0px 0px;font-family:verdana, trebuchet ms, sans-serif;background-color:white;}
 #Title{font-size:33px;padding-left:15px;padding-top:10px;text-transform:uppercase;font-family:verdana, trebuchet ms, sans-serif;}
 #Title a {text-decoration:none;color:inherit;}
 #Description{padding:0px;padding-top:10px;font-size:12px;font-weight:normal}
 .DateHeader{border-bottom:none;font-size:13px;text-align:left;margin-top:20px;margin-bottom:14px;padding:1px;padding-left:17px;color:gray;font-family:verdana, trebuchet ms, sans-serif;}
 .PostTitle{font-size:14px;font-weight:bold}
 .Post{font-size:12px;padding-left:20px;margin-bottom:20px;text-indent:10px;padding-right:20px;line-height:22px}
 .PostFooter{margin-bottom:15px;margin-left:0px;color:black;font-size:10px}
 .subheader{font-size:12px;font-weight:bold}
 #leftcontent{background-color:whitesmoke;border-right:10px solid #fff;border-bottom:0px dashed #000;float:left; padding-bottom:20px;margin-right:15px;padding:0px;width:67%;border-top:0px dashed #000}
 .SideBarTitle{font-weight:bold;font-size:16px}
 h1{font-size:12px;padding-top:10px}
 
 a{text-decoration:none}
 a:hover{border-bottom:dashed 1px red}
 ul{margin-top: 0px; margin-bottom: 5px;}
 #rightcontent{width:23%;float:left;font-size:12px;height:100%;margin-left:0px;text-transform:none;padding-right:10px;background-color:white;}
 .blogComments{font-size:13px;text-align:left;margin-top:20px;margin-bottom:14px;padding:1px;padding-left:17px;color:gray;font-family:verdana, trebuchet ms, sans-serif;}
 .blogComment{margin-top:10px;margin-bottom:10px;color:black;text-indent:10px;padding-right:20px;line-height:22px}
 .deleted-comment {font-style:italic;color:gray;}
 .byline{margin-bottom:20px;margin-left:0px;margin-right:10px;color:black;font-size:10px;display:inline}
 #profile-container {}
 .profile-datablock { }
 .profile-img {display:inline;}
 .profile-img img {float:left;margin:0 10px 0px 0;border:4px solid #ccc;}
 #profile-container p {}
 #profile-container .profile-textblock { }
 .profile-data strong {display:block;}
 pre {text-indent:0px; background: #ffffe0; padding-left: 40px;}
 .g {color:#080}
 .g:before {content: '"'}
 .g:after {content: '"'}
   </style>
   <!-- Meta Information -->
   <script type="text/javascript">
    (function() { var a=window;function c(b){this.t={};this.tick=function(d,i,e){e=e?e:(new Date).getTime();this.t[d]=[e,i]};this.tick("start",null,b)}var f=new c;a.jstiming={Timer:c,load:f};try{var g=null;if(a.chrome&&a.chrome.csi)g=Math.floor(a.chrome.csi().pageT);if(g==null)if(a.gtbExternal)g=a.gtbExternal.pageT();if(g==null)if(a.external)g=a.external.pageT;if(g)a.jstiming.pt=g}catch(h){};a.tickAboveFold=function(b){b=b;var d=0;if(b.offsetParent){do d+=b.offsetTop;while(b=b.offsetParent)}b=d;b<=750&&a.jstiming.load.tick("aft")};var j=false;function k(){if(!j){j=true;a.jstiming.load.tick("firstScrollTime")}}a.addEventListener?a.addEventListener("scroll",k,false):a.attachEvent("onscroll",k); })();
   </script>
   <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
   <meta content="true" name="MSSmartTagsPreventParsing"/>
   <meta content="Blogger" name="generator"/>
   <link href="http://www.blogger.com/favicon.ico" rel="icon" type="image/vnd.microsoft.icon"/>
   <link href="http://www.smalltalk.ru/feed/atom.xml" rel="alternate" title="Smalltalk по-русски - Atom" type="application/atom+xml"/>
   <link href="http://www.smalltalk.ru/feed/rss.xml" rel="alternate" title="Smalltalk по-русски - RSS" type="application/rss+xml"/>
   <link href="http://www.blogger.com/feeds/7589481/posts/default" rel="service.post" title="Smalltalk по-русски - Atom" type="application/atom+xml"/>
   <link href="http://www.blogger.com/rsd.g?blogID=7589481" rel="EditURI" title="RSD" type="application/rsd+xml"/>
   <link href="http://www.blogger.com/static/v1/v-css/50269083-blog_controls.css" rel="stylesheet" type="text/css"/>
   <link href="http://www.blogger.com/dyn-css/authorization.css?targetBlogID=7589481&amp;zx=9037ded2-6614-4b52-95c8-076c468cf211" rel="stylesheet" type="text/css"/>
   <script src="http://www.blogger.com/static/v1/v-js/1188848481-backlink.js" type="text/javascript">
   </script>
   <script src="http://www.blogger.com/static/v1/v-js/463928704-backlink_control.js" type="text/javascript">
   </script>
   <script type="text/javascript">
    var BL_backlinkURL = "http://www.blogger.com/dyn-js/backlink_count.js";var BL_blogId = "7589481";
   </script>
   <link href="http://www.blogger.com/openid-server.g" rel="openid.server"/>
  </head>
  <body>
   <div id="leftcontent">
    <div id="Title">
     Smalltalk по-русски
    </div>
    <div class="DateHeader">
     среда, Октябрь 08, 2008
    </div>
    <div class="Post">
     <a name="65326284433029843">
     </a>
     <span class="PostTitle">
      [Squeak] Squeak "multi-vm"
     </span>
     <div class="blogPost">
      <div style="clear:both;">
      </div>
      <p>
       <a href="http://domino.research.ibm.com/comm/research_people.nsf/pages/ssadams.index.html">
        Сэм Адамс (Sam S. Adams) из IBM Research
       </a>
       и
       <a href="http://en.wikipedia.org/wiki/David_Ungar">
        Дэвид Унгар* (David Ungar)
       </a>
       собираются на
       <a href="http://news.squeak.org/2008/10/07/squeak-bof-at-oopsla-2008/">
        Squeak BOF at OOPSLA 2008
       </a>
       представить разработанную в рамках "
       <a href="http://domino.watson.ibm.com/comm/research.nsf/pages/r.plansoft.seminars.html">
        Renaissance Project
       </a>
       " ВМ "
       <a href="http://wiki.squeak.org/squeak/1107">
        multi-vm
       </a>
       " - ВМ Squeak способную работать на 56 из 64 ядер процессора
       <a href="http://www.tilera.com/products/TILE64.php">
        Tilera64
       </a>
       . Другие подробности пока не известны, так что почему именно 56 ядер пока не ясно (часть ядер вероятно занята системными функциями, типа планировщика или сборки мусора).
      </p>
      <p>
       * - в инете можно найти разные транскрипции фамилии Ungar: "
       <a href="http://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%B5%D1%80,_%D0%A1%D1%82%D1%8E">
        Ангер
       </a>
       ", "
       <a href="http://www.film.ru/afisha/person.asp?name=%C3%FD%F0%E8+%D3%ED%E3%E0%F0">
        Унгар
       </a>
       ". Мне более уместным кажется "Унгар", но как правильно я не уверен.
      </p>
      <p align="right">
       <i>
        Из блога "
        <a href="http://astares.blogspot.com/2008/10/squeak-multi-vm.html">
         The Hitchhiker's Guide to ...
        </a>
        ".
       </i>
      </p>
      <div style="clear:both; padding-bottom:0.25em">
      </div>
      <p class="blogger-labels">
       Ярлыки:
       <a href="http://www.smalltalk.ru/labels/squeak.html" rel="tag">
        squeak
       </a>
      </p>
     </div>
     <div class="byline">
      <a href="http://www.smalltalk.ru/2008/10/squeak-squeak-multi-vm.html" title="permanent link">
       #
      </a>
      posted by Andrei N.Sobchuck @ 2:13 PM
      <a href="http://www.smalltalk.ru/2008/10/squeak-squeak-multi-vm.html">
       1 comments
      </a>
     </div>
    </div>
    <div class="DateHeader">
     понедельник, Октябрь 06, 2008
    </div>
    <div class="Post">
     <a name="597062269701831573">
     </a>
     <span class="PostTitle">
      [Squeak] Sophie переходит на Java
     </span>
     <div class="blogPost">
      <div style="clear:both;">
      </div>
      <p>
       <a href="http://www.sophieproject.org/">
        Sophie
       </a>
       - это проект по разработке нового вида электронных книг, использующих мультимедиа возможности современных компьютеров. Совершенно недавно разработка достигла версии 1.0. Версия 2.0
       <a href="http://lists.gforge.inria.fr/pipermail/pharo-project/2008-September/001840.html">
        будет полностью написана с нуля на Java
       </a>
       . Подрядчиком стала болгарская фирма
       <a href="http://asteasolutions.com/">
        Astea Solutions
       </a>
       .
      </p>
      <p>
       Проект финансируется
       <a href="http://www.mellon.org/">
        The Andrew W. Mellon Foundation
       </a>
       и
       <a href="http://ask.slashdot.org/comments.pl?sid=984735&amp;cid=25252253">
        основной причиной смены технологии со Squeak на Java стала невозможность организовать сообщество разработчиков вокруг Sophie
       </a>
       . Так как очень мало людей знающих и желающих работать со Smalltalk. И в Фонде Мелона ожидают, что майнстримовый язык программирования поможет образованию сообщества.
      </p>
      <p>
       Ожидается, что
       <a href="http://asteasolutions.net/official/Our_Projects.html">
        Sophie 2
       </a>
       сможет понимать формат Sophie 1. Текущий интерфейс будет взят за основу и текущий функционал будет не переделан, а дополнен и расширен. Исходники же Sophie 1 открыты и доступны на сайте
       <a href="http://opensophie.org/">
        opensophie.org
       </a>
       . И возможно проект на Squeak получит некое продолжение.
      </p>
      <div style="clear:both; padding-bottom:0.25em">
      </div>
      <p class="blogger-labels">
       Ярлыки:
       <a href="http://www.smalltalk.ru/labels/squeak.html" rel="tag">
        squeak
       </a>
      </p>
     </div>
     <div class="byline">
      <a href="http://www.smalltalk.ru/2008/10/squeak-sophie-java.html" title="permanent link">
       #
      </a>
      posted by Andrei N.Sobchuck @ 3:30 PM
      <a href="http://www.smalltalk.ru/2008/10/squeak-sophie-java.html">
       2 comments
      </a>
     </div>
    </div>
    <div class="DateHeader">
     пятница, Сентябрь 26, 2008
    </div>
    <div class="Post">
     <a name="4175516519051071631">
     </a>
     <span class="PostTitle">
      [Dolphin] Дельфин - жил, Дельфин - жив, Дельфин - будет жить???
     </span>
     <div class="blogPost">
      <div style="clear:both;">
      </div>
      <p>
       Многие вероятно успели пустить слезу по
       <a href="http://www.smalltalk.ru/2008/01/dolphin-61.html">
        потерявшему перспективу Dolphin
       </a>
       . Однако ситуация развивается. Старый, заслуживший любовь многих Dolphin таки - "всё" окончательно и бесповоротно, однако,
       <a href="http://www.object-arts.com/content/news/excitingNews.html" title="Анонс новости о выходе нового диалекта Dolphin">
        он послужит удобрением для нового улучшенного Dolphin - Dolphin Next Generation
       </a>
       .
      </p>
      <p>
       Разработкой Dolphin Next Generation (DNG) займётся Lesser Software. Lesser software - разработчики
       <a href="http://www.lesser-software.com/en/flavours/frames/default.htm">
        LSW Vision Smalltalk (LSWVST)
       </a>
       , диалекта
       <a href="http://ru.smalltalk.wikia.com/wiki/Visual_Smalltalk_Enterprise">
        Visual Smalltalk Enterprise (VSE)
       </a>
       . Lesser Software уже была засветилась
       <a href="/news-03-01.html">
        в наших новостях в 2003
       </a>
       . Примерно тогда же они собирались выпустить общедоступный вариант своего диалекта ST для .Net, но, очевидно, до коммерческого уровня довести его не смогли. Результат с DNG похоже будет положительный, так как
       <a href="http://www.object-arts.com/content/navigation/products/dng.html">
        многие части от Dolphin X6 уже запускаются на ВМ от LSWVST - Vision VM
       </a>
       .
      </p>
      <p>
       Новый диалект будет совместим по байткодам с VSE (из-за Vision VM). С Dolphin X6 будет совместимость на уровне исходных кодов. В продукт будет входить вся библиотека классов от Dolphin X6, включая
       <a href="http://www.smalltalk.ru/articles/model-view-presenter.html">
        MVP
       </a>
       . Бонус Vision VM: JIT, многонитевость ВМ, поддержка 64 бит ОС.
      </p>
      <p>
       Среди примеров применения как Dolphin так и VSE на территории ex-СССР есть
       <a href="http://www.tvcom.ru/">
        ОАО ТелеNET, г.Тверь, Россия
       </a>
       с биллингом на Dolphin Smalltalk,
       <a href="http://www.objectland.ru/">
        ЗАО Радом-Т, г. Таганрог, Россия
       </a>
       с ГИС ObjectLand на Visual Smalltalk Enterprise.
      </p>
      <div style="clear:both; padding-bottom:0.25em">
      </div>
      <p class="blogger-labels">
       Ярлыки:
       <a href="http://www.smalltalk.ru/labels/dolphin.html" rel="tag">
        dolphin
       </a>
       ,
       <a href="http://www.smalltalk.ru/labels/new%20version.html" rel="tag">
        new version
       </a>
      </p>
     </div>
     <div class="byline">
      <a href="http://www.smalltalk.ru/2008/09/dolphin.html" title="permanent link">
       #
      </a>
      posted by Andrei N.Sobchuck @ 11:54 AM
      <a href="http://www.smalltalk.ru/2008/09/dolphin.html">
       3 comments
      </a>
     </div>
    </div>
    <div class="DateHeader">
     среда, Сентябрь 24, 2008
    </div>
    <div class="Post">
     <a name="419378807971877491">
     </a>
     <span class="PostTitle">
      Pier 1.0.17 - CMS на Seaside. Людьми и для людей
     </span>
     <div class="blogPost">
      <div style="clear:both;">
      </div>
      <p>
       Вышла
       <a href="http://lists.squeakfoundation.org/pipermail/squeak-dev/2008-September/131633.html" title="Анонс Pier 1.0.17">
        новая версия Pier
       </a>
       - CMS на Seaside. Pier является второй версией
       <a href="http://smallwiki.unibe.ch/smallwiki">
        SmallWiki
       </a>
       . Лицензия - MIT.
      </p>
      <p>
       <a href="http://www.piercms.com/doc/examples">
        Примеры сайтов где используется Pier
       </a>
       можно найти на
       <a href="http://www.piercms.com" title="Домашний сайт Pier">
        домашнем сайте
       </a>
       , естественно управляемом самой Pier. "Естественно" - потому, что принцип использования собственных технологий широко распространён в сообществе ST.
      </p>
      <p>
       Из примеров: сообщество разработчиков Squeak долгое время обслуживалось
       <a href="http://en.wikipedia.org/wiki/Swiki">
        Swiki
       </a>
       . Сейчас
       <a href="http://www.squeak.org/">
        squeak.org
       </a>
       работает на SmallWiki, однако куча информации для разработчиков можно найти только на различных
       <a href="http://wiki.squeak.org/squeak">
        swiki
       </a>
       . Репозитории проектов для Squeak -
       <a href="http://www.squeaksource.com">
        SqueakSource
       </a>
       работают на Squeak/Seaside.
      </p>
      <p>
       <a href="http://live.exept.de/">
        Документация по Smalltalk/X
       </a>
       хостится на ST/X.
      </p>
      <p>
       Сообщество VisualWorks долгое время поддерживается
       <a href="http://www.cincomsmalltalk.com/CincomSmalltalkWiki">
        wiki на  VisualWorks
       </a>
       .
       <a href="http://www.cincomsmalltalk.com/userblogs">
        Блоги по VW
       </a>
       - написаны на VW продакт менеджером(!).
      </p>
      <p>
       Такая ситуация во многом возникла благодаря традиции не опускать руки при отсутствии каких-то инструментов, а создавать их самому. И эти созданные для себя инструменты зачастую двигали сообщество вперёд. Например, когда Ави Браянту понадобился инструментарий для быстрой разработки web-приложений он разработал
       <a href="http://www.seaside.st/about/history" title="История Seaside">
        Seaside
       </a>
       , понадобилась система контроля версий - он создал
       <a href="http://www.wiresong.ca/Monticello/">
        Monticello
       </a>
       . Менее известный пример - это
       <a href="http://www.cincomsmalltalk.com/BottomFeeder/">
        RSS агрегатор BottomFeeder
       </a>
       , разработанный Джеймсом Робертсоном, продакт менеджером Cincom Smalltalk. Разрабатывать BottomFeeder Джеймс начал только для того, чтобы понять стоил ли только возникший тогда RSS какого либо внимания. Значительно продвинул всю индустрию программирования
       <a href="http://st-www.cs.uiuc.edu/users/brant/Refactory/">
        RefactoringBrowser
       </a>
       разработанный Кентом Беком. Да и сам Smalltalk появился во многом потому, что Алану Кею нужен был инструмент для обучения детей. А отсутствие удобного средства разработки после ухода из Xerox привело Алана к созданию
       <a href="http://users.ipa.net/~dwighth/squeak/oopsla_squeak.html">
        Squeak
       </a>
       . В свете этого мне кажется логичным, что wiki, как таковое, придумал именно
       <a href="http://en.wikipedia.org/wiki/Ward_Cunningham" title="Кто такой Ward Cunningham">
        smalltalk-ер
       </a>
       .
      </p>
      <p>
       Ваши примеры?
      </p>
      <p>
       <i>
        PS. Pier 1.0.17 работает на
        <a href="http://www.smalltalk.ru/2007/05/gemstone-gemstone.html">
         GLASS
        </a>
        и будет поставлятся
        <a href="http://gemstonesoup.wordpress.com/2008/09/25/pier-on-glass/">
         вместе с GemStone/S 64 version 2.3
        </a>
        .
       </i>
      </p>
      <div style="clear:both; padding-bottom:0.25em">
      </div>
     </div>
     <div class="byline">
      <a href="http://www.smalltalk.ru/2008/09/pier-1017-cms-seaside.html" title="permanent link">
       #
      </a>
      posted by Andrei N.Sobchuck @ 10:08 PM
      <a href="http://www.smalltalk.ru/2008/09/pier-1017-cms-seaside.html">
       1 comments
      </a>
     </div>
    </div>
    <div class="DateHeader">
     воскресенье, Сентябрь 21, 2008
    </div>
    <div class="Post">
     <a name="3390682313549587427">
     </a>
     <span class="PostTitle">
      Smalltalk и Все-Все-Все: Белка-Рыба наносит ответный удар
     </span>
     <div class="blogPost">
      <div style="clear:both;">
      </div>
      <center>
       <img alt="Лого движка SquirrelFish" src="/images/squirrelfish.png"/>
      </center>
      <p>
       Не успел я запостить
       <a href="/2008/09/smalltalk.html">
        статью об оптимизациях как в ST так и современных JavaScript-движках
       </a>
       , как появилось дополнение:
       <a href="http://www.opennet.ru/opennews/art.shtml?num=17997">
        Apple выпустила SquirrelFish Exterme
       </a>
       (SFX). Если SF был просто хорошим интерпретатором, то SFX продвинулся далеко вперёд.
      </p>
      <p>
       И так, SFX использует:
      </p>
      <ul>
       <li>
        Оптимизации в байткоде.
       </li>
       <li>
        PIC.
       </li>
       <li>
        JIT.
       </li>
       <li>
        JIT для регулярных выражений.
       </li>
      </ul>
      <p>
       JIT для регулярных выражений нас сейчас не интересует. Просто JIT - это понятно (Кстати, JIT в SFX не использует
       <a href="http://llvm.org/">
        LLVM
       </a>
       , возможно по соображениям скорости кодогенерации).
      </p>
      <p>
       Что такое PIC мы уже рассмотрели. Хотя и тут есть один момент. В ST реализовать PIC относительно просто - ведь, не смотря на динамичность языка, существующие классы относительно стабильны и объекты принадлежат одному и тому же классу. В JS (и, тем более, в Self) же схема любого объекта может быть изменена на лету. Что равносильно в ST порождению новых классов. В V8 эту проблему решают введением скрытых классов на которые мапяться объекты с одинаковыми схемами. В SFX похоже используется аналогичная техника: каждый объект имеет некий
       <a href="http://trac.webkit.org/browser/trunk/JavaScriptCore/kjs/StructureID.h">
        StructureID
       </a>
       . Объекты имеющие одну и ту же схему имеют один и тот же
       <i>
        StructureID
       </i>
       . Соответственно, диспетчер в PIC проверяет совпадение
       <i>
        StructureID
       </i>
       .
      </p>
      <p>
       А вот оптимизации в байткоде мы еще не рассматривали. Эти оптимизации появились еще в оригинальном ST-80 (если не раньше, в ST-76) и призваны были соптимизировать диспетчеризацию сообщений наряду с глобальным кешем методов (что это - рассказано в предыдущей заметке). Эти оптимизации включают в себя "
       <i>
        специальные селекторы
       </i>
       " и "
       <i>
        статические предсказания типов
       </i>
       ".
      </p>
      <p>
       <i>
        Спецселекторы
       </i>
       это скорее не классическая оптимизация, а читерство. Суть оптимизации в инлайнинге базовых управляющих потоком выполнения структур (простите за косноязычее, но как сказать проще я не знаю).  Т.е. ряд посылок сообщений компилируется не в обычную посылку сообщения, а сразу в байткод. Пример в Squeak. Вызов любого метода, например "
       <i>
        true hash
       </i>
       " компилируется в такой байткод:
      </p>
      <pre>
   pushConstant: true
   send: hash
 </pre>
      А "
      <i>
       true ifTrue: [self hash]
      </i>
      " компилируется в:
      <pre>
   pushConstant: true
   jumpFalse: 22
   self
   send: hash
 </pre>
      Т.е. при этом не создаётся блок и используется не реальная посылка сообщения, а генерируется некий спецбайткод. Это приводит к ряду эффектов. Первый - это ускорение. Второй - если выполнить код "
      <i>
       1 ifTrue: [self hash]
      </i>
      ", то вы получите не исключение "
      <i>
       MessageNotUnderstood
      </i>
      ", а "
      <i>
       NonBooleanReceiver
      </i>
      ". Третий эффект заключается в том, что если поменять имплементацию метода, например, в классе
      <i>
       True
      </i>
      , то на поведении программы это не скажется. Так же бесполезно добавлять метод "
      <i>
       ifTrue:
      </i>
      "  в другие классы - поскольку сообщение такое не посылается, то и вызвать такой метод без рефлексии в обычном случае не получится. И, напоследок, вызвать такой спецметод можно всё таки не только через рефлексию. Реальная посылка сообщения генерируется и если компилятор не может проинлайнить блок кода. Например, "
      <i>
       1 ifTrue: aBlock
      </i>
      " генерирует:
      <pre>
   pushConstant: true
   pushTemp: 0
   send: ifTrue:
 </pre>
      Отсюда мораль: менять такие спецметоды не стоит, во избежание всяческих чудес в поведении программы. Набор спецселекторов обычно влючает в себя "
      <i>
       ifTrue:ifFalse
      </i>
      ", "
      <i>
       on:do:
      </i>
      ", "
      <i>
       timesRepeat:
      </i>
      ", "
      <i>
       whileTrue:
      </i>
      ". Подробнее о спецселекторах можно прочитать в
      <a href="/articles/st-compiler.html">
       статье об устройстве компилятора в ST
      </a>
      в разделе "Заинлайненный (почти) ifNil: (VW)".
      <p>
       <i>
        Статические предсказания типов
       </i>
       это уже именно оптимизация, а не грубый чит. Он основан на статистике, что большая доля сообщений таких как "
       <i>
        +
       </i>
       " имеет одинаковые классы, как у получателя так и аргумента. Соответсвенно, реализация таких методов - это примитив, который проверяет тип аргумента. Выглядит в Squeak это так:
      </p>
      <pre>
 SmallInteger&gt;&gt;+ aNumber 
   "Primitive. Add the receiver to the argument and answer with the result
   if it is a SmallInteger. Fail if the argument or the result is not a
   SmallInteger  Essential  No Lookup. See Object documentation  whatIsAPrimitive."
 
   &lt;primitive: 1&gt;
   ^ super + aNumber
 
 Float&gt;&gt;+ aNumber 
   "Primitive. Answer the sum of the receiver and aNumber. Essential.
   Fail if the argument is not a Float. See Object documentation
   whatIsAPrimitive."
 
   &lt;primitive: 41&gt;
   ^ aNumber adaptToFloat: self andSend: #+
 </pre>
      <br/>
      <i>
       В ST традиционно, если примитив отрабатывает нормально, то возврата из него не происходит. Т.е. на ST код после примитива управление переходит только если примитив провалился.
      </i>
      <br/>
      Соответсвенно примитив отрабатывает быстро, если предсказание типа было успешным и медленне, если нет. Пример из Squeak:
      <pre>
 Time millisecondsToRun: [10000000 timesRepeat: [1 + 1]]   "1)=&gt;  697"
 Time millisecondsToRun: [10000000 timesRepeat: [5.0 + 1]] "2)=&gt; 2303"
 Time millisecondsToRun: [10000000 timesRepeat: [1 + 5.0]] "3)=&gt; 2408"
 </pre>
      С первым случаем всё понятно - предсказание типов успешное и код отрабатывает почти в 4 раза быстрее, чем во 2-м и 3-м случаях. А вот почему 2-й вариант быстрее 3-го? Во втором случае трасса такая:
      <pre>
 Float&gt;&gt;+
 Number&gt;&gt;adaptToFloat:andSend:
 Float&gt;&gt;+
 </pre>
      В третьем же варианте, трасса больше на одну отправку сообщения:
      <pre>
 SmallInteger&gt;&gt;+ 
 Integer&gt;&gt;+
 Float&gt;&gt;adaptToInteger:andSend:
 Float&gt;&gt;+
 </pre>
      В VW реализация кардинально другая, но разница в скорости там еще более заметна:
      <pre>
 Time millisecondsToRun: [10000000 timesRepeat: [1 + 1]]   "1) =&gt;  38"
 Time millisecondsToRun: [10000000 timesRepeat: [5.0 + 1]] "2) =&gt; 120"
 Time millisecondsToRun: [10000000 timesRepeat: [1 + 5.0]] "3) =&gt; 289"
 </pre>
      <p>
       <a href="http://webkit.org.nyud.net:8090/blog/214/introducing-squirrelfish-extreme/">
        Судя по короткому описанию
       </a>
       именно подобие "статического предсказания типов" и реализовано в SFX.
      </p>
      <div style="clear:both; padding-bottom:0.25em">
      </div>
      <p class="blogger-labels">
       Ярлыки:
       <a href="http://www.smalltalk.ru/labels/inside_st.html" rel="tag">
        inside_st
       </a>
      </p>
     </div>
     <div class="byline">
      <a href="http://www.smalltalk.ru/2008/09/smalltalk_21.html" title="permanent link">
       #
      </a>
      posted by Andrei N.Sobchuck @ 2:50 PM
      <a href="http://www.smalltalk.ru/2008/09/smalltalk_21.html">
       5 comments
      </a>
     </div>
    </div>
    <div class="DateHeader">
     четверг, Сентябрь 18, 2008
    </div>
    <div class="Post">
     <a name="5890356565581222782">
     </a>
     <span class="PostTitle">
      Smalltalk и Все-Все-Все
     </span>
     <div class="blogPost">
      <div style="clear:both;">
      </div>
      <p>
       В последнее время как-то одновременно появились анонсы "быстрого JavaScript" сразу в трёх броузерах: FireFox 3.1 с движком
       <a href="http://weblogs.mozillazine.org/roadmap/archives/2008/08/tracemonkey_javascript_lightsp.html" text="Анонс JavaScript-движка TraceMonkey">
        TraceMonkey
       </a>
       , новоявленный GoogleChrome с движком
       <a href="http://code.google.com/apis/v8/design.html" text="Описание сущности оптимизаций в V8">
        V8
       </a>
       и Safari 4 с движком
       <a href="http://webkit.org/blog/189/announcing-squirrelfish/" text="Анонс SquirrelFish с кратким описанием устройства">
        SquirrelFish
       </a>
       .
      </p>
      <p>
       Казалось бы, при чем здесь Smalltalk?
      </p>
      <p>
       Тут нужно коротко изложить как развивались ВМ для ST. Первые версии ST, которые работали на
       <a href="http://en.wikipedia.org/wiki/Xerox_Alto">
        Xerox Alto и Xerox Dorado
       </a>
       были реализованы на микрокоде. Затем, с портированием ST на другие платформы появилась "классическая" ВМ исполняющая байткоды. Как я понимаю, именно с появлением ВМ проблема производительности встала в полный рост. Так, например, известно
       <a href="http://acmqueue.com/modules.php?name=Content&amp;pa=showpage&amp;pid=273&amp;page=3">
        утверждение Алана Кея в интервью за конец 2004г
       </a>
       , что текущие процессоры исполняют ST всего в 50 раз быстрее чем Dorado. (
       <i>
        Речь вероятно идёт о таком параметре как "исполненные байткоды в секунду". Тест можно найти в Squeak в методе
        <b>
         Integer&gt;&gt;benchmark
        </b>
        . У меня этот тест на Core2 Duo 2HHz показывает 360Мб/с. Если предположить, что
        <a href="http://lists.canonical.org/pipermail/kragen-tol/2007-March/000850.html">
         Dorado выдавал 400Кб/с
        </a>
        , то получается быстрее в ~900 раз. А в Squeak в комментарии к
        <b>
         Integer&gt;&gt;tinyBenchmark
        </b>
        указывается, что 400 MHz PII выдавал 18 Мб/с, т.е. был в 46 раз быстрее Dorado
       </i>
       ). По-этому, уже в 1983 году, после попытки использования
       <a href="http://www.netlib.narod.ru/library/book0001/ch02_01.htm" text="Статья объясняющая, что такое 'шитый код'">
        шитого кода
       </a>
       , в
       <a href="http://portal.acm.org/citation.cfm?id=800017.800542">
        ST-80 ВМ для 680x0 появился динамический транслятор
       </a>
       или, говоря современным языком,
       <a href="http://en.wikipedia.org/wiki/Just-in-time_compilation" text="Статья с историей JIT">
        JIT
       </a>
       .
      </p>
      <p>
       Но, одно лишь колличество исполненных байткодов за секунду это не единственный параметр характеризующий ST ВМ. Так как вызов любой операции в ST (теоретически) происходит только путём отправки сообщения, то помимо байткодов/сек измеряют еще и колличество отправленных сообщений за секунду. Для отправки некому объекту сообщения нужно найти метод-обработчик по
       <i>
        селектору
       </i>
       (имени). Все методы лежат в словаре где ключ это селектор (имя) сообщения, а значение — метод, обрабатывающий сообщение. В классе хранятся только методы определённые непосредственно в этом классе, не включая методы родителей. Когда приходит сообщение, диспетчер производит поиск в таблице методов. Если находит метод соответствующий сообщению, то происходит его вызов, если не находит, то диспетчер переходит к классу родителя и процедура поиска повторяется. Иногда, приходится последовательно пройти всю иерархию вплоть до класса
       <i>
        Object
       </i>
       .
      </p>
      <p>
       Естественно, чтобы постоянно не бегать по одним и тем же классам, результат поиска можно закешировать. Afaik, в первых ST использовался глобальный кеш, где ключем была пара - класс объекта и селектор сообщения. Этот механизм имеет ряд минусов. Например, ограниченный размер кеша приводит к вытеснению "старых" результатов и поиск приходится производить заново.
      </p>
      <p>
       В дальнейшем, эмпиричиским путём выяснилось, что в каждой отдельной точке посылки сообщения (call site) класс получателя меняется относительно редко. Такая точка вызова называется
       <i>
        мономорфной
       </i>
       . Следовательно в большинстве случаев можно закешировать адресс метода-обработчика сообщения в самой точке вызова и избежать полного поиска. Такая техника называется
       <i>
        inline cache (IC)
       </i>
       . При IC уже найденный адрес метода прописывается непосредственно в скомпилированом машинном коде. Код в точке вызова проверяет класс получателя на соответствие закешированному классу и переходит на процедуру поиска только если классы не совпадают. Очевидно, что эффективность такого кеша зависит от количества попаданий в кеш (hit ratio). Утверждается что hit ratio для ST программы более 90%, но это довольно старые данные (начало 80-х), а как это проверить самому я не знаю. IC был реализован вместе с первым JIT в уже упоминавшейся
       <a href="http://portal.acm.org/citation.cfm?id=800017.800542">
        ВМ от Deutsch&amp;Schiffman
       </a>
       .
      </p>
      <p>
       А потом в лаборатории Sun появился
       <a href="http://research.sun.com/self/">
        Self
       </a>
       . Self отличается от ST не только тем, что
       <a href="http://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D1%82%D0%BE%D1%82%D0%B8%D0%BF%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5" title="Объяснение прототипного программирования">
        Self основан на прототипах
       </a>
       в противовес классам, но и большей динамичностью. Например, там даже доступ к полям объекта происходит только через посылку сообщений, плюс штатная возможность менять иерархию наследования объекта, плюс множественное наследование. В общем, в Self есть куча особенностей затрудняющих создание эффективной реализации ВМ.
      </p>
      <p>
       В результате работ над Self-90 и Self-93 оказалось, что у того около 25% всех точек вызовов являются не мономорфными, а
       <i>
        полиморфными
       </i>
       . То есть, местами где значительное число сообщений посылаются объектам разлных классов. Для ускорения работы таких случаев используется
       <a href="/articles/cpp-pic.html">
        <i>
         polimorphic inline cache (PIC)
        </i>
       </a>
       . При этом, в скомпилированном машинном коде кешируется некоторое ограничченное (например 5) число найденных методов. Скомпилированный код при этом может выглядеть так:
      </p>
      <pre>
 if (object-&gt;class == #A) goto #A::m;
 if (object-&gt;class == #B) goto #B::m;
 goto #system_lookup;
 </pre>
      Количество сравнений увеличивается только при необходимости, то есть для мономорфных точек вызова эффективность будет точно такая же, как при простом IC. Если список классов переполняется, то какой-то из наличных закешированных методов заменяется новым. То есть PIC значительно теряет в эффективности в
      <i>
       мегаморфных
      </i>
      точках вызова. Т.е. в точках где класс объектов меняется часто. Но, к счастью, таких мест незначительное количество. PIC перекочевал в современные ST ВМ. Например, PIC используется в
      <a href="http://c2.com/cgi/wiki?HighlyPortableSmalltalk">
       HPS
      </a>
      - ВМ для VisualWorks Smalltalk.
      <p>
       Полезным "побочным" эффектом от использования PIC-ов является то, что в точках вызова накапливается информация о типах, что позволяет проводить адаптивную оптимизацию — перекомпиляцию методов с учетом информации о типах (а это позволяет, например, выполнять инлайнинг). Перекомпиляция проводится только для методов, которые выполняются особенно часто. Подсчет частоты вызова можно осуществлять либо счетчиком внутри метода либо семплированием. Эта техника так же была опробована в Self и показала хорошие результаты: применение PIC вместо IC дало ускорение 25%, а применение адаптивной оптимизации еще 25%.
      </p>
      <p>
       Ряд людей, работавших в Sun над технологией адаптивной оптимизации для Self в конце 1994г. образовали LongView Technologies LLC, больше известную как Animorphic Systems. В конце 1996г. они представили диалект ST -
       <a href="http://www.strongtalk.org/">
        Strongtalk
       </a>
       . ВМ Strongtalk умела производить адаптивную оптимизацию. Однако, в это время
       <a href="http://www.rsdn.ru/Forum/message/2080684.1.aspx">
        с индустрией ST стало очень плохо
       </a>
       . И на рынок начала активно продвигаться Java. ВМ для Java (от Sun) в то время были совсем слабыми — простой интерпретатор с
       <a href="http://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29#Precise_vs._conservative_and_internal_pointers">
        консервативным сборщиком мусора
       </a>
       с кооперативной многозадачностью. И в 1997г Sun Microsystems приобрела LongView Technologies LLC (она же Animorphic Systems). Все работы над Strongtalk были приостановлены, а Java получила
       <a href="http://java.sun.com/products/hotspot/docs/whitepaper/Java_HotSpot_WP_Final_4_30_01.html#pgfId=1082363">
        ВМ с адаптивной оптимизацией - HotSpot
       </a>
       .
      </p>
      <p>
       Не смотря на то, что технология адаптивной оптимизации ведомой типами доказала свою эффективность и была описана и изучена, её дальнейшему внедрению в диалекты ST помешала одна проблема. Динамический оптимизатор являлся частью JIT и работал непосредственно в машкодах апаратной платформы. Что усложняло портирование оптимизирующей ВМ на разные платформы. Именно по этой причине Squeak разрабатывался как чистый интерпретатор, что позволяет ему работать на куче различных железяк под самыми разными ОС (хотя
       <a href="http://www.hirschfeld.org/misc/media/HauptHirschfeldDenker_2007_TypeFeedbackForBytecodeInterpreters.pdf">
        PIC можно применять и с интерпретаторами
       </a>
       ). Из-за резкого схлопывания ST-рынка у производителей диалектов ресурсы были очень ограничены, ST ВМ обычно приходится поддерживать для
       <a href="http://www.cincomsmalltalk.com/scripts/DownloadFiles.ssp#VMLinks">
        широкого диапазона различных платформ
       </a>
       , а воспользоваться преимуществами адаптивной оптимизации хотелось. Так к 2002г. и оформилась идея, что оптимизатор должен быть реализован на ST, работать в образе и оптимизировать байткод на основании информации собраной в PIC. Технологию An Adaptive Optimizing Smalltalk Architecture (AOStA) начали разрабатывать Элиот Миранда (разработчик ВМ для VisualWorks) и Джилад Браха (разработчик ВМ для Self, Strongtalk, HotSpot) и
       <a href="http://www.cincomsmalltalk.com/blog/blogView?showComments=true&amp;entry=3236397054">
        представили первый результат в 2003г.
       </a>
       , но до промышленного использования дело не дошло до сих пор.
      </p>
      <p>
       <a href="http://vst.ensm-douai.fr/Esug2008Media/uploads/1/cog_miranda.pdf">
        Суть идеи
       </a>
       - на основе некоей информации накопленной ВМ, производится оптимизация байткода: спекулятивный инлайнинг, математические операции над примитивными (разбоксированными) значениями, операции над массивами без проверок индексов и др. Для этого нужно расширить байткоды и добавить в ВМ примитивы (
       <i>
        помните, что "примитивами" в ST называются функции в ВМ, а не примитивные значения
       </i>
       ) работающие без избыточных проверок. Машкод же генерит один и тот же JIT, так как оптимизированный байткод это надмножество исходного неоптимального байткода. Опять же, как и в случае с PIC, генерировать более оптимальный байткод можно и для интерпретатора.
       <a href="http://www.squeaksource.com/AOStA.html">
        Порт AOStA, который разрабатывался тогда в 2003 для Squeak доступен в репозитории SqueakSource
       </a>
       . (Не нужно путать AOStA с
       <a href="http://www.kampjes.demon.co.uk/articles/exuperyDesign.pdf">
        Exupery, адаптивным компилятором в машкод на чистом ST
       </a>
       ).
      </p>
      <p>
       Область байткод-в-байткод динамической оптимизации начинают осваивать наши "соседи":
       <a href="http://groovy.codehaus.org/GJIT+-+Groovy+Just-In-Time+Compiler">
        GJIT
       </a>
       - динамический оптимизатор для
       <a href="http://groovy.codehaus.org/">
        Groovy
       </a>
       . Написан на Java и использует трансформацию байткода через
       <a href="http://java.sun.com/j2se/1.5.0/docs/guide/jvmti/index.html">
        JVMTI
       </a>
       . Показывает
       <a href="http://chanwit.blogspot.com/2008/08/java-near-speed-groovy.html" title="Результат ускорения Groovy при использовании GJIT">
        значительное ускорение, по крайней мере на вычислительных тестах
       </a>
       . Т.е. для начала результат ободряющий.
      </p>
      <p>
       Первоисточники информации по адаптивной управляемой типами трансляции:
      </p>
      <ul>
       <li>
        "
        <a href="http://www.cs.ucsb.edu/~urs/oocsb/papers/type-feedback.html">
         Optimizing Dynamically-Dispatched Calls with Run-Time Type Feedback
        </a>
        ". Proceedings of the ACM SIGPLAN `94 Conference on Programming Language Design and Implementation, Orlando, FL, June 1994.
       </li>
       <li>
        "
        <a href="http://research.sun.com/self/papers/urs-thesis.html">
         Adaptive optimization for Self: Reconciling High Performance with Exploratory Programming
        </a>
        ". Ph.D. thesis, Computer Science Department, Stanford University.
       </li>
       <li>
        "
        <a href="http://research.sun.com/self/papers/pics.html">
         Optimizing Dynamically-Typed Object-Oriented Programming Languages with Polymorphic Inline Caches
        </a>
        ". ECOOP '91 Conference Proceedings, Geneva, Switzerland, July, 1991.
       </li>
      </ul>
      <p>
       Обратите внимание, что на текущий момент все динамические оптимизаторы срабатывают не для всего исполняемого (байт)кода, а только в случае обнаружения узкого места - часто выполняемого участка. Адаптивная оптимизация управляемая типами находит и оптимизирует часто используемы методы. Но гранулярность в метод это не единственный возможный алгоритм. Есть еще "
       <a href="http://www.ics.uci.edu/~franz/Site/pubs-pdf/C44Prepub.pdf">
        trace trees
       </a>
       " ("деревья трас").
      </p>
      <p>
       Метод "trace trees" (TT) был разработан для динамической оптимизации машкода в проекте Dynamo, а затем был проработан при разработке оптимизирующих Java JIT для малых устройств. Идея заключается в оптимизации не отдельных методов, а циклов. Циклы находятся путём отслеживания обратных переходов. Когда, во время интерпретации байткода, ВМ обнаруживает обратный переход, то точка куда перешло управление помечается, как потенциальное начало цикла. После некоторого критического колличества переходов на помеченное начало цикла включается режим трассирования. Все выполненые во время трассирования байткоды формируют дерево трас. Формирование дерева прекращается после окончания цикла. Сформированная трасса оптимизируется и компилируется в код целевой платформы. Неисполненные куски цикла так и остаются в байткоде и инкрементально добавляются в дерево трасс, если на каком-то этапе управление попадает туда. Трасса затем перекомпилируется целиком. Все вызовы методов, которые вызываются в процессе трассирования, инлайнятся в трассу. Если инлайнится виртуальный метод, то перед заинлайненым блоком добавляется проверка класса, как в IC. При некоторых условиях
       <a href="http://blog.mozilla.com/dmandelin/2008/05/28/tamarin-tracing-internals-iv-trace-optimization/">
        трассировка может прерываться и не приводить к генерацию машкода
       </a>
       . Например, при вылете исключения, при чрезмерном разрастании трасс и пр.
       <a href="http://article.gmane.org/gmane.comp.lang.lua.general/44781">
        Используется в LuaJIT 2.x
       </a>
       .
      </p>
      <p>
       Не смотря на то, что из байткодов в машкод компилируется только небольшая часть программы, тесты показывают хорошую производительность систем на TT. Статьи по теме:
      </p>
      <ul>
       <li>
        "
        <a href="http://www.hpl.hp.com/techreports/1999/HPL-1999-78.pdf">
         Transparent dynamic optimization: The design and implementation of Dynamo (1999)
        </a>
        " by Vasanth Bala, Evelyn Duesterwald, Sanjeev Banerjia.
       </li>
       <li>
        "
        <a href="http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=4746">
         HotpathVM: An Effective JIT for Resource-constrained Devices
        </a>
        ". Andreas Gal, Michael Franz, Christian W. Probst
       </li>
       <li>
        "
        <a href="http://www.ics.uci.edu/~franz/Site/pubs-pdf/ICS-TR-06-16.pdf">
         Incremental Dynamic Code Generation with Trace Trees
        </a>
        ". Andreas Gal, Michael Franz.
       </li>
       <li>
        "
        <a href="http://www.ics.uci.edu/~franz/Site/pubs-pdf/ICS-TR-07-12.pdf">
         Making the Compilation “Pipeline” Explicit: Dynamic Compilation Using Trace Tree Serialization
        </a>
        ". Andreas Gal, Michael Bebenita, Mason Chang, and Michael Franz.
       </li>
      </ul>
      <p>
       Теперь вернёмся к началу поста. JavaScript (JS) de-facto занял нишу, на которую изначально претендовала Java - интернет языка. Обладая таким статусом стыдно работать на убогих интерпретатора со сборщиками мусора на счетчиках ссылок. Сейчас ситуация резко меняется.
      </p>
      <p>
       Движок от Google -
       <a href="http://lists.squeakfoundation.org/pipermail/squeak-dev/2008-September/131239.html">
        V8 - разрабатывают специалисты, которые работали над Strongtalk в Animorphic
       </a>
       и, затем, над HotSpot. V8 - это
       <i>
        не
       </i>
       адаптация ВМ для ST. В V8 нет байткода, из исходного кода генерируется непосредственно машинный код. От байткода отказались, так как JS код постоянно загружается новый. Для поддержки динамической диспетчерезации используется PIC.
      </p>
      <p>
       Движок от Mozilla - TraceMonkey - наоборот, компилирует JS в байткод (учитывая, что многие плагины к FF написаны на JavaScript это полезная фича). Дальше берётся за работу динамический транслятор, который использует "trace trees" -
       <a href="https://wiki.mozilla.org/Tamarin:Tracing">
        Tamarin
       </a>
       .
      </p>
      <p>
       Движок от Apple - SquirrelFish - простой интерпретатор байткода (что удивляет, так как именно Apple "ведёт"
       <a href="http://llvm.org/">
        LLVM
       </a>
       ). Но, хотя SquirrelFish и не компилирует в машкод, в отличии от двух своих конкурентов,
       <a href="http://www.masonchang.com/2008/08/tracemonkey-vs-squirrelfish.html" title="Сравнение TraceMonkey со SquirrelFish">
        скорость этот интерпретатор показывает вполне приличную
       </a>
       .
      </p>
      <i>
       PS. Продолжение
       <a href="http://www.smalltalk.ru/2008/09/smalltalk_21.html">
        читайте в следующей заметке
       </a>
       .
      </i>
      <div style="clear:both; padding-bottom:0.25em">
      </div>
      <p class="blogger-labels">
       Ярлыки:
       <a href="http://www.smalltalk.ru/labels/inside_st.html" rel="tag">
        inside_st
       </a>
      </p>
     </div>
     <div class="byline">
      <a href="http://www.smalltalk.ru/2008/09/smalltalk.html" title="permanent link">
       #
      </a>
      posted by Andrei N.Sobchuck @ 10:27 PM
      <a href="http://www.smalltalk.ru/2008/09/smalltalk.html">
       5 comments
      </a>
     </div>
    </div>
    <div class="DateHeader">
     понедельник, Сентябрь 15, 2008
    </div>
    <div class="Post">
     <a name="2507709136947252747">
     </a>
     <span class="PostTitle">
      [Squeak] Новый сайт Squeakland
     </span>
     <div class="blogPost">
      <div style="clear:both;">
      </div>
      <p>
       Обновился сайт
       <a href="http://www.squeakland.org" title="Домашний сайт Etoys">
        squeakland.org
       </a>
       - домашний сайт
       <a href="/2005/08/squeak.html" title="Статья с небольшой демонстрацией практических возможностей Etoys">
        системы для обучения детей Squeak Etoys
       </a>
       . Эта система используется для обучения по всему миру (исключая, пожалуй, ex-USSR).
      </p>
      <p>
       Одной из особенностей Etoys (да и
       <a href="/2006/01/squeak-scratch.html">
        остальных обучающих систем построенных в этих традициях, как Scratch или Small-land
       </a>
       ) является
       <a href="http://squeakland.org/about/intro/article.jsp?id=2317">
        система скриптования поведения объектов на экране
       </a>
       . Подобную подсистему сделали неотъемлемой частью в
       <a href="/2005/06/squeak-tweak-wiki.html">
        Tweak
       </a>
       , новом визуальном фреймворке
       <a href="http://croquetproject.org/index.php/2D_GUI:_MVC/Morphic/Tweak">
        созданном для Croquet
       </a>
       .
      </p>
      <p>
       Как мне видится, у "больших дядек" тоже есть аналог подсистемы скриптования - речь идёт о
       <a href="http://office.microsoft.com/en-us/access/CH063664881033.aspx">
        макросах в MS Access
       </a>
       .
      </p>
      <center>
       <i>
        Визуальный интерфейс генерации скриптов в Etoys
       </i>
       :
       <div>
        <img src="/images/etoys-scripts.png" title="Визуальный интерфейс генерации скриптов в Etoys"/>
       </div>
       <br/>
       <i>
        Визуальный интерфейс генерации макросов в MS Access
       </i>
       :
       <div>
        <img src="/images/ms-access-macro.png" title="Визуальный интерфейс генерации скриптов в Etoys"/>
       </div>
      </center>
      <p>
       У меня от использования макросов в MS Access 97 осталось 10 летней давности субъективное мнение - минусами были глобальное состояние, и полное несоответствие между функционалом доступным через макросы против функционала доступного через API из
       <a href="http://ru.wikipedia.org/wiki/Visual_Basic_for_Applications">
        VBA
       </a>
       . Я не знаю о востребованности и удобстве MSAccess-макросов, но факт что этот функционал остаётся доступен второй десяток лет говорит о том, что свой пользователь у такого подхода (пусть даже с такими ограничениями как в MS Access) есть.
      </p>
      <div style="clear:both; padding-bottom:0.25em">
      </div>
      <p class="blogger-labels">
       Ярлыки:
       <a href="http://www.smalltalk.ru/labels/squeak.html" rel="tag">
        squeak
       </a>
      </p>
     </div>
     <div class="byline">
      <a href="http://www.smalltalk.ru/2008/09/squeak-squeakland.html" title="permanent link">
       #
      </a>
      posted by Andrei N.Sobchuck @ 5:01 PM
      <a href="http://www.smalltalk.ru/2008/09/squeak-squeakland.html">
       0 comments
      </a>
     </div>
    </div>
    <div class="Post">
     <a name="818981175405413644">
     </a>
     <span class="PostTitle">
      [Squeak] Squeak для iPhone
     </span>
     <div class="blogPost">
      <div style="clear:both;">
      </div>
      <center>
       <img src="/images/squeak-on-iphone.jpg"/>
      </center>
      Выпущен порт Squeak на
      <a href="http://www.apple.com/iphone/">
       iPhone
      </a>
      /
      <a href="http://www.apple.com/ipodtouch/">
       iPod Touch
      </a>
      . Портировать нужно было не только с учетом процессорной платформы, но и с учетом
      <a href="http://en.wikipedia.org/wiki/IPhone">
       multi-touch интерфейса
      </a>
      . Доступен
      <a href="http://video.google.fr/videoplay?docid=-8336229069737911818&amp;hl=fr">
       демо-ролик
      </a>
      . Подробнее
      <a href="http://news.squeak.org/2008/09/11/squeak-on-the-iphone-available-for-download/">
       читайте на The Weekly Squeak
      </a>
      .
      <div style="clear:both; padding-bottom:0.25em">
      </div>
      <p class="blogger-labels">
       Ярлыки:
       <a href="http://www.smalltalk.ru/labels/squeak.html" rel="tag">
        squeak
       </a>
      </p>
     </div>
     <div class="byline">
      <a href="http://www.smalltalk.ru/2008/09/squeak-squeak-iphone.html" title="permanent link">
       #
      </a>
      posted by Andrei N.Sobchuck @ 2:47 AM
      <a href="http://www.smalltalk.ru/2008/09/squeak-squeak-iphone.html">
       0 comments
      </a>
     </div>
    </div>
   </div>
   <div id="rightcontent">
    <div id="Description">
    </div>
    <p>
    </p>
    <div id="profile-container">
     <!-- < $ BlogMemberProfile $ > -->
     <div class="SideBarTitle">
      <a href="http://www.smalltalk.ru/">
       Сайт
      </a>
     </div>
     <ul>
      <li>
       <a href="http://www.smalltalk.ru/index.html">
        Главная
       </a>
      </li>
      <li>
       <a href="http://www.smalltalk.ru/novice.html">
        Новичку
       </a>
      </li>
      <li>
       <a href="http://www.smalltalk.ru/quotes.html">
        Цитаты
       </a>
      </li>
      <li>
       <a href="http://ru.smalltalk.wikia.com/wiki/%D0%A1%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B4%D0%B8%D0%B0%D0%BB%D0%B5%D0%BA%D1%82%D0%BE%D0%B2">
        Реализации
       </a>
      </li>
      <li>
       <a href="http://www.smalltalk.ru/articles.html">
        Статьи
       </a>
      </li>
      <li>
       <a href="http://www.smalltalk.ru/docs.html">
        Документация
       </a>
      </li>
      <!--	<li><a href="http://www.smalltalk.ru/software.html">Программы</a></li> -->
      <!--	<li><a href="http://www.smalltalk.ru/links.html">Ссылки</a></li> -->
      <li>
       <a href="http://ru.smalltalk.wikia.com/">
        Wiki
       </a>
      </li>
      <!--	<li><a href="http://talk.mail.ru/forum/fido7.ru.smalltalk">Обсуждение</a></li> -->
      <li>
       <a href="http://www.progz.ru/viewforum.php?f=48&amp;sid=84fa3b0a481da2633c6bba4ec5bb9dff">
        Обсуждение
       </a>
      </li>
      <!--	<li><a href="http://www.guestbook.ru/book.cgi?user=smalltalk&action=show">Гостевая книга</a></li> -->
     </ul>
     <div class="SideBarTitle">
      Популярные статьи
     </div>
     ::
     <a href="http://www.smalltalk.ru/articles/smalltalk.html">
      Smalltalk?!
     </a>
     <br/>
     ::
     <a href="http://www.smalltalk.ru/articles/why.html">
      Почему Smalltalk?
     </a>
     <br/>
     ::
     <a href="http://www.smalltalk.ru/articles/great-leap-forward.html">
      Great Leap Forward from Java to Smalltalk
     </a>
     <br/>
     <br/>
     <div class="SideBarTitle">
      Последние сообщения
     </div>
     ::
     <a href="http://www.smalltalk.ru/2008/10/squeak-squeak-multi-vm.html">
      [Squeak] Squeak "multi-vm"
     </a>
     <br/>
     ::
     <a href="http://www.smalltalk.ru/2008/10/squeak-sophie-java.html">
      [Squeak] Sophie переходит на Java
     </a>
     <br/>
     ::
     <a href="http://www.smalltalk.ru/2008/09/dolphin.html">
      [Dolphin] Дельфин - жил, Дельфин - жив, Дельфин - ...
     </a>
     <br/>
     ::
     <a href="http://www.smalltalk.ru/2008/09/pier-1017-cms-seaside.html">
      Pier 1.0.17 - CMS на Seaside. Людьми и для людей
     </a>
     <br/>
     ::
     <a href="http://www.smalltalk.ru/2008/09/smalltalk_21.html">
      Smalltalk и Все-Все-Все: Белка-Рыба наносит ответн...
     </a>
     <br/>
     ::
     <a href="http://www.smalltalk.ru/2008/09/smalltalk.html">
      Smalltalk и Все-Все-Все
     </a>
     <br/>
     ::
     <a href="http://www.smalltalk.ru/2008/09/squeak-squeakland.html">
      [Squeak] Новый сайт Squeakland
     </a>
     <br/>
     ::
     <a href="http://www.smalltalk.ru/2008/09/squeak-squeak-iphone.html">
      [Squeak] Squeak для iPhone
     </a>
     <br/>
     ::
     <a href="http://www.smalltalk.ru/2008/09/squeak-squeakdbx.html">
      [Squeak] SqueakDBX
     </a>
     <br/>
     ::
     <a href="http://www.smalltalk.ru/2008/09/squeak-monticello-2.html">
      [Squeak] Monticello 2
     </a>
     <br/>
     <br/>
     <div class="SideBarTitle">
      Архив
     </div>
     <a href="http://www.smalltalk.ru/news-04-12.html">
      Предыдущие новости
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2004_12_01_smalltalk-ru_archive.html">
      Декабрь 2004
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2005_01_01_smalltalk-ru_archive.html">
      Январь 2005
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2005_02_01_smalltalk-ru_archive.html">
      Февраль 2005
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2005_03_01_smalltalk-ru_archive.html">
      Март 2005
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2005_04_01_smalltalk-ru_archive.html">
      Апрель 2005
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2005_05_01_smalltalk-ru_archive.html">
      Май 2005
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2005_06_01_smalltalk-ru_archive.html">
      Июнь 2005
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2005_07_01_smalltalk-ru_archive.html">
      Июль 2005
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2005_08_01_smalltalk-ru_archive.html">
      Август 2005
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2005_09_01_smalltalk-ru_archive.html">
      Сентябрь 2005
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2005_10_01_smalltalk-ru_archive.html">
      Октябрь 2005
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2005_11_01_smalltalk-ru_archive.html">
      Ноябрь 2005
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2005_12_01_smalltalk-ru_archive.html">
      Декабрь 2005
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2006_01_01_smalltalk-ru_archive.html">
      Январь 2006
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2006_02_01_smalltalk-ru_archive.html">
      Февраль 2006
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2006_03_01_smalltalk-ru_archive.html">
      Март 2006
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2006_04_01_smalltalk-ru_archive.html">
      Апрель 2006
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2006_05_01_smalltalk-ru_archive.html">
      Май 2006
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2006_06_01_smalltalk-ru_archive.html">
      Июнь 2006
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2006_07_01_smalltalk-ru_archive.html">
      Июль 2006
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2006_09_01_smalltalk-ru_archive.html">
      Сентябрь 2006
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2006_10_01_smalltalk-ru_archive.html">
      Октябрь 2006
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2006_11_01_smalltalk-ru_archive.html">
      Ноябрь 2006
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2006_12_01_smalltalk-ru_archive.html">
      Декабрь 2006
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2007_01_01_smalltalk-ru_archive.html">
      Январь 2007
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2007_02_01_smalltalk-ru_archive.html">
      Февраль 2007
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2007_03_01_smalltalk-ru_archive.html">
      Март 2007
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2007_04_01_smalltalk-ru_archive.html">
      Апрель 2007
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2007_05_01_smalltalk-ru_archive.html">
      Май 2007
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2007_06_01_smalltalk-ru_archive.html">
      Июнь 2007
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2007_08_01_smalltalk-ru_archive.html">
      Август 2007
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2007_09_01_smalltalk-ru_archive.html">
      Сентябрь 2007
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2007_11_01_smalltalk-ru_archive.html">
      Ноябрь 2007
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2008_01_01_smalltalk-ru_archive.html">
      Январь 2008
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2008_03_01_smalltalk-ru_archive.html">
      Март 2008
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2008_05_01_smalltalk-ru_archive.html">
      Май 2008
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2008_06_01_smalltalk-ru_archive.html">
      Июнь 2008
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2008_07_01_smalltalk-ru_archive.html">
      Июль 2008
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2008_08_01_smalltalk-ru_archive.html">
      Август 2008
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2008_09_01_smalltalk-ru_archive.html">
      Сентябрь 2008
     </a>
     /
     <a href="http://www.smalltalk.ru/blog/2008_10_01_smalltalk-ru_archive.html">
      Октябрь 2008
     </a>
     <script language="Javascript" type="text/javascript">
      if (location.href.indexOf("archive")!=-1) document.write("<strong><a href=\"http://www.smalltalk.ru/\">Current Posts</a></strong>");
     </script>
     <br/>
     <br/>
     <div class="SideBarTitle">
      Atom Feed
     </div>
     <a href="http://www.smalltalk.ru/feed/atom.xml" title="Atom feed">
      Smalltalk по-русски
     </a>
     <br/>
     <br/>
     <p style="text-align:center">
      <a href="http://www.blogger.com" parent="_blank">
       <img alt="Powered by Blogger" border="0" src="http://buttons.blogger.com/bloggerbutton1.gif"/>
      </a>
      <!-- COUNTER -->
      <!--Rating@Mail.ru COUNTER-->
      <script language="JavaScript">
       <!--
 d=document;a='';a+=';r='+escape(d.referrer)
 js=10//-->
      </script>
      <script language="JavaScript1.1">
       <!--
 a+=';j='+navigator.javaEnabled()
 js=11//-->
      </script>
      <script language="JavaScript1.2">
       <!--
 s=screen;a+=';s='+s.width+'*'+s.height
 a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth)
 js=12//-->
      </script>
      <script language="JavaScript1.3">
       <!--
 js=13//-->
      </script>
      <script language="JavaScript">
       <!--
 d.write('<a href="http://top.mail.ru/jump?from=471998"'+
 ' target=_top><img src="http://top.list.ru/counter'+
 '?id=471998;t=216;js='+js+a+';rand='+Math.random()+
 '"'+' border=0 height=31 width=88></a>')
 if(js>11)d.write('<'+'!-- ')//-->
      </script>
     </p>
     <noscript>
      <a href="http://top.mail.ru/jump?from=471998" target="_top">
       <img border="0" height="31" src="http://top.list.ru/counter?js=na;id=471998;t=216" width="88"/>
      </a>
     </noscript>
     <script language="JavaScript">
      if(js>11) { d.write('--'); }
     </script>
     <!--/COUNTER-->
    </div>
    <script src="http://www.blogger.com/static/v1/common/js/2110372966-csitaillib.js" type="text/javascript">
    </script>
    <script>
     if (typeof(window.attachCsiOnload) != 'undefined' && window.attachCsiOnload != null) { window.attachCsiOnload('ext_blogspot'); }
    </script>
   </div>
  </body>
  <script>
   (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
   (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
   m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
   })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
 
   ga('create', 'UA-58598929-1', 'auto');
   ga('send', 'pageview');
  </script>
 </html>
