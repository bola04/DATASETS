<!DOCTYPE html>
 <html lang="en">
  <head>
   <meta charset="utf-8"/>
   <title>
    cakebaker - baking cakes with CakePHP
   </title>
   <link href="//s.w.org" rel="dns-prefetch"/>
   <script type="text/javascript">
    window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.2.1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.2.1\/svg\/","svgExt":".svg","source":{"concatemoji":"http:\/\/cakebaker.42dh.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.7.11"}};
 			!function(a,b,c){function d(a){var b,c,d,e,f=String.fromCharCode;if(!k||!k.fillText)return!1;switch(k.clearRect(0,0,j.width,j.height),k.textBaseline="top",k.font="600 32px Arial",a){case"flag":return k.fillText(f(55356,56826,55356,56819),0,0),!(j.toDataURL().length<3e3)&&(k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57331,65039,8205,55356,57096),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57331,55356,57096),0,0),c=j.toDataURL(),b!==c);case"emoji4":return k.fillText(f(55357,56425,55356,57341,8205,55357,56507),0,0),d=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55357,56425,55356,57341,55357,56507),0,0),e=j.toDataURL(),d!==e}return!1}function e(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g,h,i,j=b.createElement("canvas"),k=j.getContext&&j.getContext("2d");for(i=Array("flag","emoji4"),c.supports={everything:!0,everythingExceptFlag:!0},h=0;h<i.length;h++)c.supports[i[h]]=d(i[h]),c.supports.everything=c.supports.everything&&c.supports[i[h]],"flag"!==i[h]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[i[h]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
   </script>
   <style type="text/css">
    img.wp-smiley,
 img.emoji {
 	display: inline !important;
 	border: none !important;
 	box-shadow: none !important;
 	height: 1em !important;
 	width: 1em !important;
 	margin: 0 .07em !important;
 	vertical-align: -0.1em !important;
 	background: none !important;
 	padding: 0 !important;
 }
   </style>
   <link href="http://cakebaker.42dh.com/wp-content/plugins/openid/f/openid.css?ver=519" id="openid-css" media="all" rel="stylesheet" type="text/css"/>
   <link href="http://cakebaker.42dh.com/wp-json/" rel="https://api.w.org/"/>
   <link href="http://cakebaker.42dh.com/xmlrpc.php?rsd" rel="EditURI" title="RSD" type="application/rsd+xml"/>
   <link href="http://cakebaker.42dh.com/wp-includes/wlwmanifest.xml" rel="wlwmanifest" type="application/wlwmanifest+xml"/>
   <meta content="WordPress 4.7.11" name="generator"/>
   <link href="/favicon.ico" rel="shortcut icon" type="image/x-icon"/>
   <link href="http://cakebaker.42dh.com/wp-content/themes/cakebaker/style.css" media="screen" rel="stylesheet" type="text/css"/>
   <link href="http://cakebaker.42dh.com/feed/" rel="alternate" title="RSS feed for articles" type="application/rss+xml"/>
   <link href="http://cakebaker.42dh.com/comments/feed/" rel="alternate" title="RSS feed for comments" type="application/rss+xml"/>
   <link href="http://cakebaker.42dh.com/xmlrpc.php" rel="pingback"/>
   <link href="http://www.myopenid.com/server" rel="openid2.provider openid.server"/>
   <link href="http://dh.myopenid.com/" rel="openid2.local_id openid.delegate"/>
   <meta content="http://dh.myopenid.com/xrds" http-equiv="X-XRDS-Location"/>
   <script type="text/javascript">
    var _gaq = _gaq || [];
   _gaq.push(['_setAccount', 'UA-646769-3']);
   _gaq.push(['_trackPageview']);
 
   (function() {
     var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
     ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
     var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
   })();
   </script>
  </head>
  <body>
   <div id="wrap">
    <div id="header">
     <div id="logo">
      <a href="http://cakebaker.42dh.com">
       <img alt="cakebaker" src="http://cakebaker.42dh.com/wp-content/themes/cakebaker/cakebaker_logo.png"/>
      </a>
     </div>
     <ul id="nav">
      <li>
       <a href="/archives">
        <strong>
         Archives
        </strong>
       </a>
      </li>
      <li>
       <a href="/downloads">
        <strong>
         Downloads
        </strong>
       </a>
      </li>
      <li>
       <a href="/about">
        <strong>
         About
        </strong>
       </a>
      </li>
     </ul>
    </div>
    <div id="main">
     <div id="headline">
      <h1>
       Baking cakes with
       <a href="http://cakephp.org">
        CakePHP
       </a>
       .
      </h1>
     </div>
     <div id="content">
      <ul id="posts">
       <li class="post">
        <h2>
         <a href="http://cakebaker.42dh.com/2011/04/06/bash-autocompletion-for-git/">
          Bash autocompletion for Git
         </a>
        </h2>
        <p class="postmeta">
         Published on
         <time datetime="2011-04-06" pubdate="">
          April 06, 2011
         </time>
         and tagged with
         <a href="http://cakebaker.42dh.com/tags/git/" rel="category tag">
          git
         </a>
        </p>
        <div class="postcontent">
         <p>
          One thing I often wished to have when using
          <a href="http://git-scm.com/">
           Git
          </a>
          was the ability to autocomplete Git commands and branch names. As I had to learn this week from Markus Prinz’ article
          <a href="http://nuclearsquid.com/writings/git-tricks-tips-workflows.html">
           A few of my Git tricks, tips and workflows
          </a>
          , Git comes with an autocompletion script for the
          <a href="http://en.wikipedia.org/wiki/Bash_(Unix_shell)">
           Bash
          </a>
          shell.
         </p>
         <p>
          But to use the autocompletion, you have to enable it. To do that, add the following snippet to your
          <code>
           ~/.bashrc
          </code>
          file (if you are using a Mac, see the aforementioned
          <a href="http://nuclearsquid.com/writings/git-tricks-tips-workflows.html">
           article
          </a>
          ):
         </p>
         <pre>
 <code>source /etc/bash_completion.d/git</code>
 </pre>
         <p>
          You can then either reload the
          <code>
           .bashrc
          </code>
          file with
          <code>
           source ~/.bashrc
          </code>
          or open a new shell to see the autocompletion in action.
         </p>
        </div>
        <p class="commentcount">
         <a href="http://cakebaker.42dh.com/2011/04/06/bash-autocompletion-for-git/#comments">
          10 comments
         </a>
        </p>
       </li>
       <li class="post">
        <h2>
         <a href="http://cakebaker.42dh.com/2011/04/01/array-iteration-with-javascript/">
          Array iteration with JavaScript
         </a>
        </h2>
        <p class="postmeta">
         Published on
         <time datetime="2011-04-01" pubdate="">
          April 01, 2011
         </time>
         and tagged with
         <a href="http://cakebaker.42dh.com/tags/javascript/" rel="category tag">
          javascript
         </a>
         <a href="http://cakebaker.42dh.com/tags/node-js/" rel="category tag">
          node.js
         </a>
        </p>
        <div class="postcontent">
         <p>
          Till recently I always used a for-loop when I had to iterate over an array in JavaScript. For example:
         </p>
         <pre>
 <code>var myArray = [1, 2, 3, 4];
 
 for (var i = 0; i &lt; myArray.length; i++) {
     console.log(myArray[i]);
 }</code>
 </pre>
         <p>
          However, with
          <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">
           ECMAScript 5
          </a>
          the
          <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array">
           Array object
          </a>
          itself got some methods for iteration purposes. With those methods you often can write cleaner code than by using a for-loop. Let’s have a (short) look at those methods. For details, please follow the provided links.
         </p>
         <p>
          <strong>
           forEach
          </strong>
         </p>
         <p>
          The
          <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach">
           forEach()
          </a>
          method calls the provided function for each array element. Using forEach(), we can rewrite the example from above to:
         </p>
         <pre>
 <code>var myArray = [1, 2, 3, 4];
 
 myArray.forEach(function (element) {
     console.log(element);
 });</code>
 </pre>
         <p>
          <strong>
           filter
          </strong>
         </p>
         <p>
          The
          <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/filter">
           filter()
          </a>
          method applies the provided filter function to each array element and returns a new array with all elements for which the filter function returned a true value.
         </p>
         <p>
          For example, to get only the even numbers of an array we could write the following code:
         </p>
         <pre>
 <code>var myArray = [1, 2, 3, 4];
 
 var evenNumbers = myArray.filter(function (x) {
     return x % 2 == 0;
 });
 // evenNumbers is [2, 4]</code>
 </pre>
         <p>
          <strong>
           every
          </strong>
          &amp;
          <strong>
           some
          </strong>
         </p>
         <p>
          The
          <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every">
           every()
          </a>
          and
          <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some">
           some()
          </a>
          methods are similar: whereas the every() method only returns true if the provided testing function returns a true value for each array element, the some() method returns true if there is at least one array element for which the testing function returns a true value. You can see the difference in this example:
         </p>
         <pre>
 <code>var oddNumbers = [1, 3, 5, 7];
 var mixedNumbers = [1, 2, 3, 4];
 var evenNumbers = [2, 4, 6, 8];
 
 oddNumbers.every(isEven); // returns false
 oddNumbers.some(isEven); // returns false
 
 mixedNumbers.every(isEven); // returns false
 mixedNumbers.some(isEven); // returns true
 
 evenNumbers.every(isEven); // returns true
 evenNumbers.some(isEven); // returns true
 
 function isEven(x) {
     return x % 2 == 0;
 }</code>
 </pre>
         <p>
          <strong>
           map
          </strong>
         </p>
         <p>
          The
          <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/map">
           map()
          </a>
          method applies the provided function to each array element and returns an array with the results.
         </p>
         <p>
          For example, to square all values of an array we can do the following:
         </p>
         <pre>
 <code>var myArray = [1, 2, 3, 4];
 
 var squared = myArray.map(function (x) {
     return x * x;
 });
 // squared is [1, 4, 9, 16]</code>
 </pre>
         <p>
          <strong>
           reduce
          </strong>
          &amp;
          <strong>
           reduceRight
          </strong>
         </p>
         <p>
          The
          <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Reduce">
           reduce()
          </a>
          and
          <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/ReduceRight">
           reduceRight()
          </a>
          methods reduce an array step-by-step to a single value by using the provided function and an optional initial value. It works in the following way: the first two array elements (or the initial value and the first array element) are passed as parameters to the provided function. The result of this function call plus the next array element are then used as new parameters for the function. And so on, until there are no more array elements left.
         </p>
         <p>
          The difference between reduce() and reduceRight() is that reduce() iterates over the array from left-to-right whereas reduceRight() iterates in the opposite direction, from right-to-left.
         </p>
         <p>
          Here is a simple example to calculate the sum of the values of an array:
         </p>
         <pre>
 <code>var myArray = [1, 2, 3, 4];
 var initialValue = 10;
 
 myArray.reduce(add); // performs 1 + 2 + 3 + 4 and returns 10
 myArray.reduceRight(add); // performs 4 + 3 + 2 + 1 and returns 10
 
 myArray.reduce(add, initialValue); // performs 10 + 1 + 2 + 3 + 4 and returns 20
 myArray.reduceRight(add, initialValue); // performs 10 + 4 + 3 + 2 + 1 and returns 20
 
 function add(x, y) {
     return x + y;
 }</code>
 </pre>
         <p>
          That’s it. I hope I could give you an overview over the available iteration possibilities in JavaScript. Happy coding!
         </p>
         <p>
          Update 2011-04-02: I found a site by Microsoft where you can test those methods in your browser:
          <a href="http://ie.microsoft.com/testdrive/HTML5/ECMAScript5Array/Default.html">
           ECMAScript 5 Arrays
          </a>
         </p>
        </div>
        <p class="commentcount">
         <a href="http://cakebaker.42dh.com/2011/04/01/array-iteration-with-javascript/#comments">
          7 comments
         </a>
        </p>
       </li>
       <li class="post">
        <h2>
         <a href="http://cakebaker.42dh.com/2011/01/10/2-legged-vs-3-legged-oauth/">
          2-legged vs. 3-legged OAuth
         </a>
        </h2>
        <p class="postmeta">
         Published on
         <time datetime="2011-01-10" pubdate="">
          January 10, 2011
         </time>
         and tagged with
         <a href="http://cakebaker.42dh.com/tags/oauth/" rel="category tag">
          oauth
         </a>
        </p>
        <div class="postcontent">
         <p>
          From emails I receive it seems like there is a bit of confusion about what the terms
          <strong>
           2-legged OAuth
          </strong>
          and
          <strong>
           3-legged OAuth
          </strong>
          mean. I hope I can clear up this confusion with this article (and don’t contribute more to the confusion…).
         </p>
         <p>
          In short, they describe two different usage scenarios of
          <a href="http://oauth.net/">
           OAuth
          </a>
          involving two respectively three parties.
         </p>
         <p>
          <a href="http://tools.ietf.org/html/rfc5849">
           3-legged OAuth
          </a>
          describes the scenario for which OAuth was originally developed: a resource owner wants to give a client access to a server without sharing his credentials (i.e. username/password). A typical example is a user (resource owner) who wants to give a third-party application (client) access to his Twitter account (server).
         </p>
         <p>
          On a conceptual level it works in the following way:
         </p>
         <ul>
          <li>
           Client has signed up to the server and got his client credentials (also known as “consumer key and secret”) ahead of time
          </li>
          <li>
           User wants to give the client access to his protected resources on the server
          </li>
          <li>
           Client retrieves the temporary credentials (also known as “request token”) from the server
          </li>
          <li>
           Client redirects the resource owner to the server
          </li>
          <li>
           Resource owner grants the client access to his protected resources on the server
          </li>
          <li>
           Server redirects the user back to the client
          </li>
          <li>
           Client uses the temporary credentials to retrieve the token credentials (also known as “access token”) from the server
          </li>
          <li>
           Client uses the token credentials to access the protected resources on the server
          </li>
         </ul>
         <p>
          <a href="http://oauth.googlecode.com/svn/spec/ext/consumer_request/1.0/drafts/2/spec.html">
           2-legged OAuth
          </a>
          , on the other hand, describes a typical client-server scenario, without any user involvement. An example for such a scenario could be a local Twitter client application accessing your Twitter account.
         </p>
         <p>
          On a conceptual level 2-legged OAuth simply consists of the first and last steps of 3-legged OAuth:
         </p>
         <ul>
          <li>
           Client has signed up to the server and got his client credentials (also known as “consumer key and secret”)
          </li>
          <li>
           Client uses his client credentials (and empty token credentials) to access the protected resources on the server
          </li>
         </ul>
         <p>
          Above I used Twitter as an example, though strictly speaking, they don’t use 2-legged OAuth, but a variant of it. They not only provide the client credentials but also the token credentials (see also
          <a href="http://dev.twitter.com/pages/oauth_single_token">
           Using one access token with OAuth
          </a>
          ).
         </p>
         <p>
          As you have seen, 2-legged OAuth is nothing new, it is simply using OAuth in a different scenario than it was designed for. And hence you can use (almost?) all existing OAuth libraries for 2-legged OAuth, too.
         </p>
        </div>
        <p class="commentcount">
         <a href="http://cakebaker.42dh.com/2011/01/10/2-legged-vs-3-legged-oauth/#comments">
          15 comments
         </a>
        </p>
       </li>
       <li class="post">
        <h2>
         <a href="http://cakebaker.42dh.com/2010/12/08/bugfix-release-v2010-12-08-of-the-openid-component/">
          Bugfix release v2010-12-08 of the OpenID component
         </a>
        </h2>
        <p class="postmeta">
         Published on
         <time datetime="2010-12-08" pubdate="">
          December 08, 2010
         </time>
         and tagged with
         <a href="http://cakebaker.42dh.com/tags/cakephp/" rel="category tag">
          cakephp
         </a>
         <a href="http://cakebaker.42dh.com/tags/component/" rel="category tag">
          component
         </a>
         <a href="http://cakebaker.42dh.com/tags/openid/" rel="category tag">
          openid
         </a>
        </p>
        <div class="postcontent">
         <p>
          There is a new bugfix release of the OpenID component available:
          <a href="https://github.com/cakebaker/openid-component/downloads">
           https://github.com/cakebaker/openid-component/downloads
          </a>
          .
         </p>
         <p>
          This release fixes a bug in the isOpenIDResponse() method. So far this method only recognized OpenID responses from a GET request. But as I had to learn, there are OpenID providers (e.g.
          <a href="http://hyves.nl">
           Hyves
          </a>
          ) responding with a POST request… So, if you use the isOpenIDResponse() method, please upgrade to the new version.
         </p>
         <p>
          However, this bug not only affected the component itself but also the
          <a href="http://code.42dh.com/openid/">
           examples
          </a>
          and the
          <a href="https://github.com/cakebaker/openid-component-example">
           example application
          </a>
          . They contained code that looked like:
         </p>
         <pre>
 <code>if ($this-&gt;RequestHandler-&gt;isPost()) {
     // make OpenID request
 } elseif ($this-&gt;Openid-&gt;isOpenIDResponse()) {
     // handle OpenID response
 }</code>
 </pre>
         <p>
          This snippet will fail if the response from an OpenID provider is a POST request. Instead it should look like:
         </p>
         <pre>
 <code>if ($this-&gt;RequestHandler-&gt;isPost() &amp;&amp; !$this-&gt;Openid-&gt;isOpenIDResponse()) {
     // make OpenID request
 } elseif ($this-&gt;Openid-&gt;isOpenIDResponse()) {
     // handle OpenID response
 }</code>
 </pre>
         <p>
          Please fix this in your code if you followed the examples.
         </p>
         <p>
          Thanks go to Sam Mousa for reporting this issue.
         </p>
        </div>
        <p class="commentcount">
         <a href="http://cakebaker.42dh.com/2010/12/08/bugfix-release-v2010-12-08-of-the-openid-component/#comments">
          3 comments
         </a>
        </p>
       </li>
       <li class="post">
        <h2>
         <a href="http://cakebaker.42dh.com/2010/12/04/navigation-with-the-j-and-k-keys/">
          Navigation with the “j” and “k” keys
         </a>
        </h2>
        <p class="postmeta">
         Published on
         <time datetime="2010-12-04" pubdate="">
          December 04, 2010
         </time>
         and tagged with
         <a href="http://cakebaker.42dh.com/tags/javascript/" rel="category tag">
          javascript
         </a>
         <a href="http://cakebaker.42dh.com/tags/jquery/" rel="category tag">
          jquery
         </a>
         <a href="http://cakebaker.42dh.com/tags/plugin/" rel="category tag">
          plugin
         </a>
        </p>
        <div class="postcontent">
         <p>
          If you are using
          <a href="http://www.vim.org/">
           Vim
          </a>
          you already know the meaning of the “j” and “k” keys: they navigate one line downwards resp. upwards. Some websites like
          <a href="http://www.boston.com/bigpicture/">
           The Big Picture
          </a>
          adopted this functionality to provide an easy way to navigate, in the case of The Big Picture to jump from photo to photo.
         </p>
         <p>
          As I wanted to use the same functionality and didn’t find an existing solution I wrote a simple
          <a href="http://jquery.com/">
           jQuery
          </a>
          plugin for this purpose:
          <a href="https://github.com/cakebaker/jquery-jknavigable">
           jquery-jknavigable
          </a>
          . Its usage is pretty simple, to make the posts of a blog navigable with the “j” and “k” keys you would use the following code:
         </p>
         <pre>
 <code>$('.post').jknavigable();</code>
 </pre>
         <p>
          By default the active element is marked with the class “active” so you can style it differently. If necessary, you can specify your own class name:
         </p>
         <pre>
 <code>$('.post').jknavigable({'activeClass': 'someClass'});</code>
 </pre>
         <p>
          That’s it. Feedback is, as always, welcome.
         </p>
         <p>
          PS: a good starting point for writing your own plugin is jQuery’s
          <a href="http://docs.jquery.com/Plugins/Authoring">
           Plugin Authoring page
          </a>
          .
         </p>
        </div>
        <p class="commentcount">
         <a href="http://cakebaker.42dh.com/2010/12/04/navigation-with-the-j-and-k-keys/#comments">
          3 comments
         </a>
        </p>
       </li>
      </ul>
     </div>
     <div id="sidebar">
      <div class="box" id="search">
       <h3>
        Search
       </h3>
       <div id="searchform">
        <form action="/" method="get">
         <p>
          <input id="SearchQ" name="s" size="19" type="text" value=""/>
          <input type="submit" value="go"/>
         </p>
        </form>
       </div>
      </div>
      <div class="box" id="sponsors">
       <h3>
        Sponsors
       </h3>
      </div>
      <div class="box" id="recentcomments">
       <h3>
        Recent comments
       </h3>
       <ul>
        <li>
         <a href="https://vc9.com" rel="nofollow">
          meeting place
         </a>
         on
         <a href="http://cakebaker.42dh.com/2007/03/28/redirect-with-exit/#comment-520534">
          Redirect with exit
         </a>
        </li>
        <li>
         <a href="https://vc9.com" rel="nofollow">
          virtual world
         </a>
         on
         <a href="http://cakebaker.42dh.com/2011/04/01/array-iteration-with-javascript/#comment-520533">
          Array iteration with JavaScript
         </a>
        </li>
        <li>
         <a href="https://vc9.com" rel="nofollow">
          2ndlife
         </a>
         on
         <a href="http://cakebaker.42dh.com/2006/12/25/two-gifts-for-cakephp-users/#comment-520532">
          Two gifts for CakePHP users
         </a>
        </li>
        <li>
         <a href="https://vc9.com" rel="nofollow">
          2D chat
         </a>
         on
         <a href="http://cakebaker.42dh.com/2007/10/12/code-completion-in-views-with-eclipse-pdt/#comment-520531">
          Code completion in views with Eclipse PDT
         </a>
        </li>
        <li>
         <a href="https://vc9.com" rel="nofollow">
          chatting
         </a>
         on
         <a href="http://cakebaker.42dh.com/2007/06/25/when-programming-becomes-stale/#comment-520530">
          When programming becomes stale…
         </a>
        </li>
       </ul>
      </div>
     </div>
    </div>
   </div>
   <div id="footer">
    <div id="feeds">
     <h3>
      Feeds
     </h3>
     <ul>
      <li>
       <a href="http://cakebaker.42dh.com/feed/">
        Articles
       </a>
      </li>
      <li>
       <a href="http://cakebaker.42dh.com/comments/feed/">
        Comments
       </a>
      </li>
     </ul>
    </div>
    <div id="elsewhere">
     <h3>
      Elsewhere
     </h3>
     <ul>
      <li>
       <a href="http://twitter.com/dhofstet">
        Twitter
       </a>
      </li>
      <li>
       <a href="https://github.com/cakebaker">
        Github
       </a>
      </li>
      <li>
       <a href="http://stackoverflow.com/users/68234/dhofstet">
        StackOverflow
       </a>
      </li>
      <li>
       <a href="http://delicious.com/dho">
        Delicious
       </a>
      </li>
     </ul>
    </div>
   </div>
   <p id="license">
    © daniel hofstetter. Licensed under a
    <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">
     Creative Commons License
    </a>
   </p>
  </body>
 </html>
