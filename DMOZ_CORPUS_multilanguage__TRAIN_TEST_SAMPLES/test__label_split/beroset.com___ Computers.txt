<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
  <head>
   <title>
    Assembly Language Repository
   </title>
   <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
   <meta content="beroset assembly language programming" http-equiv="KEYWORDS"/>
   <meta content="Assembly Language Sample Code" name="DESCRIPTION"/>
   <meta content="width=device-width, initial-scale=1" name="viewport"/>
   <link href="beroset.css" rel="stylesheet" type="text/css"/>
  </head>
  <body>
   <div class="navbar">
    <p style="line-height:200%">
     [
     <a href="aboutme.html">
      about me
     </a>
     ]   
 [
     <a href="links.html">
      links
     </a>
     ]   
 [
     <a href="index.html">
      assembly language code
     </a>
     ]   
 [
     <a href="sitemap.html">
      site map
     </a>
     ]
    </p>
   </div>
   <h1>
    Assembly Language Source Code
   </h1>
   <h2>
    The Idea
   </h2>
   <p>
    Over the years,
    <a href="aboutme.html">
     I
    </a>
    have written and given away a lot 
 of assembly language source code.  Some is useful in its own right but most 
 of these programs were written in response to questions on the Fidonet 80XXX 
 echo (a pre-Usenet assembly language discussion forum) and so they were mostly 
 intended to show an idea or approach relating to assembly language programming.  
 In other words, while they might actually
    <i>
     do something
    </i>
    , they're mostly 
 intended to be read by humans rather than run by computers.
   </p>
   <p>
    Almost all of this code is several years old and I haven't tested any of it for
 at least that long, so it's being made available "as is".
   </p>
   <h2>
    The Code
   </h2>
   <p>
    All of this code with the exception of
    <a href="#getcol.asm">
     getcol.asm
    </a>
    and
    <a href="#fibo-linux.asm">
     fibo-linux.asm
    </a>
    are intended to be run under MS-DOS.  Comments in the source code will 
 typically explain more details about the code.  Much of the code is written
 to be assembled with Borland's TASM, but little work would probably be 
 involved in translating these routines to use other assemblers, like
    <a href="http://www.beroset.com/links.html#MASM">
     MASM
    </a>
    or 
 maybe even
    <a href="http://nasm.sourceforge.net/">
     NASM
    </a>
    .
   </p>
   <p>
    When I use TASM, I typically use version 4.1, but I also use 5.0 on 
 occasion.  When I use MASM, it's usually either version 6.14 or version
 6.11.  For linking, I usually use Borland's tlink version 7.1.30.1 or
 sometimes Microsoft's linker version 5.60.339 or 5.31.009 or even 
 occasionally version 3.65 depending on which computer I'm using and 
 what code I'm working on.  I've been known to run NASM on occassion, but
 I find that it doesn't yet have all the features I want in an assembler.
   </p>
   <table summary="This is a table of assembly language source code
 	with brief descriptions of each file.">
    <caption>
     Assembly language source files with descriptions
    </caption>
    <tr id="boot.asm">
     <td>
     </td>
     <td>
      <a href="asm/boot.asm">
       boot.asm
      </a>
     </td>
     <td>
      simplified program to work with
      <a href="#loader.asm">
       loader.asm
      </a>
      to transfer your own loader code to a floppy disk.  (see
      <a href="boot.html">
       more description
      </a>
      )
     </td>
    </tr>
    <tr id="fibolinux.asm">
     <td>
     </td>
     <td>
      <a href="asm/fibo-linux.asm">
       fibo-linux.asm
      </a>
     </td>
     <td>
      a small program that calculates and prints terms of the Fibonacci series.  The algorithm is similar to
      <a href="#fibo.asm">
       fibo.asm
      </a>
      but this program runs under Linux and is very fast.
     </td>
    </tr>
    <tr id="fibo-masm.asm">
     <td>
     </td>
     <td>
      <a href="asm/fibo-masm.asm">
       fibo-masm.asm
      </a>
     </td>
     <td>
      a small program that calculates and prints terms of the Fibonacci series (MASM/TASM version)
     </td>
    </tr>
    <tr id="fibo.asm">
     <td>
     </td>
     <td>
      <a href="asm/fibo.asm">
       fibo.asm
      </a>
     </td>
     <td>
      a small program that calculates and prints terms of the Fibonacci series (NASM version)
     </td>
    </tr>
    <tr id="slip.asm">
     <td>
     </td>
     <td>
      <a href="asm/slip.asm">
       slip.asm
      </a>
     </td>
     <td>
      an implementation of SLIP (Serial Link IP), RFC 1055 in assembly language
      <a href="slip.html">
       (click here for more description...)
      </a>
     </td>
    </tr>
    <tr id="toclip.asm">
     <td>
     </td>
     <td>
      <a href="asm/toclip.asm">
       toclip.asm
      </a>
     </td>
     <td>
      command line program allows piping of output from other programs into 
 	Windows clipboard.
      <a href="toclip.html">
       (click here for more description...)
      </a>
     </td>
    </tr>
    <tr id="loader.asm">
     <td>
     </td>
     <td>
      <a href="asm/loader.asm">
       loader.asm
      </a>
     </td>
     <td>
      boot loader for a roll-your-own operating system
      <a href="loader.html">
       (click here for more description...)
      </a>
     </td>
    </tr>
    <tr id="beroset.asm">
     <td>
     </td>
     <td>
      <a href="asm/beroset.asm">
       beroset.asm
      </a>
     </td>
     <td>
      demonstration "operating system" stub for use with
      <a href="#loader.asm">
       loader.asm
      </a>
      <a href="loader.html">
       (click here for more description...)
      </a>
     </td>
    </tr>
    <tr id="sector.asm">
     <td>
     </td>
     <td>
      <a href="asm/sector.asm">
       sector.asm
      </a>
     </td>
     <td>
      writes a boot sector to the floppy disk (in A:)
     </td>
    </tr>
    <tr id="tinyfrac.asm">
     <td>
     </td>
     <td>
      <a href="asm/tinyfrac.asm">
       tinyfrac.asm
      </a>
     </td>
     <td>
      multi-function fractal demonstration program which results in 255 byte program
     </td>
    </tr>
    <tr id="flatmode.asm">
     <td>
     </td>
     <td>
      <a href="asm/flatmode.asm">
       flatmode.asm
      </a>
     </td>
     <td>
      sets up "flat real mode"
     </td>
    </tr>
    <tr id="test1.asm">
     <td>
     </td>
     <td>
      <a href="asm/test1.asm">
       test1.asm
      </a>
     </td>
     <td>
      demo showing how to use "flat real mode"
     </td>
    </tr>
    <tr id="rawread.asm">
     <td>
     </td>
     <td>
      <a href="asm/rawread.asm">
       rawread.asm
      </a>
     </td>
     <td>
      BIOS-based disk I/O to access MS-DOS file structure
     </td>
    </tr>
    <tr id="fibo2.asm">
     <td>
     </td>
     <td>
      <a href="asm/fibo2.asm">
       fibo2.asm
      </a>
     </td>
     <td>
      shows an interesting way to calculate Fibonacci numbers and
 	also shows how to use the numeric coprocessor (Floating Point Unit)
     </td>
    </tr>
    <tr id="vga.asm">
     <td>
     </td>
     <td>
      <a href="asm/vga.asm">
       vga.asm
      </a>
     </td>
     <td>
      shows one possible method for checking the type of video card installed in a system
     </td>
    </tr>
    <tr id="showdate.asm">
     <td>
     </td>
     <td>
      <a href="asm/showdate.asm">
       showdate.asm
      </a>
     </td>
     <td>
      assembly language program which shows the current date and time in a form 
 	identical to that used by Posix ctime()
     </td>
    </tr>
    <tr id="showregs.asm">
     <td>
     </td>
     <td>
      <a href="asm/showregs.asm">
       showregs.asm
      </a>
     </td>
     <td>
      shows the contents of registers on program start
     </td>
    </tr>
    <tr id="test2.asm">
     <td>
     </td>
     <td>
      <a href="asm/test2.asm">
       test2.asm
      </a>
     </td>
     <td>
      illustrates the simplified stack-based parameter passing using Borland's TASM
     </td>
    </tr>
    <tr id="print.asm">
     <td>
     </td>
     <td>
      <a href="asm/print.asm">
       print.asm
      </a>
     </td>
     <td>
      not a whole program, but a module containing various print routines
     </td>
    </tr>
    <tr id="example.asm">
     <td>
     </td>
     <td>
      <a href="asm/example.asm">
       example.asm
      </a>
     </td>
     <td>
      very short program to show how one uses the floating point unit
     </td>
    </tr>
    <tr id="pow.asm">
     <td>
     </td>
     <td>
      <a href="asm/pow.asm">
       pow.asm
      </a>
     </td>
     <td>
      another floating point example program.  This one contains a routine
 	to do exponentiation
     </td>
    </tr>
    <tr id="drives.asm">
     <td>
     </td>
     <td>
      <a href="asm/drives.asm">
       drives.asm
      </a>
     </td>
     <td>
      a short utility program which enumerates valid drives attached to 
 	the system
     </td>
    </tr>
    <tr id="dpmitest.asm">
     <td>
     </td>
     <td>
      <a href="asm/dpmitest.asm">
       dpmitest.asm
      </a>
     </td>
     <td>
      a DPMI test program which also serves an example for how to use
 	DPMI services to access memory
     </td>
    </tr>
    <tr id="bcd.asm">
     <td>
     </td>
     <td>
      <a href="asm/bcd.asm">
       bcd.asm
      </a>
     </td>
     <td>
      the venerable IBM-370 had a numeric format called packed
 	decimal which was similar to packed BCD.  This program shows
 	how one might manipulate such numbers.
     </td>
    </tr>
    <tr id="caschedsb.asm">
     <td>
     </td>
     <td>
      <a href="asm/cashedsb.asm">
       cashedsb.asm
      </a>
     </td>
     <td>
      disables the cache on a 486 and Pentium processor.
     </td>
    </tr>
    <tr id="eject.asm">
     <td>
     </td>
     <td>
      <a href="asm/eject.asm">
       eject.asm
      </a>
     </td>
     <td>
      ejects a SCSI tape (or CD-ROM) from a drive.  Shows a working 
 	example of a program which uses ASPI.
     </td>
    </tr>
    <tr id="isbnchek.asm">
     <td>
     </td>
     <td>
      <a href="asm/isbnchek.asm">
       isbnchek.asm
      </a>
     </td>
     <td>
      checks the validity of an ISBN by verifying the checksum
     </td>
    </tr>
    <tr id="scr.asm">
     <td>
     </td>
     <td>
      <a href="asm/scr.asm">
       scr.asm
      </a>
     </td>
     <td>
      shows a demonstration of a routine which scrolls a window on 
 	a text mode screen
     </td>
    </tr>
    <tr id="net_q.asm">
     <td>
     </td>
     <td>
      <a href="asm/net_q.asm">
       net_q.asm
      </a>
     </td>
     <td>
      gets a list of Queue servers under Novell Netware 3.11
     </td>
    </tr>
    <tr id="net_sn.asm">
     <td>
     </td>
     <td>
      <a href="asm/net_sn.asm">
       net_sn.asm
      </a>
     </td>
     <td>
      fetches and prints the network serial number under Novell Netware 3.11
     </td>
    </tr>
    <tr id="bootthru.asm">
     <td>
     </td>
     <td>
      <a href="asm/bootthru.asm">
       bootthru.asm
      </a>
     </td>
     <td>
      copies the Master Boot Record (MBR) from the C: drive, modifies it 
 	so that it will work from a floppy and writes it to a floppy.  The  
 	effect is that the computer will boot "through" the A drive and 
 	load as though it had been booted from C:
     </td>
    </tr>
    <tr id="getcol.asm">
     <td>
     </td>
     <td>
      <a href="asm/getcol.asm">
       getcol.asm
      </a>
     </td>
     <td>
      workaround for a Windows 3.1 bug which returned an incorrect 
 	collate sequence table.  This routine uses DPMI routines to 
 	fetch the DOS collate sequence table instead.
     </td>
    </tr>
    <tr id="pentbug.asm">
     <td>
     </td>
     <td>
      <a href="asm/pentbug.asm">
       pentbug.asm
      </a>
     </td>
     <td>
      tests for the well documented Pentium divide bug
     </td>
    </tr>
    <tr id="pentid.asm">
     <td>
     </td>
     <td>
      <a href="asm/pentid.asm">
       pentid.asm
      </a>
     </td>
     <td>
      issues the CPUID instruction to fetch the family, model and
 	stepping ID
     </td>
    </tr>
   </table>
   <div class="trailer">
    <hr/>
    <table summary="contact information for this page">
     <tr>
      <td>
       <address>
        <a href="mailto:beroset@mindspring.com">
         Ed Beroset
        </a>
        <br/>
        Last modified: Tue Apr 21 14:26:31 2015
       </address>
      </td>
      <td style="text-align: right">
       <a href="http://www.w3.org/WAI/WCAG1AA-Conformance" title="Explanation of Level Double-A Conformance">
        <img alt="Level Double-A conformance icon, 
           W3C-WAI Web Content Accessibility Guidelines 1.0" src="http://www.w3.org/WAI/wcag1AA" style="border:0;width:88px;height:31px"/>
       </a>
       <a href="http://jigsaw.w3.org/css-validator/check/referer" title="validates CSS conformance">
        <img alt="Valid CSS!" src="http://jigsaw.w3.org/css-validator/images/vcss" style="border:0;width:88px;height:31px"/>
       </a>
       <a href="http://validator.w3.org/check/referer" title="validates XHTML conformance">
        <img alt="Valid XHTML 1.0!" src="http://www.w3.org/Icons/valid-xhtml10" style="border:0;width:88px;height:31px"/>
       </a>
      </td>
     </tr>
    </table>
   </div>
  </body>
 </html>
